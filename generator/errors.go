package generator

import (
	"encoding/json"
	"errors"
	"fmt"

	. "github.com/dave/jennifer/jen"
	"github.com/gagliardetto/solana-go/rpc/jsonrpc"
)

func (g *Generator) gen_errors() (*OutputFile, error) {
	file := NewFile(g.options.Package)
	file.HeaderComment("Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.")
	file.HeaderComment("This file contains errors.")
	{
		code := Empty()
		for _, e := range g.idl.Errors {
			_ = e
			// spew.Dump(e)

			// 	type IdlErrorCode struct {
			// 		Code uint32 `json:"code"`
			// 		Name string `json:"name"`
			// 		//	    #[serde(skip_serializing_if = "is_default")]
			// 		//	    pub msg: Option<String>,
			// 		Msg Option[string] `json:"msg,omitzero"`
			// 	}
		}
		file.Add(code)
	}
	return &OutputFile{
		Name: "errors.go",
		File: file,
	}, nil
}

type CustomError interface {
	Code() int
	Name() string
	Error() string
}
type customErrorDef struct {
	code int
	name string
	msg  string
}

func (e *customErrorDef) Code() int {
	return e.code
}

func (e *customErrorDef) Name() string {
	return e.name
}

func (e *customErrorDef) Error() string {
	return fmt.Sprintf("%s(%d): %s", e.name, e.code, e.msg)
}

var Errors = map[int]CustomError{}

func DecodeCustomError(rpcErr error) (err error, ok bool) {
	if errCode, o := decodeErrorCode(rpcErr); o {
		if customErr, o := Errors[errCode]; o {
			err = customErr
			ok = true
			return
		}
	}
	return
}

func decodeErrorCode(rpcErr error) (errorCode int, ok bool) {
	var jErr *jsonrpc.RPCError
	if errors.As(rpcErr, &jErr) && jErr.Data != nil {
		if root, o := jErr.Data.(map[string]any); o {
			if rootErr, o := root["err"].(map[string]any); o {
				if rootErrInstructionError, o := rootErr["InstructionError"]; o {
					if rootErrInstructionErrorItems, o := rootErrInstructionError.([]any); o {
						if len(rootErrInstructionErrorItems) == 2 {
							if v, o := rootErrInstructionErrorItems[1].(map[string]any); o {
								if v2, o := v["Custom"].(json.Number); o {
									if code, err := v2.Int64(); err == nil {
										ok = true
										errorCode = int(code)
									}
								} else if v2, o := v["Custom"].(float64); o {
									ok = true
									errorCode = int(v2)
								}
							}
						}
					}
				}
			}
		}
	}
	return
}
