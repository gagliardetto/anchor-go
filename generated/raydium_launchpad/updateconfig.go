// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Updates configuration parameters
// # Arguments
//
// * `ctx` - The context of accounts
// * `param` - Parameter to update:
// - 0: Update trade_fee_rate
// - 1: Update fee owner
// * `value` - New value for the selected parameter
//
type UpdateConfig struct {
	Param *uint8
	Value *uint64

	// [0] = [SIGNER] owner
	// ··········· The global config owner or admin
	//
	// [1] = [WRITE] global_config
	// ··········· Global config account to be changed
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateConfigInstructionBuilder creates a new `UpdateConfig` instruction builder.
func NewUpdateConfigInstructionBuilder() *UpdateConfig {
	nd := &UpdateConfig{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(Addresses["GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ"]).SIGNER()
	return nd
}

// SetParam sets the "param" parameter.
func (inst *UpdateConfig) SetParam(param uint8) *UpdateConfig {
	inst.Param = &param
	return inst
}

// SetValue sets the "value" parameter.
func (inst *UpdateConfig) SetValue(value uint64) *UpdateConfig {
	inst.Value = &value
	return inst
}

// SetOwnerAccount sets the "owner" account.
// The global config owner or admin
func (inst *UpdateConfig) SetOwnerAccount(owner ag_solanago.PublicKey) *UpdateConfig {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
// The global config owner or admin
func (inst *UpdateConfig) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetGlobalConfigAccount sets the "global_config" account.
// Global config account to be changed
func (inst *UpdateConfig) SetGlobalConfigAccount(globalConfig ag_solanago.PublicKey) *UpdateConfig {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(globalConfig).WRITE()
	return inst
}

// GetGlobalConfigAccount gets the "global_config" account.
// Global config account to be changed
func (inst *UpdateConfig) GetGlobalConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst UpdateConfig) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateConfig,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateConfig) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateConfig) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Param == nil {
			return errors.New("Param parameter is not set")
		}
		if inst.Value == nil {
			return errors.New("Value parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.GlobalConfig is not set")
		}
	}
	return nil
}

func (inst *UpdateConfig) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateConfig")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Param", *inst.Param))
						paramsBranch.Child(ag_format.Param("Value", *inst.Value))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        owner", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("global_config", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj UpdateConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Param` param:
	err = encoder.Encode(obj.Param)
	if err != nil {
		return err
	}
	// Serialize `Value` param:
	err = encoder.Encode(obj.Value)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Param`:
	err = decoder.Decode(&obj.Param)
	if err != nil {
		return err
	}
	// Deserialize `Value`:
	err = decoder.Decode(&obj.Value)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateConfigInstruction declares a new UpdateConfig instruction with the provided parameters and accounts.
func NewUpdateConfigInstruction(
	// Parameters:
	param uint8,
	value uint64,
	// Accounts:
	owner ag_solanago.PublicKey,
	globalConfig ag_solanago.PublicKey) *UpdateConfig {
	return NewUpdateConfigInstructionBuilder().
		SetParam(param).
		SetValue(value).
		SetOwnerAccount(owner).
		SetGlobalConfigAccount(globalConfig)
}
