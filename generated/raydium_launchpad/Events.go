// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"encoding/base64"
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_rpc "github.com/gagliardetto/solana-go/rpc"
	ag_base58 "github.com/mr-tron/base58"
	"reflect"
	"strings"
)

type ClaimVestedEventEventData struct {
	PoolState   ag_solanago.PublicKey
	Beneficiary ag_solanago.PublicKey
	ClaimAmount uint64
}

var ClaimVestedEventEventDataDiscriminator = [8]byte{21, 194, 114, 87, 120, 211, 226, 32}

func (obj ClaimVestedEventEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ClaimVestedEventEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `PoolState` param:
	err = encoder.Encode(obj.PoolState)
	if err != nil {
		return err
	}
	// Serialize `Beneficiary` param:
	err = encoder.Encode(obj.Beneficiary)
	if err != nil {
		return err
	}
	// Serialize `ClaimAmount` param:
	err = encoder.Encode(obj.ClaimAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimVestedEventEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ClaimVestedEventEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[21 194 114 87 120 211 226 32]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `PoolState`:
	err = decoder.Decode(&obj.PoolState)
	if err != nil {
		return err
	}
	// Deserialize `Beneficiary`:
	err = decoder.Decode(&obj.Beneficiary)
	if err != nil {
		return err
	}
	// Deserialize `ClaimAmount`:
	err = decoder.Decode(&obj.ClaimAmount)
	if err != nil {
		return err
	}
	return nil
}

func (*ClaimVestedEventEventData) isEventData() {}

type CreateVestingEventEventData struct {
	PoolState   ag_solanago.PublicKey
	Beneficiary ag_solanago.PublicKey
	ShareAmount uint64
}

var CreateVestingEventEventDataDiscriminator = [8]byte{150, 152, 11, 179, 52, 210, 191, 125}

func (obj CreateVestingEventEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(CreateVestingEventEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `PoolState` param:
	err = encoder.Encode(obj.PoolState)
	if err != nil {
		return err
	}
	// Serialize `Beneficiary` param:
	err = encoder.Encode(obj.Beneficiary)
	if err != nil {
		return err
	}
	// Serialize `ShareAmount` param:
	err = encoder.Encode(obj.ShareAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CreateVestingEventEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(CreateVestingEventEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[150 152 11 179 52 210 191 125]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `PoolState`:
	err = decoder.Decode(&obj.PoolState)
	if err != nil {
		return err
	}
	// Deserialize `Beneficiary`:
	err = decoder.Decode(&obj.Beneficiary)
	if err != nil {
		return err
	}
	// Deserialize `ShareAmount`:
	err = decoder.Decode(&obj.ShareAmount)
	if err != nil {
		return err
	}
	return nil
}

func (*CreateVestingEventEventData) isEventData() {}

type PoolCreateEventEventData struct {
	PoolState     ag_solanago.PublicKey
	Creator       ag_solanago.PublicKey
	Config        ag_solanago.PublicKey
	BaseMintParam MintParams
	CurveParam    *CurveParams
	VestingParam  VestingParams
}

var PoolCreateEventEventDataDiscriminator = [8]byte{151, 215, 226, 9, 118, 161, 115, 174}

func (obj PoolCreateEventEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PoolCreateEventEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `PoolState` param:
	err = encoder.Encode(obj.PoolState)
	if err != nil {
		return err
	}
	// Serialize `Creator` param:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return err
	}
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	// Serialize `BaseMintParam` param:
	err = encoder.Encode(obj.BaseMintParam)
	if err != nil {
		return err
	}
	// Serialize `CurveParam` param:
	err = encoder.Encode(obj.CurveParam)
	if err != nil {
		return err
	}
	// Serialize `VestingParam` param:
	err = encoder.Encode(obj.VestingParam)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolCreateEventEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PoolCreateEventEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[151 215 226 9 118 161 115 174]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `PoolState`:
	err = decoder.Decode(&obj.PoolState)
	if err != nil {
		return err
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return err
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	// Deserialize `BaseMintParam`:
	err = decoder.Decode(&obj.BaseMintParam)
	if err != nil {
		return err
	}
	// Deserialize `CurveParam`:
	err = decoder.Decode(&obj.CurveParam)
	if err != nil {
		return err
	}
	// Deserialize `VestingParam`:
	err = decoder.Decode(&obj.VestingParam)
	if err != nil {
		return err
	}
	return nil
}

func (*PoolCreateEventEventData) isEventData() {}

type TradeEventEventData struct {
	PoolState       ag_solanago.PublicKey
	TotalBaseSell   uint64
	VirtualBase     uint64
	VirtualQuote    uint64
	RealBaseBefore  uint64
	RealQuoteBefore uint64
	RealBaseAfter   uint64
	RealQuoteAfter  uint64
	AmountIn        uint64
	AmountOut       uint64
	ProtocolFee     uint64
	PlatformFee     uint64
	ShareFee        uint64
	TradeDirection  TradeDirection
	PoolStatus      PoolStatus
}

var TradeEventEventDataDiscriminator = [8]byte{189, 219, 127, 211, 78, 230, 97, 238}

func (obj TradeEventEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(TradeEventEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `PoolState` param:
	err = encoder.Encode(obj.PoolState)
	if err != nil {
		return err
	}
	// Serialize `TotalBaseSell` param:
	err = encoder.Encode(obj.TotalBaseSell)
	if err != nil {
		return err
	}
	// Serialize `VirtualBase` param:
	err = encoder.Encode(obj.VirtualBase)
	if err != nil {
		return err
	}
	// Serialize `VirtualQuote` param:
	err = encoder.Encode(obj.VirtualQuote)
	if err != nil {
		return err
	}
	// Serialize `RealBaseBefore` param:
	err = encoder.Encode(obj.RealBaseBefore)
	if err != nil {
		return err
	}
	// Serialize `RealQuoteBefore` param:
	err = encoder.Encode(obj.RealQuoteBefore)
	if err != nil {
		return err
	}
	// Serialize `RealBaseAfter` param:
	err = encoder.Encode(obj.RealBaseAfter)
	if err != nil {
		return err
	}
	// Serialize `RealQuoteAfter` param:
	err = encoder.Encode(obj.RealQuoteAfter)
	if err != nil {
		return err
	}
	// Serialize `AmountIn` param:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return err
	}
	// Serialize `AmountOut` param:
	err = encoder.Encode(obj.AmountOut)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFee` param:
	err = encoder.Encode(obj.ProtocolFee)
	if err != nil {
		return err
	}
	// Serialize `PlatformFee` param:
	err = encoder.Encode(obj.PlatformFee)
	if err != nil {
		return err
	}
	// Serialize `ShareFee` param:
	err = encoder.Encode(obj.ShareFee)
	if err != nil {
		return err
	}
	// Serialize `TradeDirection` param:
	err = encoder.Encode(obj.TradeDirection)
	if err != nil {
		return err
	}
	// Serialize `PoolStatus` param:
	err = encoder.Encode(obj.PoolStatus)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TradeEventEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(TradeEventEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[189 219 127 211 78 230 97 238]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `PoolState`:
	err = decoder.Decode(&obj.PoolState)
	if err != nil {
		return err
	}
	// Deserialize `TotalBaseSell`:
	err = decoder.Decode(&obj.TotalBaseSell)
	if err != nil {
		return err
	}
	// Deserialize `VirtualBase`:
	err = decoder.Decode(&obj.VirtualBase)
	if err != nil {
		return err
	}
	// Deserialize `VirtualQuote`:
	err = decoder.Decode(&obj.VirtualQuote)
	if err != nil {
		return err
	}
	// Deserialize `RealBaseBefore`:
	err = decoder.Decode(&obj.RealBaseBefore)
	if err != nil {
		return err
	}
	// Deserialize `RealQuoteBefore`:
	err = decoder.Decode(&obj.RealQuoteBefore)
	if err != nil {
		return err
	}
	// Deserialize `RealBaseAfter`:
	err = decoder.Decode(&obj.RealBaseAfter)
	if err != nil {
		return err
	}
	// Deserialize `RealQuoteAfter`:
	err = decoder.Decode(&obj.RealQuoteAfter)
	if err != nil {
		return err
	}
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return err
	}
	// Deserialize `AmountOut`:
	err = decoder.Decode(&obj.AmountOut)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFee`:
	err = decoder.Decode(&obj.ProtocolFee)
	if err != nil {
		return err
	}
	// Deserialize `PlatformFee`:
	err = decoder.Decode(&obj.PlatformFee)
	if err != nil {
		return err
	}
	// Deserialize `ShareFee`:
	err = decoder.Decode(&obj.ShareFee)
	if err != nil {
		return err
	}
	// Deserialize `TradeDirection`:
	err = decoder.Decode(&obj.TradeDirection)
	if err != nil {
		return err
	}
	// Deserialize `PoolStatus`:
	err = decoder.Decode(&obj.PoolStatus)
	if err != nil {
		return err
	}
	return nil
}

func (*TradeEventEventData) isEventData() {}

var eventTypes = map[[8]byte]reflect.Type{
	ClaimVestedEventEventDataDiscriminator:   reflect.TypeOf(ClaimVestedEventEventData{}),
	CreateVestingEventEventDataDiscriminator: reflect.TypeOf(CreateVestingEventEventData{}),
	PoolCreateEventEventDataDiscriminator:    reflect.TypeOf(PoolCreateEventEventData{}),
	TradeEventEventDataDiscriminator:         reflect.TypeOf(TradeEventEventData{}),
}
var eventNames = map[[8]byte]string{
	ClaimVestedEventEventDataDiscriminator:   "ClaimVestedEvent",
	CreateVestingEventEventDataDiscriminator: "CreateVestingEvent",
	PoolCreateEventEventDataDiscriminator:    "PoolCreateEvent",
	TradeEventEventDataDiscriminator:         "TradeEvent",
}
var (
	_ *strings.Builder = nil
)
var (
	_ *base64.Encoding = nil
)
var (
	_ *ag_binary.Decoder = nil
)
var (
	_ *ag_rpc.GetTransactionResult = nil
)
var (
	_ *ag_base58.Alphabet = nil
)

type Event struct {
	Name string
	Data EventData
}

type EventData interface {
	UnmarshalWithDecoder(decoder *ag_binary.Decoder) error
	isEventData()
}

const eventLogPrefix = "Program data: "

func DecodeEvents(txData *ag_rpc.GetTransactionResult, targetProgramId ag_solanago.PublicKey, getAddressTables func(altAddresses []ag_solanago.PublicKey) (tables map[ag_solanago.PublicKey]ag_solanago.PublicKeySlice, err error)) (evts []*Event, err error) {
	var tx *ag_solanago.Transaction
	if tx, err = txData.Transaction.GetTransaction(); err != nil {
		return
	}

	altAddresses := make([]ag_solanago.PublicKey, len(tx.Message.AddressTableLookups))
	for i, alt := range tx.Message.AddressTableLookups {
		altAddresses[i] = alt.AccountKey
	}
	if len(altAddresses) > 0 {
		var tables map[ag_solanago.PublicKey]ag_solanago.PublicKeySlice
		if tables, err = getAddressTables(altAddresses); err != nil {
			return
		}
		tx.Message.SetAddressTables(tables)
		if err = tx.Message.ResolveLookups(); err != nil {
			return
		}
	}

	var base64Binaries [][]byte
	logMessageEventBinaries, err := decodeEventsFromLogMessage(txData.Meta.LogMessages)
	if err != nil {
		return
	}

	emitedCPIEventBinaries, err := decodeEventsFromEmitCPI(txData.Meta.InnerInstructions, tx.Message.AccountKeys, targetProgramId)
	if err != nil {
		return
	}

	base64Binaries = append(base64Binaries, logMessageEventBinaries...)
	base64Binaries = append(base64Binaries, emitedCPIEventBinaries...)
	evts, err = parseEvents(base64Binaries)
	return
}

func decodeEventsFromLogMessage(logMessages []string) (eventBinaries [][]byte, err error) {
	for _, log := range logMessages {
		if strings.HasPrefix(log, eventLogPrefix) {
			eventBase64 := log[len(eventLogPrefix):]

			var eventBinary []byte
			if eventBinary, err = base64.StdEncoding.DecodeString(eventBase64); err != nil {
				err = fmt.Errorf("failed to decode logMessage event: %s", eventBase64)
				return
			}
			eventBinaries = append(eventBinaries, eventBinary)
		}
	}
	return
}

func decodeEventsFromEmitCPI(InnerInstructions []ag_rpc.InnerInstruction, accountKeys ag_solanago.PublicKeySlice, targetProgramId ag_solanago.PublicKey) (eventBinaries [][]byte, err error) {
	for _, parsedIx := range InnerInstructions {
		for _, ix := range parsedIx.Instructions {
			if accountKeys[ix.ProgramIDIndex] != targetProgramId {
				continue
			}

			var ixData []byte
			if ixData, err = ag_base58.Decode(ix.Data.String()); err != nil {
				return
			}
			if len(ixData) < 8 {
				continue
			}

			eventBase64 := base64.StdEncoding.EncodeToString(ixData[8:])
			var eventBinary []byte
			if eventBinary, err = base64.StdEncoding.DecodeString(eventBase64); err != nil {
				return
			}
			eventBinaries = append(eventBinaries, eventBinary)
		}
	}
	return
}

func parseEvents(base64Binaries [][]byte) (evts []*Event, err error) {
	decoder := ag_binary.NewDecoderWithEncoding(nil, ag_binary.EncodingBorsh)

	for _, eventBinary := range base64Binaries {
		if len(eventBinary) < 8 {
			continue
		}
		eventDiscriminator := ag_binary.TypeID(eventBinary[:8])
		if eventType, ok := eventTypes[eventDiscriminator]; ok {
			eventData := reflect.New(eventType).Interface().(EventData)
			decoder.Reset(eventBinary)
			if err = eventData.UnmarshalWithDecoder(decoder); err != nil {
				err = fmt.Errorf("failed to unmarshal event %s: %w", eventType.String(), err)
				return
			}
			evts = append(evts, &Event{
				Name: eventNames[eventDiscriminator],
				Data: eventData,
			})
		}
	}
	return
}
