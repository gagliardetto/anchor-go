// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
	ag_v5 "github.com/vmihailenco/msgpack/v5"
)

// Creates a new configuration
// # Arguments
//
// * `ctx` - The accounts needed by instruction
// * `curve_type` - The type of bonding curve (0: ConstantProduct)
// * `index` - The index of config, there may be multiple config with the same curve type.
// * `trade_fee_rate` - Trade fee rate, must be less than RATE_DENOMINATOR_VALUE
//
type CreateConfig struct {
	CurveType    *uint8
	Index        *uint16
	MigrateFee   *uint64
	TradeFeeRate *uint64

	// [0] = [WRITE, SIGNER] owner
	// ··········· The protocol owner/admin account
	// ··········· Must match the predefined admin address
	// ··········· Has authority to create and modify protocol configurations
	//
	// [1] = [WRITE] global_config
	// ··········· Global configuration account that stores protocol-wide settings
	// ··········· PDA generated using GLOBAL_CONFIG_SEED, quote token mint, and curve type
	// ··········· Stores fee rates and protocol parameters
	//
	// [2] = [] quote_token_mint
	// ··········· The mint address of the quote token (token used for buying)
	// ··········· This will be the standard token used for all pools with this config
	//
	// [3] = [] protocol_fee_owner
	// ··········· Account that will receive protocol fees
	//
	// [4] = [] migrate_fee_owner
	// ··········· Account that will receive migrate fees
	//
	// [5] = [] migrate_to_amm_wallet
	// ··········· The control wallet address for migrating to amm
	//
	// [6] = [] migrate_to_cpswap_wallet
	// ··········· The control wallet address for migrating to cpswap
	//
	// [7] = [] system_program
	// ··········· Required for account creation
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateConfigInstructionBuilder creates a new `CreateConfig` instruction builder.
func NewCreateConfigInstructionBuilder() *CreateConfig {
	nd := &CreateConfig{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(Addresses["GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ"]).WRITE().SIGNER()
	nd.AccountMetaSlice[7] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	return nd
}

// SetCurveType sets the "curve_type" parameter.
func (inst *CreateConfig) SetCurveType(curve_type uint8) *CreateConfig {
	inst.CurveType = &curve_type
	return inst
}

// SetIndex sets the "index" parameter.
func (inst *CreateConfig) SetIndex(index uint16) *CreateConfig {
	inst.Index = &index
	return inst
}

// SetMigrateFee sets the "migrate_fee" parameter.
func (inst *CreateConfig) SetMigrateFee(migrate_fee uint64) *CreateConfig {
	inst.MigrateFee = &migrate_fee
	return inst
}

// SetTradeFeeRate sets the "trade_fee_rate" parameter.
func (inst *CreateConfig) SetTradeFeeRate(trade_fee_rate uint64) *CreateConfig {
	inst.TradeFeeRate = &trade_fee_rate
	return inst
}

// SetOwnerAccount sets the "owner" account.
// The protocol owner/admin account
// Must match the predefined admin address
// Has authority to create and modify protocol configurations
func (inst *CreateConfig) SetOwnerAccount(owner ag_solanago.PublicKey) *CreateConfig {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(owner).WRITE().SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
// The protocol owner/admin account
// Must match the predefined admin address
// Has authority to create and modify protocol configurations
func (inst *CreateConfig) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetGlobalConfigAccount sets the "global_config" account.
// Global configuration account that stores protocol-wide settings
// PDA generated using GLOBAL_CONFIG_SEED, quote token mint, and curve type
// Stores fee rates and protocol parameters
func (inst *CreateConfig) SetGlobalConfigAccount(globalConfig ag_solanago.PublicKey) *CreateConfig {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(globalConfig).WRITE()
	return inst
}

func (inst *CreateConfig) findFindGlobalConfigAddress(quoteTokenMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: global_config
	seeds = append(seeds, []byte{byte(0x67), byte(0x6c), byte(0x6f), byte(0x62), byte(0x61), byte(0x6c), byte(0x5f), byte(0x63), byte(0x6f), byte(0x6e), byte(0x66), byte(0x69), byte(0x67)})
	// path: quoteTokenMint
	seeds = append(seeds, quoteTokenMint.Bytes())
	// arg: CurveType
	curveTypeSeed, err := ag_v5.Marshal(inst.CurveType)
	if err != nil {
		return
	}
	seeds = append(seeds, curveTypeSeed)
	// arg: Index
	indexSeed, err := ag_v5.Marshal(inst.Index)
	if err != nil {
		return
	}
	seeds = append(seeds, indexSeed)

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindGlobalConfigAddressWithBumpSeed calculates GlobalConfig account address with given seeds and a known bump seed.
func (inst *CreateConfig) FindGlobalConfigAddressWithBumpSeed(quoteTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindGlobalConfigAddress(quoteTokenMint, bumpSeed)
	return
}

func (inst *CreateConfig) MustFindGlobalConfigAddressWithBumpSeed(quoteTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindGlobalConfigAddress(quoteTokenMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindGlobalConfigAddress finds GlobalConfig account address with given seeds.
func (inst *CreateConfig) FindGlobalConfigAddress(quoteTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindGlobalConfigAddress(quoteTokenMint, 0)
	return
}

func (inst *CreateConfig) MustFindGlobalConfigAddress(quoteTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindGlobalConfigAddress(quoteTokenMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetGlobalConfigAccount gets the "global_config" account.
// Global configuration account that stores protocol-wide settings
// PDA generated using GLOBAL_CONFIG_SEED, quote token mint, and curve type
// Stores fee rates and protocol parameters
func (inst *CreateConfig) GetGlobalConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetQuoteTokenMintAccount sets the "quote_token_mint" account.
// The mint address of the quote token (token used for buying)
// This will be the standard token used for all pools with this config
func (inst *CreateConfig) SetQuoteTokenMintAccount(quoteTokenMint ag_solanago.PublicKey) *CreateConfig {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(quoteTokenMint)
	return inst
}

// GetQuoteTokenMintAccount gets the "quote_token_mint" account.
// The mint address of the quote token (token used for buying)
// This will be the standard token used for all pools with this config
func (inst *CreateConfig) GetQuoteTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetProtocolFeeOwnerAccount sets the "protocol_fee_owner" account.
// Account that will receive protocol fees
func (inst *CreateConfig) SetProtocolFeeOwnerAccount(protocolFeeOwner ag_solanago.PublicKey) *CreateConfig {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(protocolFeeOwner)
	return inst
}

// GetProtocolFeeOwnerAccount gets the "protocol_fee_owner" account.
// Account that will receive protocol fees
func (inst *CreateConfig) GetProtocolFeeOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetMigrateFeeOwnerAccount sets the "migrate_fee_owner" account.
// Account that will receive migrate fees
func (inst *CreateConfig) SetMigrateFeeOwnerAccount(migrateFeeOwner ag_solanago.PublicKey) *CreateConfig {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(migrateFeeOwner)
	return inst
}

// GetMigrateFeeOwnerAccount gets the "migrate_fee_owner" account.
// Account that will receive migrate fees
func (inst *CreateConfig) GetMigrateFeeOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMigrateToAmmWalletAccount sets the "migrate_to_amm_wallet" account.
// The control wallet address for migrating to amm
func (inst *CreateConfig) SetMigrateToAmmWalletAccount(migrateToAmmWallet ag_solanago.PublicKey) *CreateConfig {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(migrateToAmmWallet)
	return inst
}

// GetMigrateToAmmWalletAccount gets the "migrate_to_amm_wallet" account.
// The control wallet address for migrating to amm
func (inst *CreateConfig) GetMigrateToAmmWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetMigrateToCpswapWalletAccount sets the "migrate_to_cpswap_wallet" account.
// The control wallet address for migrating to cpswap
func (inst *CreateConfig) SetMigrateToCpswapWalletAccount(migrateToCpswapWallet ag_solanago.PublicKey) *CreateConfig {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(migrateToCpswapWallet)
	return inst
}

// GetMigrateToCpswapWalletAccount gets the "migrate_to_cpswap_wallet" account.
// The control wallet address for migrating to cpswap
func (inst *CreateConfig) GetMigrateToCpswapWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSystemProgramAccount sets the "system_program" account.
// Required for account creation
func (inst *CreateConfig) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateConfig {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
// Required for account creation
func (inst *CreateConfig) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst CreateConfig) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateConfig,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateConfig) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateConfig) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.CurveType == nil {
			return errors.New("CurveType parameter is not set")
		}
		if inst.Index == nil {
			return errors.New("Index parameter is not set")
		}
		if inst.MigrateFee == nil {
			return errors.New("MigrateFee parameter is not set")
		}
		if inst.TradeFeeRate == nil {
			return errors.New("TradeFeeRate parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.GlobalConfig is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.QuoteTokenMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ProtocolFeeOwner is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.MigrateFeeOwner is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.MigrateToAmmWallet is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.MigrateToCpswapWallet is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateConfig) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateConfig")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("     CurveType", *inst.CurveType))
						paramsBranch.Child(ag_format.Param("         Index", *inst.Index))
						paramsBranch.Child(ag_format.Param("    MigrateFee", *inst.MigrateFee))
						paramsBranch.Child(ag_format.Param("  TradeFeeRate", *inst.TradeFeeRate))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                   owner", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           global_config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        quote_token_mint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("      protocol_fee_owner", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       migrate_fee_owner", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("   migrate_to_amm_wallet", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("migrate_to_cpswap_wallet", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("          system_program", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj CreateConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CurveType` param:
	err = encoder.Encode(obj.CurveType)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `MigrateFee` param:
	err = encoder.Encode(obj.MigrateFee)
	if err != nil {
		return err
	}
	// Serialize `TradeFeeRate` param:
	err = encoder.Encode(obj.TradeFeeRate)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CurveType`:
	err = decoder.Decode(&obj.CurveType)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `MigrateFee`:
	err = decoder.Decode(&obj.MigrateFee)
	if err != nil {
		return err
	}
	// Deserialize `TradeFeeRate`:
	err = decoder.Decode(&obj.TradeFeeRate)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateConfigInstruction declares a new CreateConfig instruction with the provided parameters and accounts.
func NewCreateConfigInstruction(
	// Parameters:
	curve_type uint8,
	index uint16,
	migrate_fee uint64,
	trade_fee_rate uint64,
	// Accounts:
	owner ag_solanago.PublicKey,
	globalConfig ag_solanago.PublicKey,
	quoteTokenMint ag_solanago.PublicKey,
	protocolFeeOwner ag_solanago.PublicKey,
	migrateFeeOwner ag_solanago.PublicKey,
	migrateToAmmWallet ag_solanago.PublicKey,
	migrateToCpswapWallet ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateConfig {
	return NewCreateConfigInstructionBuilder().
		SetCurveType(curve_type).
		SetIndex(index).
		SetMigrateFee(migrate_fee).
		SetTradeFeeRate(trade_fee_rate).
		SetOwnerAccount(owner).
		SetGlobalConfigAccount(globalConfig).
		SetQuoteTokenMintAccount(quoteTokenMint).
		SetProtocolFeeOwnerAccount(protocolFeeOwner).
		SetMigrateFeeOwnerAccount(migrateFeeOwner).
		SetMigrateToAmmWalletAccount(migrateToAmmWallet).
		SetMigrateToCpswapWalletAccount(migrateToCpswapWallet).
		SetSystemProgramAccount(systemProgram)
}
