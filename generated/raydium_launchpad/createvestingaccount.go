// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Create vesting account
// # Arguments
//
// * `ctx` - The context of accounts
// * `share` - The share amount of base token to be vested
//
type CreateVestingAccount struct {
	ShareAmount *uint64

	// [0] = [WRITE, SIGNER] creator
	// ··········· The account paying for the initialization costs
	// ··········· This can be any account with sufficient SOL to cover the transaction
	//
	// [1] = [WRITE] beneficiary
	//
	// [2] = [WRITE] pool_state
	// ··········· The pool state account
	//
	// [3] = [WRITE] vesting_record
	// ··········· The vesting record account
	//
	// [4] = [] system_program
	// ··········· Required for account creation
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateVestingAccountInstructionBuilder creates a new `CreateVestingAccount` instruction builder.
func NewCreateVestingAccountInstructionBuilder() *CreateVestingAccount {
	nd := &CreateVestingAccount{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	nd.AccountMetaSlice[4] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	return nd
}

// SetShareAmount sets the "share_amount" parameter.
func (inst *CreateVestingAccount) SetShareAmount(share_amount uint64) *CreateVestingAccount {
	inst.ShareAmount = &share_amount
	return inst
}

// SetCreatorAccount sets the "creator" account.
// The account paying for the initialization costs
// This can be any account with sufficient SOL to cover the transaction
func (inst *CreateVestingAccount) SetCreatorAccount(creator ag_solanago.PublicKey) *CreateVestingAccount {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(creator).WRITE().SIGNER()
	return inst
}

// GetCreatorAccount gets the "creator" account.
// The account paying for the initialization costs
// This can be any account with sufficient SOL to cover the transaction
func (inst *CreateVestingAccount) GetCreatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetBeneficiaryAccount sets the "beneficiary" account.
func (inst *CreateVestingAccount) SetBeneficiaryAccount(beneficiary ag_solanago.PublicKey) *CreateVestingAccount {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(beneficiary).WRITE()
	return inst
}

// GetBeneficiaryAccount gets the "beneficiary" account.
func (inst *CreateVestingAccount) GetBeneficiaryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPoolStateAccount sets the "pool_state" account.
// The pool state account
func (inst *CreateVestingAccount) SetPoolStateAccount(poolState ag_solanago.PublicKey) *CreateVestingAccount {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(poolState).WRITE()
	return inst
}

// GetPoolStateAccount gets the "pool_state" account.
// The pool state account
func (inst *CreateVestingAccount) GetPoolStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetVestingRecordAccount sets the "vesting_record" account.
// The vesting record account
func (inst *CreateVestingAccount) SetVestingRecordAccount(vestingRecord ag_solanago.PublicKey) *CreateVestingAccount {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(vestingRecord).WRITE()
	return inst
}

// GetVestingRecordAccount gets the "vesting_record" account.
// The vesting record account
func (inst *CreateVestingAccount) GetVestingRecordAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "system_program" account.
// Required for account creation
func (inst *CreateVestingAccount) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateVestingAccount {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
// Required for account creation
func (inst *CreateVestingAccount) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst CreateVestingAccount) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateVestingAccount,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateVestingAccount) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateVestingAccount) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.ShareAmount == nil {
			return errors.New("ShareAmount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Creator is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Beneficiary is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PoolState is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.VestingRecord is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateVestingAccount) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateVestingAccount")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" ShareAmount", *inst.ShareAmount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       creator", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("   beneficiary", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("    pool_state", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("vesting_record", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("system_program", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj CreateVestingAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ShareAmount` param:
	err = encoder.Encode(obj.ShareAmount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateVestingAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ShareAmount`:
	err = decoder.Decode(&obj.ShareAmount)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateVestingAccountInstruction declares a new CreateVestingAccount instruction with the provided parameters and accounts.
func NewCreateVestingAccountInstruction(
	// Parameters:
	share_amount uint64,
	// Accounts:
	creator ag_solanago.PublicKey,
	beneficiary ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	vestingRecord ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateVestingAccount {
	return NewCreateVestingAccountInstructionBuilder().
		SetShareAmount(share_amount).
		SetCreatorAccount(creator).
		SetBeneficiaryAccount(beneficiary).
		SetPoolStateAccount(poolState).
		SetVestingRecordAccount(vestingRecord).
		SetSystemProgramAccount(systemProgram)
}
