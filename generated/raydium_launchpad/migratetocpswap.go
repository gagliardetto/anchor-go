// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// # Arguments
//
// * `ctx` - The context of accounts
//
type MigrateToCpswap struct {

	// [0] = [WRITE, SIGNER] payer
	// ··········· Only migrate_to_cpswap_wallet can migrate to cpswap pool
	// ··········· This signer must match the migrate_to_cpswap_wallet saved in global_config
	//
	// [1] = [] base_mint
	// ··········· The mint for the base token (token being sold)
	//
	// [2] = [] quote_mint
	// ··········· The mint for the quote token (token used to buy)
	//
	// [3] = [] platform_config
	// ··········· Platform configuration account containing platform-wide settings
	// ··········· Used to read platform fee rate
	//
	// [4] = [] cpswap_program
	//
	// [5] = [WRITE] cpswap_pool
	// ··········· PDA account:
	// ··········· seeds = [
	// ··········· b"pool",
	// ··········· cpswap_config.key().as_ref(),
	// ··········· token_0_mint.key().as_ref(),
	// ··········· token_1_mint.key().as_ref(),
	// ··········· ],
	// ··········· seeds::program = cpswap_program,
	// ···········
	// ··········· Or random account: must be signed by cli
	//
	// [6] = [] cpswap_authority
	//
	// [7] = [WRITE] cpswap_lp_mint
	//
	// [8] = [WRITE] cpswap_base_vault
	//
	// [9] = [WRITE] cpswap_quote_vault
	//
	// [10] = [] cpswap_config
	//
	// [11] = [WRITE] cpswap_create_pool_fee
	//
	// [12] = [WRITE] cpswap_observation
	//
	// [13] = [] lock_program
	//
	// [14] = [] lock_authority
	//
	// [15] = [WRITE] lock_lp_vault
	//
	// [16] = [WRITE] authority
	// ··········· PDA that acts as the authority for pool vault operations
	// ··········· Generated using AUTH_SEED
	//
	// [17] = [WRITE] pool_state
	// ··········· Account that stores the pool's state and parameters
	// ··········· PDA generated using POOL_SEED and both token mints
	//
	// [18] = [] global_config
	// ··········· Global config account stores owner
	//
	// [19] = [WRITE] base_vault
	// ··········· The pool's vault for base tokens
	// ··········· Will be fully drained during migration
	//
	// [20] = [WRITE] quote_vault
	// ··········· The pool's vault for quote tokens
	// ··········· Will be fully drained during migration
	//
	// [21] = [WRITE] pool_lp_token
	//
	// [22] = [] base_token_program
	// ··········· SPL Token program for the base token
	// ··········· Must be the standard Token program
	//
	// [23] = [] quote_token_program
	// ··········· SPL Token program for the quote token
	//
	// [24] = [] associated_token_program
	// ··········· Program to create an ATA for receiving fee NFT
	//
	// [25] = [] system_program
	// ··········· Required for account creation
	//
	// [26] = [] rent_program
	// ··········· Required for rent exempt calculations
	//
	// [27] = [] metadata_program
	// ··········· Program to create NFT metadata accunt
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMigrateToCpswapInstructionBuilder creates a new `MigrateToCpswap` instruction builder.
func NewMigrateToCpswapInstructionBuilder() *MigrateToCpswap {
	nd := &MigrateToCpswap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 28),
	}
	nd.AccountMetaSlice[4] = ag_solanago.Meta(Addresses["CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C"])
	nd.AccountMetaSlice[13] = ag_solanago.Meta(Addresses["LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE"])
	nd.AccountMetaSlice[22] = ag_solanago.Meta(Addresses["TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"])
	nd.AccountMetaSlice[23] = ag_solanago.Meta(Addresses["TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"])
	nd.AccountMetaSlice[24] = ag_solanago.Meta(Addresses["ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"])
	nd.AccountMetaSlice[25] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	nd.AccountMetaSlice[26] = ag_solanago.Meta(Addresses["SysvarRent111111111111111111111111111111111"])
	nd.AccountMetaSlice[27] = ag_solanago.Meta(Addresses["metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"])
	return nd
}

// SetPayerAccount sets the "payer" account.
// Only migrate_to_cpswap_wallet can migrate to cpswap pool
// This signer must match the migrate_to_cpswap_wallet saved in global_config
func (inst *MigrateToCpswap) SetPayerAccount(payer ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// Only migrate_to_cpswap_wallet can migrate to cpswap pool
// This signer must match the migrate_to_cpswap_wallet saved in global_config
func (inst *MigrateToCpswap) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetBaseMintAccount sets the "base_mint" account.
// The mint for the base token (token being sold)
func (inst *MigrateToCpswap) SetBaseMintAccount(baseMint ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(baseMint)
	return inst
}

// GetBaseMintAccount gets the "base_mint" account.
// The mint for the base token (token being sold)
func (inst *MigrateToCpswap) GetBaseMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetQuoteMintAccount sets the "quote_mint" account.
// The mint for the quote token (token used to buy)
func (inst *MigrateToCpswap) SetQuoteMintAccount(quoteMint ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(quoteMint)
	return inst
}

// GetQuoteMintAccount gets the "quote_mint" account.
// The mint for the quote token (token used to buy)
func (inst *MigrateToCpswap) GetQuoteMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPlatformConfigAccount sets the "platform_config" account.
// Platform configuration account containing platform-wide settings
// Used to read platform fee rate
func (inst *MigrateToCpswap) SetPlatformConfigAccount(platformConfig ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(platformConfig)
	return inst
}

// GetPlatformConfigAccount gets the "platform_config" account.
// Platform configuration account containing platform-wide settings
// Used to read platform fee rate
func (inst *MigrateToCpswap) GetPlatformConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetCpswapProgramAccount sets the "cpswap_program" account.
func (inst *MigrateToCpswap) SetCpswapProgramAccount(cpswapProgram ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(cpswapProgram)
	return inst
}

// GetCpswapProgramAccount gets the "cpswap_program" account.
func (inst *MigrateToCpswap) GetCpswapProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetCpswapPoolAccount sets the "cpswap_pool" account.
// PDA account:
// seeds = [
// b"pool",
// cpswap_config.key().as_ref(),
// token_0_mint.key().as_ref(),
// token_1_mint.key().as_ref(),
// ],
// seeds::program = cpswap_program,
//
// Or random account: must be signed by cli
func (inst *MigrateToCpswap) SetCpswapPoolAccount(cpswapPool ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(cpswapPool).WRITE()
	return inst
}

// GetCpswapPoolAccount gets the "cpswap_pool" account.
// PDA account:
// seeds = [
// b"pool",
// cpswap_config.key().as_ref(),
// token_0_mint.key().as_ref(),
// token_1_mint.key().as_ref(),
// ],
// seeds::program = cpswap_program,
//
// Or random account: must be signed by cli
func (inst *MigrateToCpswap) GetCpswapPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetCpswapAuthorityAccount sets the "cpswap_authority" account.
func (inst *MigrateToCpswap) SetCpswapAuthorityAccount(cpswapAuthority ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(cpswapAuthority)
	return inst
}

func (inst *MigrateToCpswap) findFindCpswapAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: vault_and_lp_mint_auth_seed
	seeds = append(seeds, []byte{byte(0x76), byte(0x61), byte(0x75), byte(0x6c), byte(0x74), byte(0x5f), byte(0x61), byte(0x6e), byte(0x64), byte(0x5f), byte(0x6c), byte(0x70), byte(0x5f), byte(0x6d), byte(0x69), byte(0x6e), byte(0x74), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x5f), byte(0x73), byte(0x65), byte(0x65), byte(0x64)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindCpswapAuthorityAddressWithBumpSeed calculates CpswapAuthority account address with given seeds and a known bump seed.
func (inst *MigrateToCpswap) FindCpswapAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindCpswapAuthorityAddress(bumpSeed)
	return
}

func (inst *MigrateToCpswap) MustFindCpswapAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindCpswapAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindCpswapAuthorityAddress finds CpswapAuthority account address with given seeds.
func (inst *MigrateToCpswap) FindCpswapAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindCpswapAuthorityAddress(0)
	return
}

func (inst *MigrateToCpswap) MustFindCpswapAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindCpswapAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetCpswapAuthorityAccount gets the "cpswap_authority" account.
func (inst *MigrateToCpswap) GetCpswapAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetCpswapLpMintAccount sets the "cpswap_lp_mint" account.
func (inst *MigrateToCpswap) SetCpswapLpMintAccount(cpswapLpMint ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(cpswapLpMint).WRITE()
	return inst
}

func (inst *MigrateToCpswap) findFindCpswapLpMintAddress(cpswapPool ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: pool_lp_mint
	seeds = append(seeds, []byte{byte(0x70), byte(0x6f), byte(0x6f), byte(0x6c), byte(0x5f), byte(0x6c), byte(0x70), byte(0x5f), byte(0x6d), byte(0x69), byte(0x6e), byte(0x74)})
	// path: cpswapPool
	seeds = append(seeds, cpswapPool.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindCpswapLpMintAddressWithBumpSeed calculates CpswapLpMint account address with given seeds and a known bump seed.
func (inst *MigrateToCpswap) FindCpswapLpMintAddressWithBumpSeed(cpswapPool ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindCpswapLpMintAddress(cpswapPool, bumpSeed)
	return
}

func (inst *MigrateToCpswap) MustFindCpswapLpMintAddressWithBumpSeed(cpswapPool ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindCpswapLpMintAddress(cpswapPool, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindCpswapLpMintAddress finds CpswapLpMint account address with given seeds.
func (inst *MigrateToCpswap) FindCpswapLpMintAddress(cpswapPool ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindCpswapLpMintAddress(cpswapPool, 0)
	return
}

func (inst *MigrateToCpswap) MustFindCpswapLpMintAddress(cpswapPool ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindCpswapLpMintAddress(cpswapPool, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetCpswapLpMintAccount gets the "cpswap_lp_mint" account.
func (inst *MigrateToCpswap) GetCpswapLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetCpswapBaseVaultAccount sets the "cpswap_base_vault" account.
func (inst *MigrateToCpswap) SetCpswapBaseVaultAccount(cpswapBaseVault ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(cpswapBaseVault).WRITE()
	return inst
}

func (inst *MigrateToCpswap) findFindCpswapBaseVaultAddress(cpswapPool ag_solanago.PublicKey, baseMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: pool_vault
	seeds = append(seeds, []byte{byte(0x70), byte(0x6f), byte(0x6f), byte(0x6c), byte(0x5f), byte(0x76), byte(0x61), byte(0x75), byte(0x6c), byte(0x74)})
	// path: cpswapPool
	seeds = append(seeds, cpswapPool.Bytes())
	// path: baseMint
	seeds = append(seeds, baseMint.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindCpswapBaseVaultAddressWithBumpSeed calculates CpswapBaseVault account address with given seeds and a known bump seed.
func (inst *MigrateToCpswap) FindCpswapBaseVaultAddressWithBumpSeed(cpswapPool ag_solanago.PublicKey, baseMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindCpswapBaseVaultAddress(cpswapPool, baseMint, bumpSeed)
	return
}

func (inst *MigrateToCpswap) MustFindCpswapBaseVaultAddressWithBumpSeed(cpswapPool ag_solanago.PublicKey, baseMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindCpswapBaseVaultAddress(cpswapPool, baseMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindCpswapBaseVaultAddress finds CpswapBaseVault account address with given seeds.
func (inst *MigrateToCpswap) FindCpswapBaseVaultAddress(cpswapPool ag_solanago.PublicKey, baseMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindCpswapBaseVaultAddress(cpswapPool, baseMint, 0)
	return
}

func (inst *MigrateToCpswap) MustFindCpswapBaseVaultAddress(cpswapPool ag_solanago.PublicKey, baseMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindCpswapBaseVaultAddress(cpswapPool, baseMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetCpswapBaseVaultAccount gets the "cpswap_base_vault" account.
func (inst *MigrateToCpswap) GetCpswapBaseVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetCpswapQuoteVaultAccount sets the "cpswap_quote_vault" account.
func (inst *MigrateToCpswap) SetCpswapQuoteVaultAccount(cpswapQuoteVault ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(cpswapQuoteVault).WRITE()
	return inst
}

func (inst *MigrateToCpswap) findFindCpswapQuoteVaultAddress(cpswapPool ag_solanago.PublicKey, quoteMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: pool_vault
	seeds = append(seeds, []byte{byte(0x70), byte(0x6f), byte(0x6f), byte(0x6c), byte(0x5f), byte(0x76), byte(0x61), byte(0x75), byte(0x6c), byte(0x74)})
	// path: cpswapPool
	seeds = append(seeds, cpswapPool.Bytes())
	// path: quoteMint
	seeds = append(seeds, quoteMint.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindCpswapQuoteVaultAddressWithBumpSeed calculates CpswapQuoteVault account address with given seeds and a known bump seed.
func (inst *MigrateToCpswap) FindCpswapQuoteVaultAddressWithBumpSeed(cpswapPool ag_solanago.PublicKey, quoteMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindCpswapQuoteVaultAddress(cpswapPool, quoteMint, bumpSeed)
	return
}

func (inst *MigrateToCpswap) MustFindCpswapQuoteVaultAddressWithBumpSeed(cpswapPool ag_solanago.PublicKey, quoteMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindCpswapQuoteVaultAddress(cpswapPool, quoteMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindCpswapQuoteVaultAddress finds CpswapQuoteVault account address with given seeds.
func (inst *MigrateToCpswap) FindCpswapQuoteVaultAddress(cpswapPool ag_solanago.PublicKey, quoteMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindCpswapQuoteVaultAddress(cpswapPool, quoteMint, 0)
	return
}

func (inst *MigrateToCpswap) MustFindCpswapQuoteVaultAddress(cpswapPool ag_solanago.PublicKey, quoteMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindCpswapQuoteVaultAddress(cpswapPool, quoteMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetCpswapQuoteVaultAccount gets the "cpswap_quote_vault" account.
func (inst *MigrateToCpswap) GetCpswapQuoteVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetCpswapConfigAccount sets the "cpswap_config" account.
func (inst *MigrateToCpswap) SetCpswapConfigAccount(cpswapConfig ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(cpswapConfig)
	return inst
}

// GetCpswapConfigAccount gets the "cpswap_config" account.
func (inst *MigrateToCpswap) GetCpswapConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetCpswapCreatePoolFeeAccount sets the "cpswap_create_pool_fee" account.
func (inst *MigrateToCpswap) SetCpswapCreatePoolFeeAccount(cpswapCreatePoolFee ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(cpswapCreatePoolFee).WRITE()
	return inst
}

// GetCpswapCreatePoolFeeAccount gets the "cpswap_create_pool_fee" account.
func (inst *MigrateToCpswap) GetCpswapCreatePoolFeeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetCpswapObservationAccount sets the "cpswap_observation" account.
func (inst *MigrateToCpswap) SetCpswapObservationAccount(cpswapObservation ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(cpswapObservation).WRITE()
	return inst
}

func (inst *MigrateToCpswap) findFindCpswapObservationAddress(cpswapPool ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: observation
	seeds = append(seeds, []byte{byte(0x6f), byte(0x62), byte(0x73), byte(0x65), byte(0x72), byte(0x76), byte(0x61), byte(0x74), byte(0x69), byte(0x6f), byte(0x6e)})
	// path: cpswapPool
	seeds = append(seeds, cpswapPool.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindCpswapObservationAddressWithBumpSeed calculates CpswapObservation account address with given seeds and a known bump seed.
func (inst *MigrateToCpswap) FindCpswapObservationAddressWithBumpSeed(cpswapPool ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindCpswapObservationAddress(cpswapPool, bumpSeed)
	return
}

func (inst *MigrateToCpswap) MustFindCpswapObservationAddressWithBumpSeed(cpswapPool ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindCpswapObservationAddress(cpswapPool, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindCpswapObservationAddress finds CpswapObservation account address with given seeds.
func (inst *MigrateToCpswap) FindCpswapObservationAddress(cpswapPool ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindCpswapObservationAddress(cpswapPool, 0)
	return
}

func (inst *MigrateToCpswap) MustFindCpswapObservationAddress(cpswapPool ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindCpswapObservationAddress(cpswapPool, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetCpswapObservationAccount gets the "cpswap_observation" account.
func (inst *MigrateToCpswap) GetCpswapObservationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetLockProgramAccount sets the "lock_program" account.
func (inst *MigrateToCpswap) SetLockProgramAccount(lockProgram ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(lockProgram)
	return inst
}

// GetLockProgramAccount gets the "lock_program" account.
func (inst *MigrateToCpswap) GetLockProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetLockAuthorityAccount sets the "lock_authority" account.
func (inst *MigrateToCpswap) SetLockAuthorityAccount(lockAuthority ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(lockAuthority)
	return inst
}

func (inst *MigrateToCpswap) findFindLockAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: lock_cp_authority_seed
	seeds = append(seeds, []byte{byte(0x6c), byte(0x6f), byte(0x63), byte(0x6b), byte(0x5f), byte(0x63), byte(0x70), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79), byte(0x5f), byte(0x73), byte(0x65), byte(0x65), byte(0x64)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindLockAuthorityAddressWithBumpSeed calculates LockAuthority account address with given seeds and a known bump seed.
func (inst *MigrateToCpswap) FindLockAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindLockAuthorityAddress(bumpSeed)
	return
}

func (inst *MigrateToCpswap) MustFindLockAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindLockAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindLockAuthorityAddress finds LockAuthority account address with given seeds.
func (inst *MigrateToCpswap) FindLockAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindLockAuthorityAddress(0)
	return
}

func (inst *MigrateToCpswap) MustFindLockAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindLockAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetLockAuthorityAccount gets the "lock_authority" account.
func (inst *MigrateToCpswap) GetLockAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetLockLpVaultAccount sets the "lock_lp_vault" account.
func (inst *MigrateToCpswap) SetLockLpVaultAccount(lockLpVault ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(lockLpVault).WRITE()
	return inst
}

// GetLockLpVaultAccount gets the "lock_lp_vault" account.
func (inst *MigrateToCpswap) GetLockLpVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetAuthorityAccount sets the "authority" account.
// PDA that acts as the authority for pool vault operations
// Generated using AUTH_SEED
func (inst *MigrateToCpswap) SetAuthorityAccount(authority ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(authority).WRITE()
	return inst
}

func (inst *MigrateToCpswap) findFindAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: vault_auth_seed
	seeds = append(seeds, []byte{byte(0x76), byte(0x61), byte(0x75), byte(0x6c), byte(0x74), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x5f), byte(0x73), byte(0x65), byte(0x65), byte(0x64)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindAuthorityAddressWithBumpSeed calculates Authority account address with given seeds and a known bump seed.
func (inst *MigrateToCpswap) FindAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindAuthorityAddress(bumpSeed)
	return
}

func (inst *MigrateToCpswap) MustFindAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindAuthorityAddress finds Authority account address with given seeds.
func (inst *MigrateToCpswap) FindAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindAuthorityAddress(0)
	return
}

func (inst *MigrateToCpswap) MustFindAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetAuthorityAccount gets the "authority" account.
// PDA that acts as the authority for pool vault operations
// Generated using AUTH_SEED
func (inst *MigrateToCpswap) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetPoolStateAccount sets the "pool_state" account.
// Account that stores the pool's state and parameters
// PDA generated using POOL_SEED and both token mints
func (inst *MigrateToCpswap) SetPoolStateAccount(poolState ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(poolState).WRITE()
	return inst
}

func (inst *MigrateToCpswap) findFindPoolStateAddress(baseMint ag_solanago.PublicKey, quoteMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: pool
	seeds = append(seeds, []byte{byte(0x70), byte(0x6f), byte(0x6f), byte(0x6c)})
	// path: baseMint
	seeds = append(seeds, baseMint.Bytes())
	// path: quoteMint
	seeds = append(seeds, quoteMint.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindPoolStateAddressWithBumpSeed calculates PoolState account address with given seeds and a known bump seed.
func (inst *MigrateToCpswap) FindPoolStateAddressWithBumpSeed(baseMint ag_solanago.PublicKey, quoteMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindPoolStateAddress(baseMint, quoteMint, bumpSeed)
	return
}

func (inst *MigrateToCpswap) MustFindPoolStateAddressWithBumpSeed(baseMint ag_solanago.PublicKey, quoteMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindPoolStateAddress(baseMint, quoteMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindPoolStateAddress finds PoolState account address with given seeds.
func (inst *MigrateToCpswap) FindPoolStateAddress(baseMint ag_solanago.PublicKey, quoteMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindPoolStateAddress(baseMint, quoteMint, 0)
	return
}

func (inst *MigrateToCpswap) MustFindPoolStateAddress(baseMint ag_solanago.PublicKey, quoteMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindPoolStateAddress(baseMint, quoteMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetPoolStateAccount gets the "pool_state" account.
// Account that stores the pool's state and parameters
// PDA generated using POOL_SEED and both token mints
func (inst *MigrateToCpswap) GetPoolStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

// SetGlobalConfigAccount sets the "global_config" account.
// Global config account stores owner
func (inst *MigrateToCpswap) SetGlobalConfigAccount(globalConfig ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(globalConfig)
	return inst
}

// GetGlobalConfigAccount gets the "global_config" account.
// Global config account stores owner
func (inst *MigrateToCpswap) GetGlobalConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(18)
}

// SetBaseVaultAccount sets the "base_vault" account.
// The pool's vault for base tokens
// Will be fully drained during migration
func (inst *MigrateToCpswap) SetBaseVaultAccount(baseVault ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[19] = ag_solanago.Meta(baseVault).WRITE()
	return inst
}

// GetBaseVaultAccount gets the "base_vault" account.
// The pool's vault for base tokens
// Will be fully drained during migration
func (inst *MigrateToCpswap) GetBaseVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(19)
}

// SetQuoteVaultAccount sets the "quote_vault" account.
// The pool's vault for quote tokens
// Will be fully drained during migration
func (inst *MigrateToCpswap) SetQuoteVaultAccount(quoteVault ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[20] = ag_solanago.Meta(quoteVault).WRITE()
	return inst
}

// GetQuoteVaultAccount gets the "quote_vault" account.
// The pool's vault for quote tokens
// Will be fully drained during migration
func (inst *MigrateToCpswap) GetQuoteVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(20)
}

// SetPoolLpTokenAccount sets the "pool_lp_token" account.
func (inst *MigrateToCpswap) SetPoolLpTokenAccount(poolLpToken ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[21] = ag_solanago.Meta(poolLpToken).WRITE()
	return inst
}

// GetPoolLpTokenAccount gets the "pool_lp_token" account.
func (inst *MigrateToCpswap) GetPoolLpTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(21)
}

// SetBaseTokenProgramAccount sets the "base_token_program" account.
// SPL Token program for the base token
// Must be the standard Token program
func (inst *MigrateToCpswap) SetBaseTokenProgramAccount(baseTokenProgram ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[22] = ag_solanago.Meta(baseTokenProgram)
	return inst
}

// GetBaseTokenProgramAccount gets the "base_token_program" account.
// SPL Token program for the base token
// Must be the standard Token program
func (inst *MigrateToCpswap) GetBaseTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(22)
}

// SetQuoteTokenProgramAccount sets the "quote_token_program" account.
// SPL Token program for the quote token
func (inst *MigrateToCpswap) SetQuoteTokenProgramAccount(quoteTokenProgram ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[23] = ag_solanago.Meta(quoteTokenProgram)
	return inst
}

// GetQuoteTokenProgramAccount gets the "quote_token_program" account.
// SPL Token program for the quote token
func (inst *MigrateToCpswap) GetQuoteTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(23)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
// Program to create an ATA for receiving fee NFT
func (inst *MigrateToCpswap) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[24] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
// Program to create an ATA for receiving fee NFT
func (inst *MigrateToCpswap) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(24)
}

// SetSystemProgramAccount sets the "system_program" account.
// Required for account creation
func (inst *MigrateToCpswap) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[25] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
// Required for account creation
func (inst *MigrateToCpswap) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(25)
}

// SetRentProgramAccount sets the "rent_program" account.
// Required for rent exempt calculations
func (inst *MigrateToCpswap) SetRentProgramAccount(rentProgram ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[26] = ag_solanago.Meta(rentProgram)
	return inst
}

// GetRentProgramAccount gets the "rent_program" account.
// Required for rent exempt calculations
func (inst *MigrateToCpswap) GetRentProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(26)
}

// SetMetadataProgramAccount sets the "metadata_program" account.
// Program to create NFT metadata accunt
func (inst *MigrateToCpswap) SetMetadataProgramAccount(metadataProgram ag_solanago.PublicKey) *MigrateToCpswap {
	inst.AccountMetaSlice[27] = ag_solanago.Meta(metadataProgram)
	return inst
}

// GetMetadataProgramAccount gets the "metadata_program" account.
// Program to create NFT metadata accunt
func (inst *MigrateToCpswap) GetMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(27)
}

func (inst MigrateToCpswap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MigrateToCpswap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MigrateToCpswap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MigrateToCpswap) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.BaseMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.QuoteMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PlatformConfig is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.CpswapProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.CpswapPool is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.CpswapAuthority is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.CpswapLpMint is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.CpswapBaseVault is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.CpswapQuoteVault is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.CpswapConfig is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.CpswapCreatePoolFee is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.CpswapObservation is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.LockProgram is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.LockAuthority is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.LockLpVault is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.PoolState is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.GlobalConfig is not set")
		}
		if inst.AccountMetaSlice[19] == nil {
			return errors.New("accounts.BaseVault is not set")
		}
		if inst.AccountMetaSlice[20] == nil {
			return errors.New("accounts.QuoteVault is not set")
		}
		if inst.AccountMetaSlice[21] == nil {
			return errors.New("accounts.PoolLpToken is not set")
		}
		if inst.AccountMetaSlice[22] == nil {
			return errors.New("accounts.BaseTokenProgram is not set")
		}
		if inst.AccountMetaSlice[23] == nil {
			return errors.New("accounts.QuoteTokenProgram is not set")
		}
		if inst.AccountMetaSlice[24] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[25] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[26] == nil {
			return errors.New("accounts.RentProgram is not set")
		}
		if inst.AccountMetaSlice[27] == nil {
			return errors.New("accounts.MetadataProgram is not set")
		}
	}
	return nil
}

func (inst *MigrateToCpswap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MigrateToCpswap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=28]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                   payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("               base_mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("              quote_mint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         platform_config", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("          cpswap_program", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("             cpswap_pool", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("        cpswap_authority", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("          cpswap_lp_mint", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("       cpswap_base_vault", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("      cpswap_quote_vault", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("           cpswap_config", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("  cpswap_create_pool_fee", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("      cpswap_observation", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("            lock_program", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("          lock_authority", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("           lock_lp_vault", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("               authority", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("              pool_state", inst.AccountMetaSlice.Get(17)))
						accountsBranch.Child(ag_format.Meta("           global_config", inst.AccountMetaSlice.Get(18)))
						accountsBranch.Child(ag_format.Meta("              base_vault", inst.AccountMetaSlice.Get(19)))
						accountsBranch.Child(ag_format.Meta("             quote_vault", inst.AccountMetaSlice.Get(20)))
						accountsBranch.Child(ag_format.Meta("           pool_lp_token", inst.AccountMetaSlice.Get(21)))
						accountsBranch.Child(ag_format.Meta("      base_token_program", inst.AccountMetaSlice.Get(22)))
						accountsBranch.Child(ag_format.Meta("     quote_token_program", inst.AccountMetaSlice.Get(23)))
						accountsBranch.Child(ag_format.Meta("associated_token_program", inst.AccountMetaSlice.Get(24)))
						accountsBranch.Child(ag_format.Meta("          system_program", inst.AccountMetaSlice.Get(25)))
						accountsBranch.Child(ag_format.Meta("            rent_program", inst.AccountMetaSlice.Get(26)))
						accountsBranch.Child(ag_format.Meta("        metadata_program", inst.AccountMetaSlice.Get(27)))
					})
				})
		})
}

func (obj MigrateToCpswap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *MigrateToCpswap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewMigrateToCpswapInstruction declares a new MigrateToCpswap instruction with the provided parameters and accounts.
func NewMigrateToCpswapInstruction(
	// Accounts:
	payer ag_solanago.PublicKey,
	baseMint ag_solanago.PublicKey,
	quoteMint ag_solanago.PublicKey,
	platformConfig ag_solanago.PublicKey,
	cpswapProgram ag_solanago.PublicKey,
	cpswapPool ag_solanago.PublicKey,
	cpswapAuthority ag_solanago.PublicKey,
	cpswapLpMint ag_solanago.PublicKey,
	cpswapBaseVault ag_solanago.PublicKey,
	cpswapQuoteVault ag_solanago.PublicKey,
	cpswapConfig ag_solanago.PublicKey,
	cpswapCreatePoolFee ag_solanago.PublicKey,
	cpswapObservation ag_solanago.PublicKey,
	lockProgram ag_solanago.PublicKey,
	lockAuthority ag_solanago.PublicKey,
	lockLpVault ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	globalConfig ag_solanago.PublicKey,
	baseVault ag_solanago.PublicKey,
	quoteVault ag_solanago.PublicKey,
	poolLpToken ag_solanago.PublicKey,
	baseTokenProgram ag_solanago.PublicKey,
	quoteTokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rentProgram ag_solanago.PublicKey,
	metadataProgram ag_solanago.PublicKey) *MigrateToCpswap {
	return NewMigrateToCpswapInstructionBuilder().
		SetPayerAccount(payer).
		SetBaseMintAccount(baseMint).
		SetQuoteMintAccount(quoteMint).
		SetPlatformConfigAccount(platformConfig).
		SetCpswapProgramAccount(cpswapProgram).
		SetCpswapPoolAccount(cpswapPool).
		SetCpswapAuthorityAccount(cpswapAuthority).
		SetCpswapLpMintAccount(cpswapLpMint).
		SetCpswapBaseVaultAccount(cpswapBaseVault).
		SetCpswapQuoteVaultAccount(cpswapQuoteVault).
		SetCpswapConfigAccount(cpswapConfig).
		SetCpswapCreatePoolFeeAccount(cpswapCreatePoolFee).
		SetCpswapObservationAccount(cpswapObservation).
		SetLockProgramAccount(lockProgram).
		SetLockAuthorityAccount(lockAuthority).
		SetLockLpVaultAccount(lockLpVault).
		SetAuthorityAccount(authority).
		SetPoolStateAccount(poolState).
		SetGlobalConfigAccount(globalConfig).
		SetBaseVaultAccount(baseVault).
		SetQuoteVaultAccount(quoteVault).
		SetPoolLpTokenAccount(poolLpToken).
		SetBaseTokenProgramAccount(baseTokenProgram).
		SetQuoteTokenProgramAccount(quoteTokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentProgramAccount(rentProgram).
		SetMetadataProgramAccount(metadataProgram)
}
