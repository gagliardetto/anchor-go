// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey = ag_solanago.MustPublicKeyFromBase58("LanMV9sAd7wArD4vJFi2qDdfnVhFxYSUg6eADduJ3uj")

func SetProgramID(PublicKey ag_solanago.PublicKey) {
	ProgramID = PublicKey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "RaydiumLaunchpad"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	// Use the given amount of quote tokens to purchase base tokens.
	// # Arguments
	//
	// * `ctx` - The context of accounts
	// * `amount_in` - Amount of quote token to purchase
	// * `minimum_amount_out` - Minimum amount of base token to receive (slippage protection)
	// * `share_fee_rate` - Fee rate for the share
	//
	Instruction_BuyExactIn = ag_binary.TypeID([8]byte{250, 234, 13, 123, 213, 156, 19, 236})

	// Use quote tokens to purchase the given amount of base tokens.
	// # Arguments
	//
	// * `ctx` - The context of accounts
	// * `amount_out` - Amount of base token to receive
	// * `maximum_amount_in` - Maximum amount of quote token to purchase (slippage protection)
	// * `share_fee_rate` - Fee rate for the share
	Instruction_BuyExactOut = ag_binary.TypeID([8]byte{24, 211, 116, 40, 105, 3, 153, 56})

	// Claim platform fee
	// # Arguments
	//
	// * `ctx` - The context of accounts
	//
	Instruction_ClaimPlatformFee = ag_binary.TypeID([8]byte{156, 39, 208, 135, 76, 237, 61, 72})

	// Claim vested token
	// # Arguments
	Instruction_ClaimVestedToken = ag_binary.TypeID([8]byte{49, 33, 104, 30, 189, 157, 79, 35})

	// Collects accumulated fees from the pool
	// # Arguments
	//
	// * `ctx` - The context of accounts
	//
	Instruction_CollectFee = ag_binary.TypeID([8]byte{60, 173, 247, 103, 4, 93, 130, 48})

	// Collects  migrate fees from the pool
	// # Arguments
	//
	// * `ctx` - The context of accounts
	//
	Instruction_CollectMigrateFee = ag_binary.TypeID([8]byte{255, 186, 150, 223, 235, 118, 201, 186})

	// Creates a new configuration
	// # Arguments
	//
	// * `ctx` - The accounts needed by instruction
	// * `curve_type` - The type of bonding curve (0: ConstantProduct)
	// * `index` - The index of config, there may be multiple config with the same curve type.
	// * `trade_fee_rate` - Trade fee rate, must be less than RATE_DENOMINATOR_VALUE
	//
	Instruction_CreateConfig = ag_binary.TypeID([8]byte{201, 207, 243, 114, 75, 111, 47, 189})

	// Create platform config account
	// # Arguments
	//
	// * `ctx` - The context of accounts
	// # Fields
	// * `fee_rate` - Fee rate of the platform
	// * `name` - Name of the platform
	// * `web` - Website of the platform
	// * `img` - Image link of the platform
	//
	Instruction_CreatePlatformConfig = ag_binary.TypeID([8]byte{176, 90, 196, 175, 253, 113, 220, 20})

	// Create vesting account
	// # Arguments
	//
	// * `ctx` - The context of accounts
	// * `share` - The share amount of base token to be vested
	//
	Instruction_CreateVestingAccount = ag_binary.TypeID([8]byte{129, 178, 2, 13, 217, 172, 230, 218})

	// Initializes a new trading pool
	// # Arguments
	//
	// * `ctx` - The context of accounts containing pool and token information
	//
	Instruction_Initialize = ag_binary.TypeID([8]byte{175, 175, 109, 31, 13, 152, 155, 237})

	// # Arguments
	//
	// * `ctx` - The context of accounts
	//
	Instruction_MigrateToAmm = ag_binary.TypeID([8]byte{207, 82, 192, 145, 254, 207, 145, 223})

	// # Arguments
	//
	// * `ctx` - The context of accounts
	//
	Instruction_MigrateToCpswap = ag_binary.TypeID([8]byte{136, 92, 200, 103, 28, 218, 144, 140})

	// Use the given amount of base tokens to sell for quote tokens.
	// # Arguments
	//
	// * `ctx` - The context of accounts
	// * `amount_in` - Amount of base token to sell
	// * `minimum_amount_out` - Minimum amount of quote token to receive (slippage protection)
	// * `share_fee_rate` - Fee rate for the share
	//
	Instruction_SellExactIn = ag_binary.TypeID([8]byte{149, 39, 222, 155, 211, 124, 152, 26})

	// Sell base tokens for the given amount of quote tokens.
	// # Arguments
	//
	// * `ctx` - The context of accounts
	// * `amount_out` - Amount of quote token to receive
	// * `maximum_amount_in` - Maximum amount of base token to purchase (slippage protection)
	// * `share_fee_rate` - Fee rate for the share
	//
	Instruction_SellExactOut = ag_binary.TypeID([8]byte{95, 200, 71, 34, 8, 9, 11, 166})

	// Updates configuration parameters
	// # Arguments
	//
	// * `ctx` - The context of accounts
	// * `param` - Parameter to update:
	// - 0: Update trade_fee_rate
	// - 1: Update fee owner
	// * `value` - New value for the selected parameter
	//
	Instruction_UpdateConfig = ag_binary.TypeID([8]byte{29, 158, 252, 191, 10, 83, 219, 99})

	// Update platform config
	// # Arguments
	//
	// * `ctx` - The context of accounts
	// * `param` - Parameter to update
	//
	Instruction_UpdatePlatformConfig = ag_binary.TypeID([8]byte{195, 60, 76, 129, 146, 45, 67, 143})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_BuyExactIn:
		return "BuyExactIn"
	case Instruction_BuyExactOut:
		return "BuyExactOut"
	case Instruction_ClaimPlatformFee:
		return "ClaimPlatformFee"
	case Instruction_ClaimVestedToken:
		return "ClaimVestedToken"
	case Instruction_CollectFee:
		return "CollectFee"
	case Instruction_CollectMigrateFee:
		return "CollectMigrateFee"
	case Instruction_CreateConfig:
		return "CreateConfig"
	case Instruction_CreatePlatformConfig:
		return "CreatePlatformConfig"
	case Instruction_CreateVestingAccount:
		return "CreateVestingAccount"
	case Instruction_Initialize:
		return "Initialize"
	case Instruction_MigrateToAmm:
		return "MigrateToAmm"
	case Instruction_MigrateToCpswap:
		return "MigrateToCpswap"
	case Instruction_SellExactIn:
		return "SellExactIn"
	case Instruction_SellExactOut:
		return "SellExactOut"
	case Instruction_UpdateConfig:
		return "UpdateConfig"
	case Instruction_UpdatePlatformConfig:
		return "UpdatePlatformConfig"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			Name: "buy_exact_in", Type: (*BuyExactIn)(nil),
		},
		{
			Name: "buy_exact_out", Type: (*BuyExactOut)(nil),
		},
		{
			Name: "claim_platform_fee", Type: (*ClaimPlatformFee)(nil),
		},
		{
			Name: "claim_vested_token", Type: (*ClaimVestedToken)(nil),
		},
		{
			Name: "collect_fee", Type: (*CollectFee)(nil),
		},
		{
			Name: "collect_migrate_fee", Type: (*CollectMigrateFee)(nil),
		},
		{
			Name: "create_config", Type: (*CreateConfig)(nil),
		},
		{
			Name: "create_platform_config", Type: (*CreatePlatformConfig)(nil),
		},
		{
			Name: "create_vesting_account", Type: (*CreateVestingAccount)(nil),
		},
		{
			Name: "initialize", Type: (*Initialize)(nil),
		},
		{
			Name: "migrate_to_amm", Type: (*MigrateToAmm)(nil),
		},
		{
			Name: "migrate_to_cpswap", Type: (*MigrateToCpswap)(nil),
		},
		{
			Name: "sell_exact_in", Type: (*SellExactIn)(nil),
		},
		{
			Name: "sell_exact_out", Type: (*SellExactOut)(nil),
		},
		{
			Name: "update_config", Type: (*UpdateConfig)(nil),
		},
		{
			Name: "update_platform_config", Type: (*UpdatePlatformConfig)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := decodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func decodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}

func DecodeInstructions(message *ag_solanago.Message) (instructions []*Instruction, err error) {
	for _, ins := range message.Instructions {
		var programID ag_solanago.PublicKey
		if programID, err = message.Program(ins.ProgramIDIndex); err != nil {
			return
		}
		if !programID.Equals(ProgramID) {
			continue
		}
		var accounts []*ag_solanago.AccountMeta
		if accounts, err = ins.ResolveInstructionAccounts(message); err != nil {
			return
		}
		var insDecoded *Instruction
		if insDecoded, err = decodeInstruction(accounts, ins.Data); err != nil {
			return
		}
		instructions = append(instructions, insDecoded)
	}
	return
}
