// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"encoding/json"
	"errors"
	"fmt"
	ag_jsonrpc "github.com/gagliardetto/solana-go/rpc/jsonrpc"
)

var (
	_ *json.Encoder        = nil
	_ *ag_jsonrpc.RPCError = nil
	_ fmt.Formatter        = nil
	_                      = errors.ErrUnsupported
)
var (
	ErrNotApproved = &customErrorDef{
		code: 6000,
		msg:  "Not approved",
		name: "NotApproved",
	}
	ErrInvalidOwner = &customErrorDef{
		code: 6001,
		msg:  "Input account owner is not the program address",
		name: "InvalidOwner",
	}
	ErrInvalidInput = &customErrorDef{
		code: 6002,
		msg:  "InvalidInput",
		name: "InvalidInput",
	}
	ErrInputNotMatchCurveConfig = &customErrorDef{
		code: 6003,
		msg:  "The input params are not match with curve type in config",
		name: "InputNotMatchCurveConfig",
	}
	ErrExceededSlippage = &customErrorDef{
		code: 6004,
		msg:  "Exceeds desired slippage limit",
		name: "ExceededSlippage",
	}
	ErrPoolFunding = &customErrorDef{
		code: 6005,
		msg:  "Pool funding",
		name: "PoolFunding",
	}
	ErrPoolMigrated = &customErrorDef{
		code: 6006,
		msg:  "Pool migrated",
		name: "PoolMigrated",
	}
	ErrMigrateTypeNotMatch = &customErrorDef{
		code: 6007,
		msg:  "Migrate type not match",
		name: "MigrateTypeNotMatch",
	}
	ErrMathOverflow = &customErrorDef{
		code: 6008,
		msg:  "Math overflow",
		name: "MathOverflow",
	}
	ErrNoAssetsToCollect = &customErrorDef{
		code: 6009,
		msg:  "No assets to collect",
		name: "NoAssetsToCollect",
	}
	ErrVestingRatioTooHigh = &customErrorDef{
		code: 6010,
		msg:  "Vesting ratio too high",
		name: "VestingRatioTooHigh",
	}
	ErrVestingSettingEnded = &customErrorDef{
		code: 6011,
		msg:  "Vesting setting ended",
		name: "VestingSettingEnded",
	}
	ErrVestingNotStarted = &customErrorDef{
		code: 6012,
		msg:  "Vesting not started",
		name: "VestingNotStarted",
	}
	ErrNoVestingSchedule = &customErrorDef{
		code: 6013,
		msg:  "No vesting schedule",
		name: "NoVestingSchedule",
	}
	ErrInvalidPlatformInfo = &customErrorDef{
		code: 6014,
		msg:  "The platform info input is invalid",
		name: "InvalidPlatformInfo",
	}
	ErrPoolNotMigrated = &customErrorDef{
		code: 6015,
		msg:  "Pool not migrated",
		name: "PoolNotMigrated",
	}
	Errors = map[int]CustomError{
		6000: ErrNotApproved,
		6001: ErrInvalidOwner,
		6002: ErrInvalidInput,
		6003: ErrInputNotMatchCurveConfig,
		6004: ErrExceededSlippage,
		6005: ErrPoolFunding,
		6006: ErrPoolMigrated,
		6007: ErrMigrateTypeNotMatch,
		6008: ErrMathOverflow,
		6009: ErrNoAssetsToCollect,
		6010: ErrVestingRatioTooHigh,
		6011: ErrVestingSettingEnded,
		6012: ErrVestingNotStarted,
		6013: ErrNoVestingSchedule,
		6014: ErrInvalidPlatformInfo,
		6015: ErrPoolNotMigrated,
	}
)

type CustomError interface {
	Code() int
	Name() string
	Error() string
}

type customErrorDef struct {
	code int
	name string
	msg  string
}

func (e *customErrorDef) Code() int {
	return e.code
}

func (e *customErrorDef) Name() string {
	return e.name
}

func (e *customErrorDef) Error() string {
	return fmt.Sprintf("%s(%d): %s", e.name, e.code, e.msg)
}

func DecodeCustomError(rpcErr error) (err error, ok bool) {
	if errCode, o := decodeErrorCode(rpcErr); o {
		if customErr, o := Errors[errCode]; o {
			err = customErr
			ok = true
			return
		}
	}
	return
}

func decodeErrorCode(rpcErr error) (errorCode int, ok bool) {
	var jErr *ag_jsonrpc.RPCError
	if errors.As(rpcErr, &jErr) && jErr.Data != nil {
		if root, o := jErr.Data.(map[string]interface{}); o {
			if rootErr, o := root["err"].(map[string]interface{}); o {
				if rootErrInstructionError, o := rootErr["InstructionError"]; o {
					if rootErrInstructionErrorItems, o := rootErrInstructionError.([]interface{}); o {
						if len(rootErrInstructionErrorItems) == 2 {
							if v, o := rootErrInstructionErrorItems[1].(map[string]interface{}); o {
								if v2, o := v["Custom"].(json.Number); o {
									if code, err := v2.Int64(); err == nil {
										ok = true
										errorCode = int(code)
									}
								} else if v2, o := v["Custom"].(float64); o {
									ok = true
									errorCode = int(v2)
								}
							}
						}
					}
				}
			}
		}
	}
	return
}
