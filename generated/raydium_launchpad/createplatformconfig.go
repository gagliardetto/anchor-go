// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Create platform config account
// # Arguments
//
// * `ctx` - The context of accounts
// # Fields
// * `fee_rate` - Fee rate of the platform
// * `name` - Name of the platform
// * `web` - Website of the platform
// * `img` - Image link of the platform
//
type CreatePlatformConfig struct {
	PlatformParams *PlatformParams

	// [0] = [WRITE, SIGNER] platform_admin
	// ··········· The account paying for the initialization costs
	//
	// [1] = [] platform_fee_wallet
	//
	// [2] = [] platform_nft_wallet
	//
	// [3] = [WRITE] platform_config
	// ··········· The platform config account
	//
	// [4] = [] system_program
	// ··········· Required for account creation
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreatePlatformConfigInstructionBuilder creates a new `CreatePlatformConfig` instruction builder.
func NewCreatePlatformConfigInstructionBuilder() *CreatePlatformConfig {
	nd := &CreatePlatformConfig{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	nd.AccountMetaSlice[4] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	return nd
}

// SetPlatformParams sets the "platform_params" parameter.
func (inst *CreatePlatformConfig) SetPlatformParams(platform_params PlatformParams) *CreatePlatformConfig {
	inst.PlatformParams = &platform_params
	return inst
}

// SetPlatformAdminAccount sets the "platform_admin" account.
// The account paying for the initialization costs
func (inst *CreatePlatformConfig) SetPlatformAdminAccount(platformAdmin ag_solanago.PublicKey) *CreatePlatformConfig {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(platformAdmin).WRITE().SIGNER()
	return inst
}

// GetPlatformAdminAccount gets the "platform_admin" account.
// The account paying for the initialization costs
func (inst *CreatePlatformConfig) GetPlatformAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPlatformFeeWalletAccount sets the "platform_fee_wallet" account.
func (inst *CreatePlatformConfig) SetPlatformFeeWalletAccount(platformFeeWallet ag_solanago.PublicKey) *CreatePlatformConfig {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(platformFeeWallet)
	return inst
}

// GetPlatformFeeWalletAccount gets the "platform_fee_wallet" account.
func (inst *CreatePlatformConfig) GetPlatformFeeWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPlatformNftWalletAccount sets the "platform_nft_wallet" account.
func (inst *CreatePlatformConfig) SetPlatformNftWalletAccount(platformNftWallet ag_solanago.PublicKey) *CreatePlatformConfig {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(platformNftWallet)
	return inst
}

// GetPlatformNftWalletAccount gets the "platform_nft_wallet" account.
func (inst *CreatePlatformConfig) GetPlatformNftWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPlatformConfigAccount sets the "platform_config" account.
// The platform config account
func (inst *CreatePlatformConfig) SetPlatformConfigAccount(platformConfig ag_solanago.PublicKey) *CreatePlatformConfig {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(platformConfig).WRITE()
	return inst
}

func (inst *CreatePlatformConfig) findFindPlatformConfigAddress(platformAdmin ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: platform_config
	seeds = append(seeds, []byte{byte(0x70), byte(0x6c), byte(0x61), byte(0x74), byte(0x66), byte(0x6f), byte(0x72), byte(0x6d), byte(0x5f), byte(0x63), byte(0x6f), byte(0x6e), byte(0x66), byte(0x69), byte(0x67)})
	// path: platformAdmin
	seeds = append(seeds, platformAdmin.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindPlatformConfigAddressWithBumpSeed calculates PlatformConfig account address with given seeds and a known bump seed.
func (inst *CreatePlatformConfig) FindPlatformConfigAddressWithBumpSeed(platformAdmin ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindPlatformConfigAddress(platformAdmin, bumpSeed)
	return
}

func (inst *CreatePlatformConfig) MustFindPlatformConfigAddressWithBumpSeed(platformAdmin ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindPlatformConfigAddress(platformAdmin, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindPlatformConfigAddress finds PlatformConfig account address with given seeds.
func (inst *CreatePlatformConfig) FindPlatformConfigAddress(platformAdmin ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindPlatformConfigAddress(platformAdmin, 0)
	return
}

func (inst *CreatePlatformConfig) MustFindPlatformConfigAddress(platformAdmin ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindPlatformConfigAddress(platformAdmin, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetPlatformConfigAccount gets the "platform_config" account.
// The platform config account
func (inst *CreatePlatformConfig) GetPlatformConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "system_program" account.
// Required for account creation
func (inst *CreatePlatformConfig) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreatePlatformConfig {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
// Required for account creation
func (inst *CreatePlatformConfig) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst CreatePlatformConfig) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreatePlatformConfig,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreatePlatformConfig) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreatePlatformConfig) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.PlatformParams == nil {
			return errors.New("PlatformParams parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.PlatformAdmin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PlatformFeeWallet is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PlatformNftWallet is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PlatformConfig is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreatePlatformConfig) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreatePlatformConfig")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" PlatformParams", *inst.PlatformParams))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     platform_admin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("platform_fee_wallet", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("platform_nft_wallet", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    platform_config", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("     system_program", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj CreatePlatformConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PlatformParams` param:
	err = encoder.Encode(obj.PlatformParams)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreatePlatformConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PlatformParams`:
	err = decoder.Decode(&obj.PlatformParams)
	if err != nil {
		return err
	}
	return nil
}

// NewCreatePlatformConfigInstruction declares a new CreatePlatformConfig instruction with the provided parameters and accounts.
func NewCreatePlatformConfigInstruction(
	// Parameters:
	platform_params PlatformParams,
	// Accounts:
	platformAdmin ag_solanago.PublicKey,
	platformFeeWallet ag_solanago.PublicKey,
	platformNftWallet ag_solanago.PublicKey,
	platformConfig ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreatePlatformConfig {
	return NewCreatePlatformConfigInstructionBuilder().
		SetPlatformParams(platform_params).
		SetPlatformAdminAccount(platformAdmin).
		SetPlatformFeeWalletAccount(platformFeeWallet).
		SetPlatformNftWalletAccount(platformNftWallet).
		SetPlatformConfigAccount(platformConfig).
		SetSystemProgramAccount(systemProgram)
}
