// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Collects accumulated fees from the pool
// # Arguments
//
// * `ctx` - The context of accounts
//
type CollectFee struct {

	// [0] = [SIGNER] owner
	// ··········· Only protocol_fee_owner saved in global_config can collect protocol fee now
	//
	// [1] = [] authority
	//
	// [2] = [WRITE] pool_state
	// ··········· Pool state stores accumulated protocol fee amount
	//
	// [3] = [] global_config
	// ··········· Global config account stores owner
	//
	// [4] = [WRITE] quote_vault
	// ··········· The address that holds pool tokens for quote token
	//
	// [5] = [] quote_mint
	// ··········· The mint of quote token vault
	//
	// [6] = [WRITE] recipient_token_account
	// ··········· The address that receives the collected quote token fees
	//
	// [7] = [] token_program
	// ··········· SPL program for input token transfers
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCollectFeeInstructionBuilder creates a new `CollectFee` instruction builder.
func NewCollectFeeInstructionBuilder() *CollectFee {
	nd := &CollectFee{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	nd.AccountMetaSlice[7] = ag_solanago.Meta(Addresses["TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"])
	return nd
}

// SetOwnerAccount sets the "owner" account.
// Only protocol_fee_owner saved in global_config can collect protocol fee now
func (inst *CollectFee) SetOwnerAccount(owner ag_solanago.PublicKey) *CollectFee {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
// Only protocol_fee_owner saved in global_config can collect protocol fee now
func (inst *CollectFee) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *CollectFee) SetAuthorityAccount(authority ag_solanago.PublicKey) *CollectFee {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority)
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *CollectFee) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPoolStateAccount sets the "pool_state" account.
// Pool state stores accumulated protocol fee amount
func (inst *CollectFee) SetPoolStateAccount(poolState ag_solanago.PublicKey) *CollectFee {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(poolState).WRITE()
	return inst
}

// GetPoolStateAccount gets the "pool_state" account.
// Pool state stores accumulated protocol fee amount
func (inst *CollectFee) GetPoolStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetGlobalConfigAccount sets the "global_config" account.
// Global config account stores owner
func (inst *CollectFee) SetGlobalConfigAccount(globalConfig ag_solanago.PublicKey) *CollectFee {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(globalConfig)
	return inst
}

// GetGlobalConfigAccount gets the "global_config" account.
// Global config account stores owner
func (inst *CollectFee) GetGlobalConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetQuoteVaultAccount sets the "quote_vault" account.
// The address that holds pool tokens for quote token
func (inst *CollectFee) SetQuoteVaultAccount(quoteVault ag_solanago.PublicKey) *CollectFee {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(quoteVault).WRITE()
	return inst
}

// GetQuoteVaultAccount gets the "quote_vault" account.
// The address that holds pool tokens for quote token
func (inst *CollectFee) GetQuoteVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetQuoteMintAccount sets the "quote_mint" account.
// The mint of quote token vault
func (inst *CollectFee) SetQuoteMintAccount(quoteMint ag_solanago.PublicKey) *CollectFee {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(quoteMint)
	return inst
}

// GetQuoteMintAccount gets the "quote_mint" account.
// The mint of quote token vault
func (inst *CollectFee) GetQuoteMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetRecipientTokenAccountAccount sets the "recipient_token_account" account.
// The address that receives the collected quote token fees
func (inst *CollectFee) SetRecipientTokenAccountAccount(recipientTokenAccount ag_solanago.PublicKey) *CollectFee {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(recipientTokenAccount).WRITE()
	return inst
}

// GetRecipientTokenAccountAccount gets the "recipient_token_account" account.
// The address that receives the collected quote token fees
func (inst *CollectFee) GetRecipientTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenProgramAccount sets the "token_program" account.
// SPL program for input token transfers
func (inst *CollectFee) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CollectFee {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
// SPL program for input token transfers
func (inst *CollectFee) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst CollectFee) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CollectFee,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CollectFee) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CollectFee) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PoolState is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.GlobalConfig is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.QuoteVault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.QuoteMint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.RecipientTokenAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *CollectFee) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CollectFee")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           owner", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      pool_state", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   global_config", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("     quote_vault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("      quote_mint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("recipient_token_", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("   token_program", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj CollectFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CollectFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCollectFeeInstruction declares a new CollectFee instruction with the provided parameters and accounts.
func NewCollectFeeInstruction(
	// Accounts:
	owner ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	globalConfig ag_solanago.PublicKey,
	quoteVault ag_solanago.PublicKey,
	quoteMint ag_solanago.PublicKey,
	recipientTokenAccount ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *CollectFee {
	return NewCollectFeeInstructionBuilder().
		SetOwnerAccount(owner).
		SetAuthorityAccount(authority).
		SetPoolStateAccount(poolState).
		SetGlobalConfigAccount(globalConfig).
		SetQuoteVaultAccount(quoteVault).
		SetQuoteMintAccount(quoteMint).
		SetRecipientTokenAccountAccount(recipientTokenAccount).
		SetTokenProgramAccount(tokenProgram)
}
