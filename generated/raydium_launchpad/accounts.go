// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type GlobalConfigAccount struct {
	// Account update epoch
	Epoch uint64

	// 0: Constant Product Curve
	// 1: Fixed Price Curve
	// 2: Linear Price Curve
	CurveType uint8

	// Config index
	Index uint16

	// The fee of migrate to amm
	MigrateFee uint64

	// The trade fee rate, denominated in hundredths of a bip (10^-6)
	TradeFeeRate uint64

	// The maximum share fee rate, denominated in hundredths of a bip (10^-6)
	MaxShareFeeRate uint64

	// The minimum base supply, the value without decimals
	MinBaseSupply uint64

	// The maximum lock rate, denominated in hundredths of a bip (10^-6)
	MaxLockRate uint64

	// The minimum base sell rate, denominated in hundredths of a bip (10^-6)
	MinBaseSellRate uint64

	// The minimum base migrate rate, denominated in hundredths of a bip (10^-6)
	MinBaseMigrateRate uint64

	// The minimum quote fund raising, the value with decimals
	MinQuoteFundRaising uint64

	// Mint information for quote token
	QuoteMint ag_solanago.PublicKey

	// Protocol Fee owner
	ProtocolFeeOwner ag_solanago.PublicKey

	// Migrate Fee owner
	MigrateFeeOwner ag_solanago.PublicKey

	// Migrate to amm control wallet
	MigrateToAmmWallet ag_solanago.PublicKey

	// Migrate to cpswap wallet
	MigrateToCpswapWallet ag_solanago.PublicKey

	// padding for future updates
	Padding [16]uint64
}

var GlobalConfigAccountDiscriminator = [8]byte{149, 8, 156, 202, 160, 252, 176, 217}

func (obj GlobalConfigAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(GlobalConfigAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Epoch` param:
	err = encoder.Encode(obj.Epoch)
	if err != nil {
		return err
	}
	// Serialize `CurveType` param:
	err = encoder.Encode(obj.CurveType)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `MigrateFee` param:
	err = encoder.Encode(obj.MigrateFee)
	if err != nil {
		return err
	}
	// Serialize `TradeFeeRate` param:
	err = encoder.Encode(obj.TradeFeeRate)
	if err != nil {
		return err
	}
	// Serialize `MaxShareFeeRate` param:
	err = encoder.Encode(obj.MaxShareFeeRate)
	if err != nil {
		return err
	}
	// Serialize `MinBaseSupply` param:
	err = encoder.Encode(obj.MinBaseSupply)
	if err != nil {
		return err
	}
	// Serialize `MaxLockRate` param:
	err = encoder.Encode(obj.MaxLockRate)
	if err != nil {
		return err
	}
	// Serialize `MinBaseSellRate` param:
	err = encoder.Encode(obj.MinBaseSellRate)
	if err != nil {
		return err
	}
	// Serialize `MinBaseMigrateRate` param:
	err = encoder.Encode(obj.MinBaseMigrateRate)
	if err != nil {
		return err
	}
	// Serialize `MinQuoteFundRaising` param:
	err = encoder.Encode(obj.MinQuoteFundRaising)
	if err != nil {
		return err
	}
	// Serialize `QuoteMint` param:
	err = encoder.Encode(obj.QuoteMint)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeOwner` param:
	err = encoder.Encode(obj.ProtocolFeeOwner)
	if err != nil {
		return err
	}
	// Serialize `MigrateFeeOwner` param:
	err = encoder.Encode(obj.MigrateFeeOwner)
	if err != nil {
		return err
	}
	// Serialize `MigrateToAmmWallet` param:
	err = encoder.Encode(obj.MigrateToAmmWallet)
	if err != nil {
		return err
	}
	// Serialize `MigrateToCpswapWallet` param:
	err = encoder.Encode(obj.MigrateToCpswapWallet)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *GlobalConfigAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(GlobalConfigAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[149 8 156 202 160 252 176 217]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Epoch`:
	err = decoder.Decode(&obj.Epoch)
	if err != nil {
		return err
	}
	// Deserialize `CurveType`:
	err = decoder.Decode(&obj.CurveType)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `MigrateFee`:
	err = decoder.Decode(&obj.MigrateFee)
	if err != nil {
		return err
	}
	// Deserialize `TradeFeeRate`:
	err = decoder.Decode(&obj.TradeFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `MaxShareFeeRate`:
	err = decoder.Decode(&obj.MaxShareFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `MinBaseSupply`:
	err = decoder.Decode(&obj.MinBaseSupply)
	if err != nil {
		return err
	}
	// Deserialize `MaxLockRate`:
	err = decoder.Decode(&obj.MaxLockRate)
	if err != nil {
		return err
	}
	// Deserialize `MinBaseSellRate`:
	err = decoder.Decode(&obj.MinBaseSellRate)
	if err != nil {
		return err
	}
	// Deserialize `MinBaseMigrateRate`:
	err = decoder.Decode(&obj.MinBaseMigrateRate)
	if err != nil {
		return err
	}
	// Deserialize `MinQuoteFundRaising`:
	err = decoder.Decode(&obj.MinQuoteFundRaising)
	if err != nil {
		return err
	}
	// Deserialize `QuoteMint`:
	err = decoder.Decode(&obj.QuoteMint)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeOwner`:
	err = decoder.Decode(&obj.ProtocolFeeOwner)
	if err != nil {
		return err
	}
	// Deserialize `MigrateFeeOwner`:
	err = decoder.Decode(&obj.MigrateFeeOwner)
	if err != nil {
		return err
	}
	// Deserialize `MigrateToAmmWallet`:
	err = decoder.Decode(&obj.MigrateToAmmWallet)
	if err != nil {
		return err
	}
	// Deserialize `MigrateToCpswapWallet`:
	err = decoder.Decode(&obj.MigrateToCpswapWallet)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type PlatformConfigAccount struct {
	// The epoch for update interval
	Epoch uint64

	// The platform fee wallet
	PlatformFeeWallet ag_solanago.PublicKey

	// The platform nft wallet to receive the platform NFT after migration if platform_scale is not 0(Only support MigrateType::CPSWAP)
	PlatformNftWallet ag_solanago.PublicKey

	// Scale of the platform liquidity quantity rights will be converted into NFT(Only support MigrateType::CPSWAP)
	PlatformScale uint64

	// Scale of the token creator liquidity quantity rights will be converted into NFT(Only support MigrateType::CPSWAP)
	CreatorScale uint64

	// Scale of liquidity directly to burn
	BurnScale uint64

	// The platform fee rate
	FeeRate uint64

	// The platform name
	Name [64]uint8

	// The platform website
	Web [256]uint8

	// The platform img link
	Img [256]uint8

	// padding for future updates
	Padding [256]uint8
}

var PlatformConfigAccountDiscriminator = [8]byte{160, 78, 128, 0, 248, 83, 230, 160}

func (obj PlatformConfigAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PlatformConfigAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Epoch` param:
	err = encoder.Encode(obj.Epoch)
	if err != nil {
		return err
	}
	// Serialize `PlatformFeeWallet` param:
	err = encoder.Encode(obj.PlatformFeeWallet)
	if err != nil {
		return err
	}
	// Serialize `PlatformNftWallet` param:
	err = encoder.Encode(obj.PlatformNftWallet)
	if err != nil {
		return err
	}
	// Serialize `PlatformScale` param:
	err = encoder.Encode(obj.PlatformScale)
	if err != nil {
		return err
	}
	// Serialize `CreatorScale` param:
	err = encoder.Encode(obj.CreatorScale)
	if err != nil {
		return err
	}
	// Serialize `BurnScale` param:
	err = encoder.Encode(obj.BurnScale)
	if err != nil {
		return err
	}
	// Serialize `FeeRate` param:
	err = encoder.Encode(obj.FeeRate)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Web` param:
	err = encoder.Encode(obj.Web)
	if err != nil {
		return err
	}
	// Serialize `Img` param:
	err = encoder.Encode(obj.Img)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PlatformConfigAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PlatformConfigAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[160 78 128 0 248 83 230 160]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Epoch`:
	err = decoder.Decode(&obj.Epoch)
	if err != nil {
		return err
	}
	// Deserialize `PlatformFeeWallet`:
	err = decoder.Decode(&obj.PlatformFeeWallet)
	if err != nil {
		return err
	}
	// Deserialize `PlatformNftWallet`:
	err = decoder.Decode(&obj.PlatformNftWallet)
	if err != nil {
		return err
	}
	// Deserialize `PlatformScale`:
	err = decoder.Decode(&obj.PlatformScale)
	if err != nil {
		return err
	}
	// Deserialize `CreatorScale`:
	err = decoder.Decode(&obj.CreatorScale)
	if err != nil {
		return err
	}
	// Deserialize `BurnScale`:
	err = decoder.Decode(&obj.BurnScale)
	if err != nil {
		return err
	}
	// Deserialize `FeeRate`:
	err = decoder.Decode(&obj.FeeRate)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Web`:
	err = decoder.Decode(&obj.Web)
	if err != nil {
		return err
	}
	// Deserialize `Img`:
	err = decoder.Decode(&obj.Img)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type PoolStateAccount struct {
	// Account update epoch
	Epoch uint64

	// Bump seed used for PDA address derivation
	AuthBump uint8

	// Current status of the pool
	// * 0: Pool is funding
	// * 1: Pool funding is end, waiting for migration
	// * 2: Pool migration is done
	Status uint8

	// Decimals of the pool base token
	BaseDecimals uint8

	// Decimals of the pool quote token
	QuoteDecimals uint8

	// Migrate to AMM or CpSwap
	MigrateType uint8

	// Supply of the pool base token
	Supply uint64

	// Total sell amount of the base token
	TotalBaseSell uint64

	// For different curves, virtual_base and virtual_quote have different meanings
	// For constant product curve, virtual_base and virtual_quote are virtual liquidity, virtual_quote/virtual_base is the initial price
	// For linear price curve, virtual_base is the price slope parameter a, virtual_quote has no effect
	// For fixed price curve, virtual_quote/virtual_base is the initial price
	VirtualBase  uint64
	VirtualQuote uint64

	// Actual base token amount in the pool
	// Represents the real tokens available for trading
	RealBase uint64

	// Actual quote token amount in the pool
	// Represents the real tokens available for trading
	RealQuote uint64

	// The total quote fund raising of the pool
	TotalQuoteFundRaising uint64

	// Accumulated trading fees in quote tokens
	// Can be collected by the protocol fee owner
	QuoteProtocolFee uint64

	// Accumulated platform fees in quote tokens
	// Can be collected by the platform wallet stored in platform config
	PlatformFee uint64

	// The fee of migrate to amm
	MigrateFee uint64

	// Vesting schedule for the base token
	VestingSchedule VestingSchedule

	// Public key of the global configuration account
	// Contains protocol-wide settings this pool adheres to
	GlobalConfig ag_solanago.PublicKey

	// Public key of the platform configuration account
	// Contains platform-wide settings this pool adheres to
	PlatformConfig ag_solanago.PublicKey

	// Public key of the base mint address
	BaseMint ag_solanago.PublicKey

	// Public key of the quote mint address
	QuoteMint ag_solanago.PublicKey

	// Public key of the base token vault
	// Holds the actual base tokens owned by the pool
	BaseVault ag_solanago.PublicKey

	// Public key of the quote token vault
	// Holds the actual quote tokens owned by the pool
	QuoteVault ag_solanago.PublicKey

	// The creator of base token
	Creator ag_solanago.PublicKey

	// padding for future updates
	Padding [8]uint64
}

var PoolStateAccountDiscriminator = [8]byte{247, 237, 227, 245, 215, 195, 222, 70}

func (obj PoolStateAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PoolStateAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Epoch` param:
	err = encoder.Encode(obj.Epoch)
	if err != nil {
		return err
	}
	// Serialize `AuthBump` param:
	err = encoder.Encode(obj.AuthBump)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `BaseDecimals` param:
	err = encoder.Encode(obj.BaseDecimals)
	if err != nil {
		return err
	}
	// Serialize `QuoteDecimals` param:
	err = encoder.Encode(obj.QuoteDecimals)
	if err != nil {
		return err
	}
	// Serialize `MigrateType` param:
	err = encoder.Encode(obj.MigrateType)
	if err != nil {
		return err
	}
	// Serialize `Supply` param:
	err = encoder.Encode(obj.Supply)
	if err != nil {
		return err
	}
	// Serialize `TotalBaseSell` param:
	err = encoder.Encode(obj.TotalBaseSell)
	if err != nil {
		return err
	}
	// Serialize `VirtualBase` param:
	err = encoder.Encode(obj.VirtualBase)
	if err != nil {
		return err
	}
	// Serialize `VirtualQuote` param:
	err = encoder.Encode(obj.VirtualQuote)
	if err != nil {
		return err
	}
	// Serialize `RealBase` param:
	err = encoder.Encode(obj.RealBase)
	if err != nil {
		return err
	}
	// Serialize `RealQuote` param:
	err = encoder.Encode(obj.RealQuote)
	if err != nil {
		return err
	}
	// Serialize `TotalQuoteFundRaising` param:
	err = encoder.Encode(obj.TotalQuoteFundRaising)
	if err != nil {
		return err
	}
	// Serialize `QuoteProtocolFee` param:
	err = encoder.Encode(obj.QuoteProtocolFee)
	if err != nil {
		return err
	}
	// Serialize `PlatformFee` param:
	err = encoder.Encode(obj.PlatformFee)
	if err != nil {
		return err
	}
	// Serialize `MigrateFee` param:
	err = encoder.Encode(obj.MigrateFee)
	if err != nil {
		return err
	}
	// Serialize `VestingSchedule` param:
	err = encoder.Encode(obj.VestingSchedule)
	if err != nil {
		return err
	}
	// Serialize `GlobalConfig` param:
	err = encoder.Encode(obj.GlobalConfig)
	if err != nil {
		return err
	}
	// Serialize `PlatformConfig` param:
	err = encoder.Encode(obj.PlatformConfig)
	if err != nil {
		return err
	}
	// Serialize `BaseMint` param:
	err = encoder.Encode(obj.BaseMint)
	if err != nil {
		return err
	}
	// Serialize `QuoteMint` param:
	err = encoder.Encode(obj.QuoteMint)
	if err != nil {
		return err
	}
	// Serialize `BaseVault` param:
	err = encoder.Encode(obj.BaseVault)
	if err != nil {
		return err
	}
	// Serialize `QuoteVault` param:
	err = encoder.Encode(obj.QuoteVault)
	if err != nil {
		return err
	}
	// Serialize `Creator` param:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolStateAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PoolStateAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[247 237 227 245 215 195 222 70]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Epoch`:
	err = decoder.Decode(&obj.Epoch)
	if err != nil {
		return err
	}
	// Deserialize `AuthBump`:
	err = decoder.Decode(&obj.AuthBump)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `BaseDecimals`:
	err = decoder.Decode(&obj.BaseDecimals)
	if err != nil {
		return err
	}
	// Deserialize `QuoteDecimals`:
	err = decoder.Decode(&obj.QuoteDecimals)
	if err != nil {
		return err
	}
	// Deserialize `MigrateType`:
	err = decoder.Decode(&obj.MigrateType)
	if err != nil {
		return err
	}
	// Deserialize `Supply`:
	err = decoder.Decode(&obj.Supply)
	if err != nil {
		return err
	}
	// Deserialize `TotalBaseSell`:
	err = decoder.Decode(&obj.TotalBaseSell)
	if err != nil {
		return err
	}
	// Deserialize `VirtualBase`:
	err = decoder.Decode(&obj.VirtualBase)
	if err != nil {
		return err
	}
	// Deserialize `VirtualQuote`:
	err = decoder.Decode(&obj.VirtualQuote)
	if err != nil {
		return err
	}
	// Deserialize `RealBase`:
	err = decoder.Decode(&obj.RealBase)
	if err != nil {
		return err
	}
	// Deserialize `RealQuote`:
	err = decoder.Decode(&obj.RealQuote)
	if err != nil {
		return err
	}
	// Deserialize `TotalQuoteFundRaising`:
	err = decoder.Decode(&obj.TotalQuoteFundRaising)
	if err != nil {
		return err
	}
	// Deserialize `QuoteProtocolFee`:
	err = decoder.Decode(&obj.QuoteProtocolFee)
	if err != nil {
		return err
	}
	// Deserialize `PlatformFee`:
	err = decoder.Decode(&obj.PlatformFee)
	if err != nil {
		return err
	}
	// Deserialize `MigrateFee`:
	err = decoder.Decode(&obj.MigrateFee)
	if err != nil {
		return err
	}
	// Deserialize `VestingSchedule`:
	err = decoder.Decode(&obj.VestingSchedule)
	if err != nil {
		return err
	}
	// Deserialize `GlobalConfig`:
	err = decoder.Decode(&obj.GlobalConfig)
	if err != nil {
		return err
	}
	// Deserialize `PlatformConfig`:
	err = decoder.Decode(&obj.PlatformConfig)
	if err != nil {
		return err
	}
	// Deserialize `BaseMint`:
	err = decoder.Decode(&obj.BaseMint)
	if err != nil {
		return err
	}
	// Deserialize `QuoteMint`:
	err = decoder.Decode(&obj.QuoteMint)
	if err != nil {
		return err
	}
	// Deserialize `BaseVault`:
	err = decoder.Decode(&obj.BaseVault)
	if err != nil {
		return err
	}
	// Deserialize `QuoteVault`:
	err = decoder.Decode(&obj.QuoteVault)
	if err != nil {
		return err
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type VestingRecordAccount struct {
	// Account update epoch
	Epoch uint64

	// The pool state account
	Pool ag_solanago.PublicKey

	// The beneficiary of the vesting account
	Beneficiary ag_solanago.PublicKey

	// The amount of tokens claimed
	ClaimedAmount uint64

	// The share amount of the token to be vested
	TokenShareAmount uint64

	// padding for future updates
	Padding [8]uint64
}

var VestingRecordAccountDiscriminator = [8]byte{106, 243, 221, 205, 230, 126, 85, 83}

func (obj VestingRecordAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(VestingRecordAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Epoch` param:
	err = encoder.Encode(obj.Epoch)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Beneficiary` param:
	err = encoder.Encode(obj.Beneficiary)
	if err != nil {
		return err
	}
	// Serialize `ClaimedAmount` param:
	err = encoder.Encode(obj.ClaimedAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenShareAmount` param:
	err = encoder.Encode(obj.TokenShareAmount)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VestingRecordAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(VestingRecordAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[106 243 221 205 230 126 85 83]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Epoch`:
	err = decoder.Decode(&obj.Epoch)
	if err != nil {
		return err
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Beneficiary`:
	err = decoder.Decode(&obj.Beneficiary)
	if err != nil {
		return err
	}
	// Deserialize `ClaimedAmount`:
	err = decoder.Decode(&obj.ClaimedAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenShareAmount`:
	err = decoder.Decode(&obj.TokenShareAmount)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}
