// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Initializes a new trading pool
// # Arguments
//
// * `ctx` - The context of accounts containing pool and token information
//
type Initialize struct {
	BaseMintParam *MintParams
	CurveParam    *CurveParams
	VestingParam  *VestingParams

	// [0] = [WRITE, SIGNER] payer
	// ··········· The account paying for the initialization costs
	// ··········· This can be any account with sufficient SOL to cover the transaction
	//
	// [1] = [] creator
	//
	// [2] = [] global_config
	// ··········· Global configuration account containing protocol-wide settings
	// ··········· Includes settings like quote token mint and fee parameters
	//
	// [3] = [] platform_config
	// ··········· Platform configuration account containing platform info
	// ··········· Includes settings like the fee_rate, name, web, img of the platform
	//
	// [4] = [] authority
	// ··········· PDA that acts as the authority for pool vault and mint operations
	// ··········· Generated using AUTH_SEED
	//
	// [5] = [WRITE] pool_state
	// ··········· Account that stores the pool's state and parameters
	// ··········· PDA generated using POOL_SEED and both token mints
	//
	// [6] = [WRITE, SIGNER] base_mint
	// ··········· The mint for the base token (token being sold)
	// ··········· Created in this instruction with specified decimals
	//
	// [7] = [] quote_mint
	// ··········· The mint for the quote token (token used to buy)
	// ··········· Must match the quote_mint specified in global config
	//
	// [8] = [WRITE] base_vault
	// ··········· Token account that holds the pool's base tokens
	// ··········· PDA generated using POOL_VAULT_SEED
	//
	// [9] = [WRITE] quote_vault
	// ··········· Token account that holds the pool's quote tokens
	// ··········· PDA generated using POOL_VAULT_SEED
	//
	// [10] = [WRITE] metadata_account
	// ··········· Account to store the base token's metadata
	// ··········· Created using Metaplex metadata program
	//
	// [11] = [] base_token_program
	// ··········· SPL Token program for the base token
	// ··········· Must be the standard Token program
	//
	// [12] = [] quote_token_program
	// ··········· SPL Token program for the quote token
	//
	// [13] = [] metadata_program
	// ··········· Metaplex Token Metadata program
	// ··········· Used to create metadata for the base token
	//
	// [14] = [] system_program
	// ··········· Required for account creation
	//
	// [15] = [] rent_program
	// ··········· Required for rent exempt calculations
	//
	// [16] = [] event_authority
	//
	// [17] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeInstructionBuilder creates a new `Initialize` instruction builder.
func NewInitializeInstructionBuilder() *Initialize {
	nd := &Initialize{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 18),
	}
	nd.AccountMetaSlice[11] = ag_solanago.Meta(Addresses["TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"])
	nd.AccountMetaSlice[12] = ag_solanago.Meta(Addresses["TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"])
	nd.AccountMetaSlice[13] = ag_solanago.Meta(Addresses["metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"])
	nd.AccountMetaSlice[14] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	nd.AccountMetaSlice[15] = ag_solanago.Meta(Addresses["SysvarRent111111111111111111111111111111111"])
	return nd
}

// SetBaseMintParam sets the "base_mint_param" parameter.
func (inst *Initialize) SetBaseMintParam(base_mint_param MintParams) *Initialize {
	inst.BaseMintParam = &base_mint_param
	return inst
}

// SetCurveParam sets the "curve_param" parameter.
func (inst *Initialize) SetCurveParam(curve_param CurveParams) *Initialize {
	inst.CurveParam = &curve_param
	return inst
}

// SetVestingParam sets the "vesting_param" parameter.
func (inst *Initialize) SetVestingParam(vesting_param VestingParams) *Initialize {
	inst.VestingParam = &vesting_param
	return inst
}

// SetPayerAccount sets the "payer" account.
// The account paying for the initialization costs
// This can be any account with sufficient SOL to cover the transaction
func (inst *Initialize) SetPayerAccount(payer ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// The account paying for the initialization costs
// This can be any account with sufficient SOL to cover the transaction
func (inst *Initialize) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetCreatorAccount sets the "creator" account.
func (inst *Initialize) SetCreatorAccount(creator ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(creator)
	return inst
}

// GetCreatorAccount gets the "creator" account.
func (inst *Initialize) GetCreatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetGlobalConfigAccount sets the "global_config" account.
// Global configuration account containing protocol-wide settings
// Includes settings like quote token mint and fee parameters
func (inst *Initialize) SetGlobalConfigAccount(globalConfig ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(globalConfig)
	return inst
}

// GetGlobalConfigAccount gets the "global_config" account.
// Global configuration account containing protocol-wide settings
// Includes settings like quote token mint and fee parameters
func (inst *Initialize) GetGlobalConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPlatformConfigAccount sets the "platform_config" account.
// Platform configuration account containing platform info
// Includes settings like the fee_rate, name, web, img of the platform
func (inst *Initialize) SetPlatformConfigAccount(platformConfig ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(platformConfig)
	return inst
}

// GetPlatformConfigAccount gets the "platform_config" account.
// Platform configuration account containing platform info
// Includes settings like the fee_rate, name, web, img of the platform
func (inst *Initialize) GetPlatformConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAuthorityAccount sets the "authority" account.
// PDA that acts as the authority for pool vault and mint operations
// Generated using AUTH_SEED
func (inst *Initialize) SetAuthorityAccount(authority ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(authority)
	return inst
}

// GetAuthorityAccount gets the "authority" account.
// PDA that acts as the authority for pool vault and mint operations
// Generated using AUTH_SEED
func (inst *Initialize) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPoolStateAccount sets the "pool_state" account.
// Account that stores the pool's state and parameters
// PDA generated using POOL_SEED and both token mints
func (inst *Initialize) SetPoolStateAccount(poolState ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(poolState).WRITE()
	return inst
}

// GetPoolStateAccount gets the "pool_state" account.
// Account that stores the pool's state and parameters
// PDA generated using POOL_SEED and both token mints
func (inst *Initialize) GetPoolStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetBaseMintAccount sets the "base_mint" account.
// The mint for the base token (token being sold)
// Created in this instruction with specified decimals
func (inst *Initialize) SetBaseMintAccount(baseMint ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(baseMint).WRITE().SIGNER()
	return inst
}

// GetBaseMintAccount gets the "base_mint" account.
// The mint for the base token (token being sold)
// Created in this instruction with specified decimals
func (inst *Initialize) GetBaseMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetQuoteMintAccount sets the "quote_mint" account.
// The mint for the quote token (token used to buy)
// Must match the quote_mint specified in global config
func (inst *Initialize) SetQuoteMintAccount(quoteMint ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(quoteMint)
	return inst
}

// GetQuoteMintAccount gets the "quote_mint" account.
// The mint for the quote token (token used to buy)
// Must match the quote_mint specified in global config
func (inst *Initialize) GetQuoteMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetBaseVaultAccount sets the "base_vault" account.
// Token account that holds the pool's base tokens
// PDA generated using POOL_VAULT_SEED
func (inst *Initialize) SetBaseVaultAccount(baseVault ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(baseVault).WRITE()
	return inst
}

// GetBaseVaultAccount gets the "base_vault" account.
// Token account that holds the pool's base tokens
// PDA generated using POOL_VAULT_SEED
func (inst *Initialize) GetBaseVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetQuoteVaultAccount sets the "quote_vault" account.
// Token account that holds the pool's quote tokens
// PDA generated using POOL_VAULT_SEED
func (inst *Initialize) SetQuoteVaultAccount(quoteVault ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(quoteVault).WRITE()
	return inst
}

// GetQuoteVaultAccount gets the "quote_vault" account.
// Token account that holds the pool's quote tokens
// PDA generated using POOL_VAULT_SEED
func (inst *Initialize) GetQuoteVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetMetadataAccountAccount sets the "metadata_account" account.
// Account to store the base token's metadata
// Created using Metaplex metadata program
func (inst *Initialize) SetMetadataAccountAccount(metadataAccount ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(metadataAccount).WRITE()
	return inst
}

// GetMetadataAccountAccount gets the "metadata_account" account.
// Account to store the base token's metadata
// Created using Metaplex metadata program
func (inst *Initialize) GetMetadataAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetBaseTokenProgramAccount sets the "base_token_program" account.
// SPL Token program for the base token
// Must be the standard Token program
func (inst *Initialize) SetBaseTokenProgramAccount(baseTokenProgram ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(baseTokenProgram)
	return inst
}

// GetBaseTokenProgramAccount gets the "base_token_program" account.
// SPL Token program for the base token
// Must be the standard Token program
func (inst *Initialize) GetBaseTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetQuoteTokenProgramAccount sets the "quote_token_program" account.
// SPL Token program for the quote token
func (inst *Initialize) SetQuoteTokenProgramAccount(quoteTokenProgram ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(quoteTokenProgram)
	return inst
}

// GetQuoteTokenProgramAccount gets the "quote_token_program" account.
// SPL Token program for the quote token
func (inst *Initialize) GetQuoteTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetMetadataProgramAccount sets the "metadata_program" account.
// Metaplex Token Metadata program
// Used to create metadata for the base token
func (inst *Initialize) SetMetadataProgramAccount(metadataProgram ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(metadataProgram)
	return inst
}

// GetMetadataProgramAccount gets the "metadata_program" account.
// Metaplex Token Metadata program
// Used to create metadata for the base token
func (inst *Initialize) GetMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetSystemProgramAccount sets the "system_program" account.
// Required for account creation
func (inst *Initialize) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
// Required for account creation
func (inst *Initialize) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetRentProgramAccount sets the "rent_program" account.
// Required for rent exempt calculations
func (inst *Initialize) SetRentProgramAccount(rentProgram ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(rentProgram)
	return inst
}

// GetRentProgramAccount gets the "rent_program" account.
// Required for rent exempt calculations
func (inst *Initialize) GetRentProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *Initialize) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *Initialize) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetProgramAccount sets the "program" account.
func (inst *Initialize) SetProgramAccount(program ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *Initialize) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

func (inst Initialize) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Initialize,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Initialize) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Initialize) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.BaseMintParam == nil {
			return errors.New("BaseMintParam parameter is not set")
		}
		if inst.CurveParam == nil {
			return errors.New("CurveParam parameter is not set")
		}
		if inst.VestingParam == nil {
			return errors.New("VestingParam parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Creator is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.GlobalConfig is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PlatformConfig is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.PoolState is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.BaseMint is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.QuoteMint is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.BaseVault is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.QuoteVault is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.MetadataAccount is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.BaseTokenProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.QuoteTokenProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.MetadataProgram is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.RentProgram is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *Initialize) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Initialize")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  BaseMintParam", *inst.BaseMintParam))
						paramsBranch.Child(ag_format.Param("     CurveParam", inst.CurveParam))
						paramsBranch.Child(ag_format.Param("   VestingParam", *inst.VestingParam))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=18]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("              payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("            creator", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      global_config", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    platform_config", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("          authority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         pool_state", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("          base_mint", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("         quote_mint", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("         base_vault", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("        quote_vault", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("          metadata_", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta(" base_token_program", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("quote_token_program", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("   metadata_program", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("     system_program", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("       rent_program", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("    event_authority", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("            program", inst.AccountMetaSlice.Get(17)))
					})
				})
		})
}

func (obj Initialize) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BaseMintParam` param:
	err = encoder.Encode(obj.BaseMintParam)
	if err != nil {
		return err
	}
	// Serialize `CurveParam` param:
	err = encoder.Encode(obj.CurveParam)
	if err != nil {
		return err
	}
	// Serialize `VestingParam` param:
	err = encoder.Encode(obj.VestingParam)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Initialize) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BaseMintParam`:
	err = decoder.Decode(&obj.BaseMintParam)
	if err != nil {
		return err
	}
	// Deserialize `CurveParam`:
	err = decoder.Decode(&obj.CurveParam)
	if err != nil {
		return err
	}
	// Deserialize `VestingParam`:
	err = decoder.Decode(&obj.VestingParam)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeInstruction declares a new Initialize instruction with the provided parameters and accounts.
func NewInitializeInstruction(
	// Parameters:
	base_mint_param MintParams,
	curve_param CurveParams,
	vesting_param VestingParams,
	// Accounts:
	payer ag_solanago.PublicKey,
	creator ag_solanago.PublicKey,
	globalConfig ag_solanago.PublicKey,
	platformConfig ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	baseMint ag_solanago.PublicKey,
	quoteMint ag_solanago.PublicKey,
	baseVault ag_solanago.PublicKey,
	quoteVault ag_solanago.PublicKey,
	metadataAccount ag_solanago.PublicKey,
	baseTokenProgram ag_solanago.PublicKey,
	quoteTokenProgram ag_solanago.PublicKey,
	metadataProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rentProgram ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *Initialize {
	return NewInitializeInstructionBuilder().
		SetBaseMintParam(base_mint_param).
		SetCurveParam(curve_param).
		SetVestingParam(vesting_param).
		SetPayerAccount(payer).
		SetCreatorAccount(creator).
		SetGlobalConfigAccount(globalConfig).
		SetPlatformConfigAccount(platformConfig).
		SetAuthorityAccount(authority).
		SetPoolStateAccount(poolState).
		SetBaseMintAccount(baseMint).
		SetQuoteMintAccount(quoteMint).
		SetBaseVaultAccount(baseVault).
		SetQuoteVaultAccount(quoteVault).
		SetMetadataAccountAccount(metadataAccount).
		SetBaseTokenProgramAccount(baseTokenProgram).
		SetQuoteTokenProgramAccount(quoteTokenProgram).
		SetMetadataProgramAccount(metadataProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentProgramAccount(rentProgram).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
