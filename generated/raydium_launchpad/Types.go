// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type ClaimVestedEvent struct {
	PoolState   ag_solanago.PublicKey
	Beneficiary ag_solanago.PublicKey
	ClaimAmount uint64
}

func (obj ClaimVestedEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolState` param:
	err = encoder.Encode(obj.PoolState)
	if err != nil {
		return err
	}
	// Serialize `Beneficiary` param:
	err = encoder.Encode(obj.Beneficiary)
	if err != nil {
		return err
	}
	// Serialize `ClaimAmount` param:
	err = encoder.Encode(obj.ClaimAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimVestedEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolState`:
	err = decoder.Decode(&obj.PoolState)
	if err != nil {
		return err
	}
	// Deserialize `Beneficiary`:
	err = decoder.Decode(&obj.Beneficiary)
	if err != nil {
		return err
	}
	// Deserialize `ClaimAmount`:
	err = decoder.Decode(&obj.ClaimAmount)
	if err != nil {
		return err
	}
	return nil
}

type ConstantCurve struct {
	Supply                uint64
	TotalBaseSell         uint64
	TotalQuoteFundRaising uint64
	MigrateType           uint8
}

func (obj ConstantCurve) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Supply` param:
	err = encoder.Encode(obj.Supply)
	if err != nil {
		return err
	}
	// Serialize `TotalBaseSell` param:
	err = encoder.Encode(obj.TotalBaseSell)
	if err != nil {
		return err
	}
	// Serialize `TotalQuoteFundRaising` param:
	err = encoder.Encode(obj.TotalQuoteFundRaising)
	if err != nil {
		return err
	}
	// Serialize `MigrateType` param:
	err = encoder.Encode(obj.MigrateType)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ConstantCurve) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Supply`:
	err = decoder.Decode(&obj.Supply)
	if err != nil {
		return err
	}
	// Deserialize `TotalBaseSell`:
	err = decoder.Decode(&obj.TotalBaseSell)
	if err != nil {
		return err
	}
	// Deserialize `TotalQuoteFundRaising`:
	err = decoder.Decode(&obj.TotalQuoteFundRaising)
	if err != nil {
		return err
	}
	// Deserialize `MigrateType`:
	err = decoder.Decode(&obj.MigrateType)
	if err != nil {
		return err
	}
	return nil
}

type CreateVestingEvent struct {
	PoolState   ag_solanago.PublicKey
	Beneficiary ag_solanago.PublicKey
	ShareAmount uint64
}

func (obj CreateVestingEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolState` param:
	err = encoder.Encode(obj.PoolState)
	if err != nil {
		return err
	}
	// Serialize `Beneficiary` param:
	err = encoder.Encode(obj.Beneficiary)
	if err != nil {
		return err
	}
	// Serialize `ShareAmount` param:
	err = encoder.Encode(obj.ShareAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CreateVestingEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolState`:
	err = decoder.Decode(&obj.PoolState)
	if err != nil {
		return err
	}
	// Deserialize `Beneficiary`:
	err = decoder.Decode(&obj.Beneficiary)
	if err != nil {
		return err
	}
	// Deserialize `ShareAmount`:
	err = decoder.Decode(&obj.ShareAmount)
	if err != nil {
		return err
	}
	return nil
}

type CurveParams struct {
	Value curveParams
}

func (obj CurveParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	tmp := curveParamsContainer{}
	switch realvalue := obj.Value.(type) {
	case CurveParamsConstantTuple:
		tmp.Enum = 0
		tmp.Constant = realvalue
	case CurveParamsFixedTuple:
		tmp.Enum = 1
		tmp.Fixed = realvalue
	case CurveParamsLinearTuple:
		tmp.Enum = 2
		tmp.Linear = realvalue
	}
	return encoder.Encode(tmp)
}

func (obj *CurveParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	tmp := new(curveParamsContainer)
	err = decoder.Decode(tmp)
	if err != nil {
		return err
	}
	switch tmp.Enum {
	case 0:
		obj.Value = tmp.Constant
	case 1:
		obj.Value = tmp.Fixed
	case 2:
		obj.Value = tmp.Linear
	default:
		return fmt.Errorf("unknown enum index: %v", tmp.Enum)
	}
	return nil
}

type curveParams interface {
	isCurveParams()
}

type curveParamsContainer struct {
	Enum     ag_binary.BorshEnum `borsh_enum:"true"`
	Constant CurveParamsConstantTuple
	Fixed    CurveParamsFixedTuple
	Linear   CurveParamsLinearTuple
}

type CurveParamsConstantTuple struct {
	Data ConstantCurve
}

func (obj CurveParamsConstantTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CurveParamsConstantTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

func (_ CurveParamsConstantTuple) isCurveParams() {}

type CurveParamsFixedTuple struct {
	Data FixedCurve
}

func (obj CurveParamsFixedTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CurveParamsFixedTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

func (_ CurveParamsFixedTuple) isCurveParams() {}

type CurveParamsLinearTuple struct {
	Data LinearCurve
}

func (obj CurveParamsLinearTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CurveParamsLinearTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

func (_ CurveParamsLinearTuple) isCurveParams() {}

type FixedCurve struct {
	Supply                uint64
	TotalQuoteFundRaising uint64
	MigrateType           uint8
}

func (obj FixedCurve) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Supply` param:
	err = encoder.Encode(obj.Supply)
	if err != nil {
		return err
	}
	// Serialize `TotalQuoteFundRaising` param:
	err = encoder.Encode(obj.TotalQuoteFundRaising)
	if err != nil {
		return err
	}
	// Serialize `MigrateType` param:
	err = encoder.Encode(obj.MigrateType)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FixedCurve) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Supply`:
	err = decoder.Decode(&obj.Supply)
	if err != nil {
		return err
	}
	// Deserialize `TotalQuoteFundRaising`:
	err = decoder.Decode(&obj.TotalQuoteFundRaising)
	if err != nil {
		return err
	}
	// Deserialize `MigrateType`:
	err = decoder.Decode(&obj.MigrateType)
	if err != nil {
		return err
	}
	return nil
}

type GlobalConfig struct {
	// Account update epoch
	Epoch uint64

	// 0: Constant Product Curve
	// 1: Fixed Price Curve
	// 2: Linear Price Curve
	CurveType uint8

	// Config index
	Index uint16

	// The fee of migrate to amm
	MigrateFee uint64

	// The trade fee rate, denominated in hundredths of a bip (10^-6)
	TradeFeeRate uint64

	// The maximum share fee rate, denominated in hundredths of a bip (10^-6)
	MaxShareFeeRate uint64

	// The minimum base supply, the value without decimals
	MinBaseSupply uint64

	// The maximum lock rate, denominated in hundredths of a bip (10^-6)
	MaxLockRate uint64

	// The minimum base sell rate, denominated in hundredths of a bip (10^-6)
	MinBaseSellRate uint64

	// The minimum base migrate rate, denominated in hundredths of a bip (10^-6)
	MinBaseMigrateRate uint64

	// The minimum quote fund raising, the value with decimals
	MinQuoteFundRaising uint64

	// Mint information for quote token
	QuoteMint ag_solanago.PublicKey

	// Protocol Fee owner
	ProtocolFeeOwner ag_solanago.PublicKey

	// Migrate Fee owner
	MigrateFeeOwner ag_solanago.PublicKey

	// Migrate to amm control wallet
	MigrateToAmmWallet ag_solanago.PublicKey

	// Migrate to cpswap wallet
	MigrateToCpswapWallet ag_solanago.PublicKey

	// padding for future updates
	Padding [16]uint64
}

func (obj GlobalConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Epoch` param:
	err = encoder.Encode(obj.Epoch)
	if err != nil {
		return err
	}
	// Serialize `CurveType` param:
	err = encoder.Encode(obj.CurveType)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `MigrateFee` param:
	err = encoder.Encode(obj.MigrateFee)
	if err != nil {
		return err
	}
	// Serialize `TradeFeeRate` param:
	err = encoder.Encode(obj.TradeFeeRate)
	if err != nil {
		return err
	}
	// Serialize `MaxShareFeeRate` param:
	err = encoder.Encode(obj.MaxShareFeeRate)
	if err != nil {
		return err
	}
	// Serialize `MinBaseSupply` param:
	err = encoder.Encode(obj.MinBaseSupply)
	if err != nil {
		return err
	}
	// Serialize `MaxLockRate` param:
	err = encoder.Encode(obj.MaxLockRate)
	if err != nil {
		return err
	}
	// Serialize `MinBaseSellRate` param:
	err = encoder.Encode(obj.MinBaseSellRate)
	if err != nil {
		return err
	}
	// Serialize `MinBaseMigrateRate` param:
	err = encoder.Encode(obj.MinBaseMigrateRate)
	if err != nil {
		return err
	}
	// Serialize `MinQuoteFundRaising` param:
	err = encoder.Encode(obj.MinQuoteFundRaising)
	if err != nil {
		return err
	}
	// Serialize `QuoteMint` param:
	err = encoder.Encode(obj.QuoteMint)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeOwner` param:
	err = encoder.Encode(obj.ProtocolFeeOwner)
	if err != nil {
		return err
	}
	// Serialize `MigrateFeeOwner` param:
	err = encoder.Encode(obj.MigrateFeeOwner)
	if err != nil {
		return err
	}
	// Serialize `MigrateToAmmWallet` param:
	err = encoder.Encode(obj.MigrateToAmmWallet)
	if err != nil {
		return err
	}
	// Serialize `MigrateToCpswapWallet` param:
	err = encoder.Encode(obj.MigrateToCpswapWallet)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *GlobalConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Epoch`:
	err = decoder.Decode(&obj.Epoch)
	if err != nil {
		return err
	}
	// Deserialize `CurveType`:
	err = decoder.Decode(&obj.CurveType)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `MigrateFee`:
	err = decoder.Decode(&obj.MigrateFee)
	if err != nil {
		return err
	}
	// Deserialize `TradeFeeRate`:
	err = decoder.Decode(&obj.TradeFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `MaxShareFeeRate`:
	err = decoder.Decode(&obj.MaxShareFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `MinBaseSupply`:
	err = decoder.Decode(&obj.MinBaseSupply)
	if err != nil {
		return err
	}
	// Deserialize `MaxLockRate`:
	err = decoder.Decode(&obj.MaxLockRate)
	if err != nil {
		return err
	}
	// Deserialize `MinBaseSellRate`:
	err = decoder.Decode(&obj.MinBaseSellRate)
	if err != nil {
		return err
	}
	// Deserialize `MinBaseMigrateRate`:
	err = decoder.Decode(&obj.MinBaseMigrateRate)
	if err != nil {
		return err
	}
	// Deserialize `MinQuoteFundRaising`:
	err = decoder.Decode(&obj.MinQuoteFundRaising)
	if err != nil {
		return err
	}
	// Deserialize `QuoteMint`:
	err = decoder.Decode(&obj.QuoteMint)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeOwner`:
	err = decoder.Decode(&obj.ProtocolFeeOwner)
	if err != nil {
		return err
	}
	// Deserialize `MigrateFeeOwner`:
	err = decoder.Decode(&obj.MigrateFeeOwner)
	if err != nil {
		return err
	}
	// Deserialize `MigrateToAmmWallet`:
	err = decoder.Decode(&obj.MigrateToAmmWallet)
	if err != nil {
		return err
	}
	// Deserialize `MigrateToCpswapWallet`:
	err = decoder.Decode(&obj.MigrateToCpswapWallet)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type LinearCurve struct {
	Supply                uint64
	TotalQuoteFundRaising uint64
	MigrateType           uint8
}

func (obj LinearCurve) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Supply` param:
	err = encoder.Encode(obj.Supply)
	if err != nil {
		return err
	}
	// Serialize `TotalQuoteFundRaising` param:
	err = encoder.Encode(obj.TotalQuoteFundRaising)
	if err != nil {
		return err
	}
	// Serialize `MigrateType` param:
	err = encoder.Encode(obj.MigrateType)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LinearCurve) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Supply`:
	err = decoder.Decode(&obj.Supply)
	if err != nil {
		return err
	}
	// Deserialize `TotalQuoteFundRaising`:
	err = decoder.Decode(&obj.TotalQuoteFundRaising)
	if err != nil {
		return err
	}
	// Deserialize `MigrateType`:
	err = decoder.Decode(&obj.MigrateType)
	if err != nil {
		return err
	}
	return nil
}

type MigrateNftInfo struct {
	PlatformScale uint64
	CreatorScale  uint64
	BurnScale     uint64
}

func (obj MigrateNftInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PlatformScale` param:
	err = encoder.Encode(obj.PlatformScale)
	if err != nil {
		return err
	}
	// Serialize `CreatorScale` param:
	err = encoder.Encode(obj.CreatorScale)
	if err != nil {
		return err
	}
	// Serialize `BurnScale` param:
	err = encoder.Encode(obj.BurnScale)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MigrateNftInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PlatformScale`:
	err = decoder.Decode(&obj.PlatformScale)
	if err != nil {
		return err
	}
	// Deserialize `CreatorScale`:
	err = decoder.Decode(&obj.CreatorScale)
	if err != nil {
		return err
	}
	// Deserialize `BurnScale`:
	err = decoder.Decode(&obj.BurnScale)
	if err != nil {
		return err
	}
	return nil
}

type MintParams struct {
	Decimals uint8
	Name     string
	Symbol   string
	Uri      string
}

func (obj MintParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Symbol` param:
	err = encoder.Encode(obj.Symbol)
	if err != nil {
		return err
	}
	// Serialize `Uri` param:
	err = encoder.Encode(obj.Uri)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MintParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Symbol`:
	err = decoder.Decode(&obj.Symbol)
	if err != nil {
		return err
	}
	// Deserialize `Uri`:
	err = decoder.Decode(&obj.Uri)
	if err != nil {
		return err
	}
	return nil
}

type PlatformConfig struct {
	// The epoch for update interval
	Epoch uint64

	// The platform fee wallet
	PlatformFeeWallet ag_solanago.PublicKey

	// The platform nft wallet to receive the platform NFT after migration if platform_scale is not 0(Only support MigrateType::CPSWAP)
	PlatformNftWallet ag_solanago.PublicKey

	// Scale of the platform liquidity quantity rights will be converted into NFT(Only support MigrateType::CPSWAP)
	PlatformScale uint64

	// Scale of the token creator liquidity quantity rights will be converted into NFT(Only support MigrateType::CPSWAP)
	CreatorScale uint64

	// Scale of liquidity directly to burn
	BurnScale uint64

	// The platform fee rate
	FeeRate uint64

	// The platform name
	Name [64]uint8

	// The platform website
	Web [256]uint8

	// The platform img link
	Img [256]uint8

	// padding for future updates
	Padding [256]uint8
}

func (obj PlatformConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Epoch` param:
	err = encoder.Encode(obj.Epoch)
	if err != nil {
		return err
	}
	// Serialize `PlatformFeeWallet` param:
	err = encoder.Encode(obj.PlatformFeeWallet)
	if err != nil {
		return err
	}
	// Serialize `PlatformNftWallet` param:
	err = encoder.Encode(obj.PlatformNftWallet)
	if err != nil {
		return err
	}
	// Serialize `PlatformScale` param:
	err = encoder.Encode(obj.PlatformScale)
	if err != nil {
		return err
	}
	// Serialize `CreatorScale` param:
	err = encoder.Encode(obj.CreatorScale)
	if err != nil {
		return err
	}
	// Serialize `BurnScale` param:
	err = encoder.Encode(obj.BurnScale)
	if err != nil {
		return err
	}
	// Serialize `FeeRate` param:
	err = encoder.Encode(obj.FeeRate)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Web` param:
	err = encoder.Encode(obj.Web)
	if err != nil {
		return err
	}
	// Serialize `Img` param:
	err = encoder.Encode(obj.Img)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PlatformConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Epoch`:
	err = decoder.Decode(&obj.Epoch)
	if err != nil {
		return err
	}
	// Deserialize `PlatformFeeWallet`:
	err = decoder.Decode(&obj.PlatformFeeWallet)
	if err != nil {
		return err
	}
	// Deserialize `PlatformNftWallet`:
	err = decoder.Decode(&obj.PlatformNftWallet)
	if err != nil {
		return err
	}
	// Deserialize `PlatformScale`:
	err = decoder.Decode(&obj.PlatformScale)
	if err != nil {
		return err
	}
	// Deserialize `CreatorScale`:
	err = decoder.Decode(&obj.CreatorScale)
	if err != nil {
		return err
	}
	// Deserialize `BurnScale`:
	err = decoder.Decode(&obj.BurnScale)
	if err != nil {
		return err
	}
	// Deserialize `FeeRate`:
	err = decoder.Decode(&obj.FeeRate)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Web`:
	err = decoder.Decode(&obj.Web)
	if err != nil {
		return err
	}
	// Deserialize `Img`:
	err = decoder.Decode(&obj.Img)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type PlatformConfigParam struct {
	Value platformConfigParam
}

func (obj PlatformConfigParam) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	tmp := platformConfigParamContainer{}
	switch realvalue := obj.Value.(type) {
	case PlatformConfigParamFeeWalletTuple:
		tmp.Enum = 0
		tmp.FeeWallet = realvalue
	case PlatformConfigParamNFTWalletTuple:
		tmp.Enum = 1
		tmp.NFTWallet = realvalue
	case PlatformConfigParamMigrateNftInfoTuple:
		tmp.Enum = 2
		tmp.MigrateNftInfo = realvalue
	case PlatformConfigParamFeeRateTuple:
		tmp.Enum = 3
		tmp.FeeRate = realvalue
	case PlatformConfigParamNameTuple:
		tmp.Enum = 4
		tmp.Name = realvalue
	case PlatformConfigParamWebTuple:
		tmp.Enum = 5
		tmp.Web = realvalue
	case PlatformConfigParamImgTuple:
		tmp.Enum = 6
		tmp.Img = realvalue
	}
	return encoder.Encode(tmp)
}

func (obj *PlatformConfigParam) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	tmp := new(platformConfigParamContainer)
	err = decoder.Decode(tmp)
	if err != nil {
		return err
	}
	switch tmp.Enum {
	case 0:
		obj.Value = tmp.FeeWallet
	case 1:
		obj.Value = tmp.NFTWallet
	case 2:
		obj.Value = tmp.MigrateNftInfo
	case 3:
		obj.Value = tmp.FeeRate
	case 4:
		obj.Value = tmp.Name
	case 5:
		obj.Value = tmp.Web
	case 6:
		obj.Value = tmp.Img
	default:
		return fmt.Errorf("unknown enum index: %v", tmp.Enum)
	}
	return nil
}

type platformConfigParam interface {
	isPlatformConfigParam()
}

type platformConfigParamContainer struct {
	Enum           ag_binary.BorshEnum `borsh_enum:"true"`
	FeeWallet      PlatformConfigParamFeeWalletTuple
	NFTWallet      PlatformConfigParamNFTWalletTuple
	MigrateNftInfo PlatformConfigParamMigrateNftInfoTuple
	FeeRate        PlatformConfigParamFeeRateTuple
	Name           PlatformConfigParamNameTuple
	Web            PlatformConfigParamWebTuple
	Img            PlatformConfigParamImgTuple
}

type PlatformConfigParamFeeWalletTuple struct {
	Elem0 ag_solanago.PublicKey
}

func (obj PlatformConfigParamFeeWalletTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PlatformConfigParamFeeWalletTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ PlatformConfigParamFeeWalletTuple) isPlatformConfigParam() {}

type PlatformConfigParamNFTWalletTuple struct {
	Elem0 ag_solanago.PublicKey
}

func (obj PlatformConfigParamNFTWalletTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PlatformConfigParamNFTWalletTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ PlatformConfigParamNFTWalletTuple) isPlatformConfigParam() {}

type PlatformConfigParamMigrateNftInfoTuple struct {
	Elem0 MigrateNftInfo
}

func (obj PlatformConfigParamMigrateNftInfoTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PlatformConfigParamMigrateNftInfoTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ PlatformConfigParamMigrateNftInfoTuple) isPlatformConfigParam() {}

type PlatformConfigParamFeeRateTuple struct {
	Elem0 uint64
}

func (obj PlatformConfigParamFeeRateTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PlatformConfigParamFeeRateTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ PlatformConfigParamFeeRateTuple) isPlatformConfigParam() {}

type PlatformConfigParamNameTuple struct {
	Elem0 string
}

func (obj PlatformConfigParamNameTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PlatformConfigParamNameTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ PlatformConfigParamNameTuple) isPlatformConfigParam() {}

type PlatformConfigParamWebTuple struct {
	Elem0 string
}

func (obj PlatformConfigParamWebTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PlatformConfigParamWebTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ PlatformConfigParamWebTuple) isPlatformConfigParam() {}

type PlatformConfigParamImgTuple struct {
	Elem0 string
}

func (obj PlatformConfigParamImgTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PlatformConfigParamImgTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ PlatformConfigParamImgTuple) isPlatformConfigParam() {}

type PlatformParams struct {
	MigrateNftInfo MigrateNftInfo
	FeeRate        uint64
	Name           string
	Web            string
	Img            string
}

func (obj PlatformParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MigrateNftInfo` param:
	err = encoder.Encode(obj.MigrateNftInfo)
	if err != nil {
		return err
	}
	// Serialize `FeeRate` param:
	err = encoder.Encode(obj.FeeRate)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Web` param:
	err = encoder.Encode(obj.Web)
	if err != nil {
		return err
	}
	// Serialize `Img` param:
	err = encoder.Encode(obj.Img)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PlatformParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MigrateNftInfo`:
	err = decoder.Decode(&obj.MigrateNftInfo)
	if err != nil {
		return err
	}
	// Deserialize `FeeRate`:
	err = decoder.Decode(&obj.FeeRate)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Web`:
	err = decoder.Decode(&obj.Web)
	if err != nil {
		return err
	}
	// Deserialize `Img`:
	err = decoder.Decode(&obj.Img)
	if err != nil {
		return err
	}
	return nil
}

type PoolCreateEvent struct {
	PoolState     ag_solanago.PublicKey
	Creator       ag_solanago.PublicKey
	Config        ag_solanago.PublicKey
	BaseMintParam MintParams
	CurveParam    *CurveParams
	VestingParam  VestingParams
}

func (obj PoolCreateEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolState` param:
	err = encoder.Encode(obj.PoolState)
	if err != nil {
		return err
	}
	// Serialize `Creator` param:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return err
	}
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	// Serialize `BaseMintParam` param:
	err = encoder.Encode(obj.BaseMintParam)
	if err != nil {
		return err
	}
	// Serialize `CurveParam` param:
	err = encoder.Encode(obj.CurveParam)
	if err != nil {
		return err
	}
	// Serialize `VestingParam` param:
	err = encoder.Encode(obj.VestingParam)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolCreateEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolState`:
	err = decoder.Decode(&obj.PoolState)
	if err != nil {
		return err
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return err
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	// Deserialize `BaseMintParam`:
	err = decoder.Decode(&obj.BaseMintParam)
	if err != nil {
		return err
	}
	// Deserialize `CurveParam`:
	err = decoder.Decode(&obj.CurveParam)
	if err != nil {
		return err
	}
	// Deserialize `VestingParam`:
	err = decoder.Decode(&obj.VestingParam)
	if err != nil {
		return err
	}
	return nil
}

type PoolState struct {
	// Account update epoch
	Epoch uint64

	// Bump seed used for PDA address derivation
	AuthBump uint8

	// Current status of the pool
	// * 0: Pool is funding
	// * 1: Pool funding is end, waiting for migration
	// * 2: Pool migration is done
	Status uint8

	// Decimals of the pool base token
	BaseDecimals uint8

	// Decimals of the pool quote token
	QuoteDecimals uint8

	// Migrate to AMM or CpSwap
	MigrateType uint8

	// Supply of the pool base token
	Supply uint64

	// Total sell amount of the base token
	TotalBaseSell uint64

	// For different curves, virtual_base and virtual_quote have different meanings
	// For constant product curve, virtual_base and virtual_quote are virtual liquidity, virtual_quote/virtual_base is the initial price
	// For linear price curve, virtual_base is the price slope parameter a, virtual_quote has no effect
	// For fixed price curve, virtual_quote/virtual_base is the initial price
	VirtualBase  uint64
	VirtualQuote uint64

	// Actual base token amount in the pool
	// Represents the real tokens available for trading
	RealBase uint64

	// Actual quote token amount in the pool
	// Represents the real tokens available for trading
	RealQuote uint64

	// The total quote fund raising of the pool
	TotalQuoteFundRaising uint64

	// Accumulated trading fees in quote tokens
	// Can be collected by the protocol fee owner
	QuoteProtocolFee uint64

	// Accumulated platform fees in quote tokens
	// Can be collected by the platform wallet stored in platform config
	PlatformFee uint64

	// The fee of migrate to amm
	MigrateFee uint64

	// Vesting schedule for the base token
	VestingSchedule VestingSchedule

	// Public key of the global configuration account
	// Contains protocol-wide settings this pool adheres to
	GlobalConfig ag_solanago.PublicKey

	// Public key of the platform configuration account
	// Contains platform-wide settings this pool adheres to
	PlatformConfig ag_solanago.PublicKey

	// Public key of the base mint address
	BaseMint ag_solanago.PublicKey

	// Public key of the quote mint address
	QuoteMint ag_solanago.PublicKey

	// Public key of the base token vault
	// Holds the actual base tokens owned by the pool
	BaseVault ag_solanago.PublicKey

	// Public key of the quote token vault
	// Holds the actual quote tokens owned by the pool
	QuoteVault ag_solanago.PublicKey

	// The creator of base token
	Creator ag_solanago.PublicKey

	// padding for future updates
	Padding [8]uint64
}

func (obj PoolState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Epoch` param:
	err = encoder.Encode(obj.Epoch)
	if err != nil {
		return err
	}
	// Serialize `AuthBump` param:
	err = encoder.Encode(obj.AuthBump)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `BaseDecimals` param:
	err = encoder.Encode(obj.BaseDecimals)
	if err != nil {
		return err
	}
	// Serialize `QuoteDecimals` param:
	err = encoder.Encode(obj.QuoteDecimals)
	if err != nil {
		return err
	}
	// Serialize `MigrateType` param:
	err = encoder.Encode(obj.MigrateType)
	if err != nil {
		return err
	}
	// Serialize `Supply` param:
	err = encoder.Encode(obj.Supply)
	if err != nil {
		return err
	}
	// Serialize `TotalBaseSell` param:
	err = encoder.Encode(obj.TotalBaseSell)
	if err != nil {
		return err
	}
	// Serialize `VirtualBase` param:
	err = encoder.Encode(obj.VirtualBase)
	if err != nil {
		return err
	}
	// Serialize `VirtualQuote` param:
	err = encoder.Encode(obj.VirtualQuote)
	if err != nil {
		return err
	}
	// Serialize `RealBase` param:
	err = encoder.Encode(obj.RealBase)
	if err != nil {
		return err
	}
	// Serialize `RealQuote` param:
	err = encoder.Encode(obj.RealQuote)
	if err != nil {
		return err
	}
	// Serialize `TotalQuoteFundRaising` param:
	err = encoder.Encode(obj.TotalQuoteFundRaising)
	if err != nil {
		return err
	}
	// Serialize `QuoteProtocolFee` param:
	err = encoder.Encode(obj.QuoteProtocolFee)
	if err != nil {
		return err
	}
	// Serialize `PlatformFee` param:
	err = encoder.Encode(obj.PlatformFee)
	if err != nil {
		return err
	}
	// Serialize `MigrateFee` param:
	err = encoder.Encode(obj.MigrateFee)
	if err != nil {
		return err
	}
	// Serialize `VestingSchedule` param:
	err = encoder.Encode(obj.VestingSchedule)
	if err != nil {
		return err
	}
	// Serialize `GlobalConfig` param:
	err = encoder.Encode(obj.GlobalConfig)
	if err != nil {
		return err
	}
	// Serialize `PlatformConfig` param:
	err = encoder.Encode(obj.PlatformConfig)
	if err != nil {
		return err
	}
	// Serialize `BaseMint` param:
	err = encoder.Encode(obj.BaseMint)
	if err != nil {
		return err
	}
	// Serialize `QuoteMint` param:
	err = encoder.Encode(obj.QuoteMint)
	if err != nil {
		return err
	}
	// Serialize `BaseVault` param:
	err = encoder.Encode(obj.BaseVault)
	if err != nil {
		return err
	}
	// Serialize `QuoteVault` param:
	err = encoder.Encode(obj.QuoteVault)
	if err != nil {
		return err
	}
	// Serialize `Creator` param:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Epoch`:
	err = decoder.Decode(&obj.Epoch)
	if err != nil {
		return err
	}
	// Deserialize `AuthBump`:
	err = decoder.Decode(&obj.AuthBump)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `BaseDecimals`:
	err = decoder.Decode(&obj.BaseDecimals)
	if err != nil {
		return err
	}
	// Deserialize `QuoteDecimals`:
	err = decoder.Decode(&obj.QuoteDecimals)
	if err != nil {
		return err
	}
	// Deserialize `MigrateType`:
	err = decoder.Decode(&obj.MigrateType)
	if err != nil {
		return err
	}
	// Deserialize `Supply`:
	err = decoder.Decode(&obj.Supply)
	if err != nil {
		return err
	}
	// Deserialize `TotalBaseSell`:
	err = decoder.Decode(&obj.TotalBaseSell)
	if err != nil {
		return err
	}
	// Deserialize `VirtualBase`:
	err = decoder.Decode(&obj.VirtualBase)
	if err != nil {
		return err
	}
	// Deserialize `VirtualQuote`:
	err = decoder.Decode(&obj.VirtualQuote)
	if err != nil {
		return err
	}
	// Deserialize `RealBase`:
	err = decoder.Decode(&obj.RealBase)
	if err != nil {
		return err
	}
	// Deserialize `RealQuote`:
	err = decoder.Decode(&obj.RealQuote)
	if err != nil {
		return err
	}
	// Deserialize `TotalQuoteFundRaising`:
	err = decoder.Decode(&obj.TotalQuoteFundRaising)
	if err != nil {
		return err
	}
	// Deserialize `QuoteProtocolFee`:
	err = decoder.Decode(&obj.QuoteProtocolFee)
	if err != nil {
		return err
	}
	// Deserialize `PlatformFee`:
	err = decoder.Decode(&obj.PlatformFee)
	if err != nil {
		return err
	}
	// Deserialize `MigrateFee`:
	err = decoder.Decode(&obj.MigrateFee)
	if err != nil {
		return err
	}
	// Deserialize `VestingSchedule`:
	err = decoder.Decode(&obj.VestingSchedule)
	if err != nil {
		return err
	}
	// Deserialize `GlobalConfig`:
	err = decoder.Decode(&obj.GlobalConfig)
	if err != nil {
		return err
	}
	// Deserialize `PlatformConfig`:
	err = decoder.Decode(&obj.PlatformConfig)
	if err != nil {
		return err
	}
	// Deserialize `BaseMint`:
	err = decoder.Decode(&obj.BaseMint)
	if err != nil {
		return err
	}
	// Deserialize `QuoteMint`:
	err = decoder.Decode(&obj.QuoteMint)
	if err != nil {
		return err
	}
	// Deserialize `BaseVault`:
	err = decoder.Decode(&obj.BaseVault)
	if err != nil {
		return err
	}
	// Deserialize `QuoteVault`:
	err = decoder.Decode(&obj.QuoteVault)
	if err != nil {
		return err
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type PoolStatus ag_binary.BorshEnum

const (
	PoolStatusFund PoolStatus = iota
	PoolStatusMigrate
	PoolStatusTrade
)

func (value PoolStatus) String() string {
	switch value {
	case PoolStatusFund:
		return "Fund"
	case PoolStatusMigrate:
		return "Migrate"
	case PoolStatusTrade:
		return "Trade"
	default:
		return ""
	}
}

type TradeDirection ag_binary.BorshEnum

const (
	TradeDirectionBuy TradeDirection = iota
	TradeDirectionSell
)

func (value TradeDirection) String() string {
	switch value {
	case TradeDirectionBuy:
		return "Buy"
	case TradeDirectionSell:
		return "Sell"
	default:
		return ""
	}
}

type TradeEvent struct {
	PoolState       ag_solanago.PublicKey
	TotalBaseSell   uint64
	VirtualBase     uint64
	VirtualQuote    uint64
	RealBaseBefore  uint64
	RealQuoteBefore uint64
	RealBaseAfter   uint64
	RealQuoteAfter  uint64
	AmountIn        uint64
	AmountOut       uint64
	ProtocolFee     uint64
	PlatformFee     uint64
	ShareFee        uint64
	TradeDirection  TradeDirection
	PoolStatus      PoolStatus
}

func (obj TradeEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolState` param:
	err = encoder.Encode(obj.PoolState)
	if err != nil {
		return err
	}
	// Serialize `TotalBaseSell` param:
	err = encoder.Encode(obj.TotalBaseSell)
	if err != nil {
		return err
	}
	// Serialize `VirtualBase` param:
	err = encoder.Encode(obj.VirtualBase)
	if err != nil {
		return err
	}
	// Serialize `VirtualQuote` param:
	err = encoder.Encode(obj.VirtualQuote)
	if err != nil {
		return err
	}
	// Serialize `RealBaseBefore` param:
	err = encoder.Encode(obj.RealBaseBefore)
	if err != nil {
		return err
	}
	// Serialize `RealQuoteBefore` param:
	err = encoder.Encode(obj.RealQuoteBefore)
	if err != nil {
		return err
	}
	// Serialize `RealBaseAfter` param:
	err = encoder.Encode(obj.RealBaseAfter)
	if err != nil {
		return err
	}
	// Serialize `RealQuoteAfter` param:
	err = encoder.Encode(obj.RealQuoteAfter)
	if err != nil {
		return err
	}
	// Serialize `AmountIn` param:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return err
	}
	// Serialize `AmountOut` param:
	err = encoder.Encode(obj.AmountOut)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFee` param:
	err = encoder.Encode(obj.ProtocolFee)
	if err != nil {
		return err
	}
	// Serialize `PlatformFee` param:
	err = encoder.Encode(obj.PlatformFee)
	if err != nil {
		return err
	}
	// Serialize `ShareFee` param:
	err = encoder.Encode(obj.ShareFee)
	if err != nil {
		return err
	}
	// Serialize `TradeDirection` param:
	err = encoder.Encode(obj.TradeDirection)
	if err != nil {
		return err
	}
	// Serialize `PoolStatus` param:
	err = encoder.Encode(obj.PoolStatus)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TradeEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolState`:
	err = decoder.Decode(&obj.PoolState)
	if err != nil {
		return err
	}
	// Deserialize `TotalBaseSell`:
	err = decoder.Decode(&obj.TotalBaseSell)
	if err != nil {
		return err
	}
	// Deserialize `VirtualBase`:
	err = decoder.Decode(&obj.VirtualBase)
	if err != nil {
		return err
	}
	// Deserialize `VirtualQuote`:
	err = decoder.Decode(&obj.VirtualQuote)
	if err != nil {
		return err
	}
	// Deserialize `RealBaseBefore`:
	err = decoder.Decode(&obj.RealBaseBefore)
	if err != nil {
		return err
	}
	// Deserialize `RealQuoteBefore`:
	err = decoder.Decode(&obj.RealQuoteBefore)
	if err != nil {
		return err
	}
	// Deserialize `RealBaseAfter`:
	err = decoder.Decode(&obj.RealBaseAfter)
	if err != nil {
		return err
	}
	// Deserialize `RealQuoteAfter`:
	err = decoder.Decode(&obj.RealQuoteAfter)
	if err != nil {
		return err
	}
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return err
	}
	// Deserialize `AmountOut`:
	err = decoder.Decode(&obj.AmountOut)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFee`:
	err = decoder.Decode(&obj.ProtocolFee)
	if err != nil {
		return err
	}
	// Deserialize `PlatformFee`:
	err = decoder.Decode(&obj.PlatformFee)
	if err != nil {
		return err
	}
	// Deserialize `ShareFee`:
	err = decoder.Decode(&obj.ShareFee)
	if err != nil {
		return err
	}
	// Deserialize `TradeDirection`:
	err = decoder.Decode(&obj.TradeDirection)
	if err != nil {
		return err
	}
	// Deserialize `PoolStatus`:
	err = decoder.Decode(&obj.PoolStatus)
	if err != nil {
		return err
	}
	return nil
}

type VestingParams struct {
	TotalLockedAmount uint64
	CliffPeriod       uint64
	UnlockPeriod      uint64
}

func (obj VestingParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TotalLockedAmount` param:
	err = encoder.Encode(obj.TotalLockedAmount)
	if err != nil {
		return err
	}
	// Serialize `CliffPeriod` param:
	err = encoder.Encode(obj.CliffPeriod)
	if err != nil {
		return err
	}
	// Serialize `UnlockPeriod` param:
	err = encoder.Encode(obj.UnlockPeriod)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VestingParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TotalLockedAmount`:
	err = decoder.Decode(&obj.TotalLockedAmount)
	if err != nil {
		return err
	}
	// Deserialize `CliffPeriod`:
	err = decoder.Decode(&obj.CliffPeriod)
	if err != nil {
		return err
	}
	// Deserialize `UnlockPeriod`:
	err = decoder.Decode(&obj.UnlockPeriod)
	if err != nil {
		return err
	}
	return nil
}

type VestingRecord struct {
	// Account update epoch
	Epoch uint64

	// The pool state account
	Pool ag_solanago.PublicKey

	// The beneficiary of the vesting account
	Beneficiary ag_solanago.PublicKey

	// The amount of tokens claimed
	ClaimedAmount uint64

	// The share amount of the token to be vested
	TokenShareAmount uint64

	// padding for future updates
	Padding [8]uint64
}

func (obj VestingRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Epoch` param:
	err = encoder.Encode(obj.Epoch)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Beneficiary` param:
	err = encoder.Encode(obj.Beneficiary)
	if err != nil {
		return err
	}
	// Serialize `ClaimedAmount` param:
	err = encoder.Encode(obj.ClaimedAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenShareAmount` param:
	err = encoder.Encode(obj.TokenShareAmount)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VestingRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Epoch`:
	err = decoder.Decode(&obj.Epoch)
	if err != nil {
		return err
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Beneficiary`:
	err = decoder.Decode(&obj.Beneficiary)
	if err != nil {
		return err
	}
	// Deserialize `ClaimedAmount`:
	err = decoder.Decode(&obj.ClaimedAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenShareAmount`:
	err = decoder.Decode(&obj.TokenShareAmount)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type VestingSchedule struct {
	TotalLockedAmount uint64
	CliffPeriod       uint64
	UnlockPeriod      uint64
	StartTime         uint64

	// Total allocated share amount of the base token, not greater than total_locked_amount
	AllocatedShareAmount uint64
}

func (obj VestingSchedule) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TotalLockedAmount` param:
	err = encoder.Encode(obj.TotalLockedAmount)
	if err != nil {
		return err
	}
	// Serialize `CliffPeriod` param:
	err = encoder.Encode(obj.CliffPeriod)
	if err != nil {
		return err
	}
	// Serialize `UnlockPeriod` param:
	err = encoder.Encode(obj.UnlockPeriod)
	if err != nil {
		return err
	}
	// Serialize `StartTime` param:
	err = encoder.Encode(obj.StartTime)
	if err != nil {
		return err
	}
	// Serialize `AllocatedShareAmount` param:
	err = encoder.Encode(obj.AllocatedShareAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VestingSchedule) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TotalLockedAmount`:
	err = decoder.Decode(&obj.TotalLockedAmount)
	if err != nil {
		return err
	}
	// Deserialize `CliffPeriod`:
	err = decoder.Decode(&obj.CliffPeriod)
	if err != nil {
		return err
	}
	// Deserialize `UnlockPeriod`:
	err = decoder.Decode(&obj.UnlockPeriod)
	if err != nil {
		return err
	}
	// Deserialize `StartTime`:
	err = decoder.Decode(&obj.StartTime)
	if err != nil {
		return err
	}
	// Deserialize `AllocatedShareAmount`:
	err = decoder.Decode(&obj.AllocatedShareAmount)
	if err != nil {
		return err
	}
	return nil
}
