// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Use the given amount of base tokens to sell for quote tokens.
// # Arguments
//
// * `ctx` - The context of accounts
// * `amount_in` - Amount of base token to sell
// * `minimum_amount_out` - Minimum amount of quote token to receive (slippage protection)
// * `share_fee_rate` - Fee rate for the share
//
type SellExactIn struct {
	AmountIn         *uint64
	MinimumAmountOut *uint64
	ShareFeeRate     *uint64

	// [0] = [SIGNER] payer
	// ··········· The user performing the swap operation
	// ··········· Must sign the transaction and pay for fees
	//
	// [1] = [] authority
	// ··········· PDA that acts as the authority for pool vault operations
	// ··········· Generated using AUTH_SEED
	//
	// [2] = [] global_config
	// ··········· Global configuration account containing protocol-wide settings
	// ··········· Used to read protocol fee rates and curve type
	//
	// [3] = [] platform_config
	// ··········· Platform configuration account containing platform-wide settings
	// ··········· Used to read platform fee rate
	//
	// [4] = [WRITE] pool_state
	// ··········· The pool state account where the swap will be performed
	// ··········· Contains current pool parameters and balances
	//
	// [5] = [WRITE] user_base_token
	// ··········· The user's token account for base tokens (tokens being bought)
	// ··········· Will receive the output tokens after the swap
	//
	// [6] = [WRITE] user_quote_token
	// ··········· The user's token account for quote tokens (tokens being sold)
	// ··········· Will be debited for the input amount
	//
	// [7] = [WRITE] base_vault
	// ··········· The pool's vault for base tokens
	// ··········· Will be debited to send tokens to the user
	//
	// [8] = [WRITE] quote_vault
	// ··········· The pool's vault for quote tokens
	// ··········· Will receive the input tokens from the user
	//
	// [9] = [] base_token_mint
	// ··········· The mint of the base token
	// ··········· Used for transfer fee calculations if applicable
	//
	// [10] = [] quote_token_mint
	// ··········· The mint of the quote token
	//
	// [11] = [] base_token_program
	// ··········· SPL Token program for base token transfers
	//
	// [12] = [] quote_token_program
	// ··········· SPL Token program for quote token transfers
	//
	// [13] = [] event_authority
	//
	// [14] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSellExactInInstructionBuilder creates a new `SellExactIn` instruction builder.
func NewSellExactInInstructionBuilder() *SellExactIn {
	nd := &SellExactIn{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 15),
	}
	nd.AccountMetaSlice[12] = ag_solanago.Meta(Addresses["TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"])
	return nd
}

// SetAmountIn sets the "amount_in" parameter.
func (inst *SellExactIn) SetAmountIn(amount_in uint64) *SellExactIn {
	inst.AmountIn = &amount_in
	return inst
}

// SetMinimumAmountOut sets the "minimum_amount_out" parameter.
func (inst *SellExactIn) SetMinimumAmountOut(minimum_amount_out uint64) *SellExactIn {
	inst.MinimumAmountOut = &minimum_amount_out
	return inst
}

// SetShareFeeRate sets the "share_fee_rate" parameter.
func (inst *SellExactIn) SetShareFeeRate(share_fee_rate uint64) *SellExactIn {
	inst.ShareFeeRate = &share_fee_rate
	return inst
}

// SetPayerAccount sets the "payer" account.
// The user performing the swap operation
// Must sign the transaction and pay for fees
func (inst *SellExactIn) SetPayerAccount(payer ag_solanago.PublicKey) *SellExactIn {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// The user performing the swap operation
// Must sign the transaction and pay for fees
func (inst *SellExactIn) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
// PDA that acts as the authority for pool vault operations
// Generated using AUTH_SEED
func (inst *SellExactIn) SetAuthorityAccount(authority ag_solanago.PublicKey) *SellExactIn {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority)
	return inst
}

func (inst *SellExactIn) findFindAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: vault_auth_seed
	seeds = append(seeds, []byte{byte(0x76), byte(0x61), byte(0x75), byte(0x6c), byte(0x74), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x5f), byte(0x73), byte(0x65), byte(0x65), byte(0x64)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindAuthorityAddressWithBumpSeed calculates Authority account address with given seeds and a known bump seed.
func (inst *SellExactIn) FindAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindAuthorityAddress(bumpSeed)
	return
}

func (inst *SellExactIn) MustFindAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindAuthorityAddress finds Authority account address with given seeds.
func (inst *SellExactIn) FindAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindAuthorityAddress(0)
	return
}

func (inst *SellExactIn) MustFindAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetAuthorityAccount gets the "authority" account.
// PDA that acts as the authority for pool vault operations
// Generated using AUTH_SEED
func (inst *SellExactIn) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetGlobalConfigAccount sets the "global_config" account.
// Global configuration account containing protocol-wide settings
// Used to read protocol fee rates and curve type
func (inst *SellExactIn) SetGlobalConfigAccount(globalConfig ag_solanago.PublicKey) *SellExactIn {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(globalConfig)
	return inst
}

// GetGlobalConfigAccount gets the "global_config" account.
// Global configuration account containing protocol-wide settings
// Used to read protocol fee rates and curve type
func (inst *SellExactIn) GetGlobalConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPlatformConfigAccount sets the "platform_config" account.
// Platform configuration account containing platform-wide settings
// Used to read platform fee rate
func (inst *SellExactIn) SetPlatformConfigAccount(platformConfig ag_solanago.PublicKey) *SellExactIn {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(platformConfig)
	return inst
}

// GetPlatformConfigAccount gets the "platform_config" account.
// Platform configuration account containing platform-wide settings
// Used to read platform fee rate
func (inst *SellExactIn) GetPlatformConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPoolStateAccount sets the "pool_state" account.
// The pool state account where the swap will be performed
// Contains current pool parameters and balances
func (inst *SellExactIn) SetPoolStateAccount(poolState ag_solanago.PublicKey) *SellExactIn {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(poolState).WRITE()
	return inst
}

// GetPoolStateAccount gets the "pool_state" account.
// The pool state account where the swap will be performed
// Contains current pool parameters and balances
func (inst *SellExactIn) GetPoolStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetUserBaseTokenAccount sets the "user_base_token" account.
// The user's token account for base tokens (tokens being bought)
// Will receive the output tokens after the swap
func (inst *SellExactIn) SetUserBaseTokenAccount(userBaseToken ag_solanago.PublicKey) *SellExactIn {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(userBaseToken).WRITE()
	return inst
}

// GetUserBaseTokenAccount gets the "user_base_token" account.
// The user's token account for base tokens (tokens being bought)
// Will receive the output tokens after the swap
func (inst *SellExactIn) GetUserBaseTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetUserQuoteTokenAccount sets the "user_quote_token" account.
// The user's token account for quote tokens (tokens being sold)
// Will be debited for the input amount
func (inst *SellExactIn) SetUserQuoteTokenAccount(userQuoteToken ag_solanago.PublicKey) *SellExactIn {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(userQuoteToken).WRITE()
	return inst
}

// GetUserQuoteTokenAccount gets the "user_quote_token" account.
// The user's token account for quote tokens (tokens being sold)
// Will be debited for the input amount
func (inst *SellExactIn) GetUserQuoteTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetBaseVaultAccount sets the "base_vault" account.
// The pool's vault for base tokens
// Will be debited to send tokens to the user
func (inst *SellExactIn) SetBaseVaultAccount(baseVault ag_solanago.PublicKey) *SellExactIn {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(baseVault).WRITE()
	return inst
}

// GetBaseVaultAccount gets the "base_vault" account.
// The pool's vault for base tokens
// Will be debited to send tokens to the user
func (inst *SellExactIn) GetBaseVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetQuoteVaultAccount sets the "quote_vault" account.
// The pool's vault for quote tokens
// Will receive the input tokens from the user
func (inst *SellExactIn) SetQuoteVaultAccount(quoteVault ag_solanago.PublicKey) *SellExactIn {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(quoteVault).WRITE()
	return inst
}

// GetQuoteVaultAccount gets the "quote_vault" account.
// The pool's vault for quote tokens
// Will receive the input tokens from the user
func (inst *SellExactIn) GetQuoteVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetBaseTokenMintAccount sets the "base_token_mint" account.
// The mint of the base token
// Used for transfer fee calculations if applicable
func (inst *SellExactIn) SetBaseTokenMintAccount(baseTokenMint ag_solanago.PublicKey) *SellExactIn {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(baseTokenMint)
	return inst
}

// GetBaseTokenMintAccount gets the "base_token_mint" account.
// The mint of the base token
// Used for transfer fee calculations if applicable
func (inst *SellExactIn) GetBaseTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetQuoteTokenMintAccount sets the "quote_token_mint" account.
// The mint of the quote token
func (inst *SellExactIn) SetQuoteTokenMintAccount(quoteTokenMint ag_solanago.PublicKey) *SellExactIn {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(quoteTokenMint)
	return inst
}

// GetQuoteTokenMintAccount gets the "quote_token_mint" account.
// The mint of the quote token
func (inst *SellExactIn) GetQuoteTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetBaseTokenProgramAccount sets the "base_token_program" account.
// SPL Token program for base token transfers
func (inst *SellExactIn) SetBaseTokenProgramAccount(baseTokenProgram ag_solanago.PublicKey) *SellExactIn {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(baseTokenProgram)
	return inst
}

// GetBaseTokenProgramAccount gets the "base_token_program" account.
// SPL Token program for base token transfers
func (inst *SellExactIn) GetBaseTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetQuoteTokenProgramAccount sets the "quote_token_program" account.
// SPL Token program for quote token transfers
func (inst *SellExactIn) SetQuoteTokenProgramAccount(quoteTokenProgram ag_solanago.PublicKey) *SellExactIn {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(quoteTokenProgram)
	return inst
}

// GetQuoteTokenProgramAccount gets the "quote_token_program" account.
// SPL Token program for quote token transfers
func (inst *SellExactIn) GetQuoteTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *SellExactIn) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *SellExactIn {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(eventAuthority)
	return inst
}

func (inst *SellExactIn) findFindEventAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: __event_authority
	seeds = append(seeds, []byte{byte(0x5f), byte(0x5f), byte(0x65), byte(0x76), byte(0x65), byte(0x6e), byte(0x74), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindEventAuthorityAddressWithBumpSeed calculates EventAuthority account address with given seeds and a known bump seed.
func (inst *SellExactIn) FindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindEventAuthorityAddress(bumpSeed)
	return
}

func (inst *SellExactIn) MustFindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindEventAuthorityAddress finds EventAuthority account address with given seeds.
func (inst *SellExactIn) FindEventAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindEventAuthorityAddress(0)
	return
}

func (inst *SellExactIn) MustFindEventAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *SellExactIn) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetProgramAccount sets the "program" account.
func (inst *SellExactIn) SetProgramAccount(program ag_solanago.PublicKey) *SellExactIn {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *SellExactIn) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

func (inst SellExactIn) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SellExactIn,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SellExactIn) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SellExactIn) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.AmountIn == nil {
			return errors.New("AmountIn parameter is not set")
		}
		if inst.MinimumAmountOut == nil {
			return errors.New("MinimumAmountOut parameter is not set")
		}
		if inst.ShareFeeRate == nil {
			return errors.New("ShareFeeRate parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.GlobalConfig is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PlatformConfig is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.PoolState is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.UserBaseToken is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.UserQuoteToken is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.BaseVault is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.QuoteVault is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.BaseTokenMint is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.QuoteTokenMint is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.BaseTokenProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.QuoteTokenProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *SellExactIn) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SellExactIn")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("          AmountIn", *inst.AmountIn))
						paramsBranch.Child(ag_format.Param("  MinimumAmountOut", *inst.MinimumAmountOut))
						paramsBranch.Child(ag_format.Param("      ShareFeeRate", *inst.ShareFeeRate))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=15]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("              payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      global_config", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    platform_config", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("         pool_state", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("    user_base_token", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("   user_quote_token", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("         base_vault", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("        quote_vault", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("    base_token_mint", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("   quote_token_mint", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta(" base_token_program", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("quote_token_program", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("    event_authority", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("            program", inst.AccountMetaSlice.Get(14)))
					})
				})
		})
}

func (obj SellExactIn) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountIn` param:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return err
	}
	// Serialize `MinimumAmountOut` param:
	err = encoder.Encode(obj.MinimumAmountOut)
	if err != nil {
		return err
	}
	// Serialize `ShareFeeRate` param:
	err = encoder.Encode(obj.ShareFeeRate)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SellExactIn) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return err
	}
	// Deserialize `MinimumAmountOut`:
	err = decoder.Decode(&obj.MinimumAmountOut)
	if err != nil {
		return err
	}
	// Deserialize `ShareFeeRate`:
	err = decoder.Decode(&obj.ShareFeeRate)
	if err != nil {
		return err
	}
	return nil
}

// NewSellExactInInstruction declares a new SellExactIn instruction with the provided parameters and accounts.
func NewSellExactInInstruction(
	// Parameters:
	amount_in uint64,
	minimum_amount_out uint64,
	share_fee_rate uint64,
	// Accounts:
	payer ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	globalConfig ag_solanago.PublicKey,
	platformConfig ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	userBaseToken ag_solanago.PublicKey,
	userQuoteToken ag_solanago.PublicKey,
	baseVault ag_solanago.PublicKey,
	quoteVault ag_solanago.PublicKey,
	baseTokenMint ag_solanago.PublicKey,
	quoteTokenMint ag_solanago.PublicKey,
	baseTokenProgram ag_solanago.PublicKey,
	quoteTokenProgram ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *SellExactIn {
	return NewSellExactInInstructionBuilder().
		SetAmountIn(amount_in).
		SetMinimumAmountOut(minimum_amount_out).
		SetShareFeeRate(share_fee_rate).
		SetPayerAccount(payer).
		SetAuthorityAccount(authority).
		SetGlobalConfigAccount(globalConfig).
		SetPlatformConfigAccount(platformConfig).
		SetPoolStateAccount(poolState).
		SetUserBaseTokenAccount(userBaseToken).
		SetUserQuoteTokenAccount(userQuoteToken).
		SetBaseVaultAccount(baseVault).
		SetQuoteVaultAccount(quoteVault).
		SetBaseTokenMintAccount(baseTokenMint).
		SetQuoteTokenMintAccount(quoteTokenMint).
		SetBaseTokenProgramAccount(baseTokenProgram).
		SetQuoteTokenProgramAccount(quoteTokenProgram).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
