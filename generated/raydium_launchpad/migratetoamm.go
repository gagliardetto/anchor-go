// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// # Arguments
//
// * `ctx` - The context of accounts
//
type MigrateToAmm struct {
	BaseLotSize            *uint64
	QuoteLotSize           *uint64
	MarketVaultSignerNonce *uint8

	// [0] = [WRITE, SIGNER] payer
	// ··········· Only migrate_to_amm_wallet can migrate to cpswap pool
	// ··········· This signer must match the migrate_to_amm_wallet saved in global_config
	//
	// [1] = [] base_mint
	// ··········· The mint for the base token (token being sold)
	//
	// [2] = [] quote_mint
	// ··········· The mint for the quote token (token used to buy)
	//
	// [3] = [] openbook_program
	//
	// [4] = [WRITE] market
	// ··········· Account created and asigned to openbook_program but not been initialized
	//
	// [5] = [WRITE] request_queue
	// ··········· Account created and asigned to openbook_program but not been initialized
	//
	// [6] = [WRITE] event_queue
	// ··········· Account created and asigned to openbook_program but not been initialized
	//
	// [7] = [WRITE] bids
	// ··········· Account created and asigned to openbook_program but not been initialized
	//
	// [8] = [WRITE] asks
	// ··········· Account created and asigned to openbook_program but not been initialized
	//
	// [9] = [] market_vault_signer
	//
	// [10] = [WRITE] market_base_vault
	// ··········· Token account that holds the market's base tokens
	//
	// [11] = [WRITE] market_quote_vault
	// ··········· Token account that holds the market's quote tokens
	//
	// [12] = [] amm_program
	//
	// [13] = [WRITE] amm_pool
	//
	// [14] = [] amm_authority
	//
	// [15] = [WRITE] amm_open_orders
	//
	// [16] = [WRITE] amm_lp_mint
	//
	// [17] = [WRITE] amm_base_vault
	//
	// [18] = [WRITE] amm_quote_vault
	//
	// [19] = [WRITE] amm_target_orders
	//
	// [20] = [] amm_config
	//
	// [21] = [WRITE] amm_create_fee_destination
	//
	// [22] = [WRITE] authority
	// ··········· PDA that acts as the authority for pool vault operations
	// ··········· Generated using AUTH_SEED
	//
	// [23] = [WRITE] pool_state
	// ··········· Account that stores the pool's state and parameters
	// ··········· PDA generated using POOL_SEED and both token mints
	//
	// [24] = [] global_config
	// ··········· Global config account stores owner
	//
	// [25] = [WRITE] base_vault
	// ··········· The pool's vault for base tokens
	// ··········· Will be fully drained during migration
	//
	// [26] = [WRITE] quote_vault
	// ··········· The pool's vault for quote tokens
	// ··········· Will be fully drained during migration
	//
	// [27] = [WRITE] pool_lp_token
	//
	// [28] = [] spl_token_program
	// ··········· SPL Token program for the base token
	// ··········· Must be the standard Token program
	//
	// [29] = [] associated_token_program
	// ··········· Program to create an ATA for receiving fee NFT
	//
	// [30] = [] system_program
	// ··········· Required for account creation
	//
	// [31] = [] rent_program
	// ··········· Required for rent exempt calculations
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMigrateToAmmInstructionBuilder creates a new `MigrateToAmm` instruction builder.
func NewMigrateToAmmInstructionBuilder() *MigrateToAmm {
	nd := &MigrateToAmm{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 32),
	}
	nd.AccountMetaSlice[3] = ag_solanago.Meta(Addresses["srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX"])
	nd.AccountMetaSlice[12] = ag_solanago.Meta(Addresses["675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8"])
	nd.AccountMetaSlice[28] = ag_solanago.Meta(Addresses["TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"])
	nd.AccountMetaSlice[29] = ag_solanago.Meta(Addresses["ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"])
	nd.AccountMetaSlice[30] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	nd.AccountMetaSlice[31] = ag_solanago.Meta(Addresses["SysvarRent111111111111111111111111111111111"])
	return nd
}

// SetBaseLotSize sets the "base_lot_size" parameter.
func (inst *MigrateToAmm) SetBaseLotSize(base_lot_size uint64) *MigrateToAmm {
	inst.BaseLotSize = &base_lot_size
	return inst
}

// SetQuoteLotSize sets the "quote_lot_size" parameter.
func (inst *MigrateToAmm) SetQuoteLotSize(quote_lot_size uint64) *MigrateToAmm {
	inst.QuoteLotSize = &quote_lot_size
	return inst
}

// SetMarketVaultSignerNonce sets the "market_vault_signer_nonce" parameter.
func (inst *MigrateToAmm) SetMarketVaultSignerNonce(market_vault_signer_nonce uint8) *MigrateToAmm {
	inst.MarketVaultSignerNonce = &market_vault_signer_nonce
	return inst
}

// SetPayerAccount sets the "payer" account.
// Only migrate_to_amm_wallet can migrate to cpswap pool
// This signer must match the migrate_to_amm_wallet saved in global_config
func (inst *MigrateToAmm) SetPayerAccount(payer ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// Only migrate_to_amm_wallet can migrate to cpswap pool
// This signer must match the migrate_to_amm_wallet saved in global_config
func (inst *MigrateToAmm) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetBaseMintAccount sets the "base_mint" account.
// The mint for the base token (token being sold)
func (inst *MigrateToAmm) SetBaseMintAccount(baseMint ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(baseMint)
	return inst
}

// GetBaseMintAccount gets the "base_mint" account.
// The mint for the base token (token being sold)
func (inst *MigrateToAmm) GetBaseMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetQuoteMintAccount sets the "quote_mint" account.
// The mint for the quote token (token used to buy)
func (inst *MigrateToAmm) SetQuoteMintAccount(quoteMint ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(quoteMint)
	return inst
}

// GetQuoteMintAccount gets the "quote_mint" account.
// The mint for the quote token (token used to buy)
func (inst *MigrateToAmm) GetQuoteMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetOpenbookProgramAccount sets the "openbook_program" account.
func (inst *MigrateToAmm) SetOpenbookProgramAccount(openbookProgram ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(openbookProgram)
	return inst
}

// GetOpenbookProgramAccount gets the "openbook_program" account.
func (inst *MigrateToAmm) GetOpenbookProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetMarketAccount sets the "market" account.
// Account created and asigned to openbook_program but not been initialized
func (inst *MigrateToAmm) SetMarketAccount(market ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(market).WRITE()
	return inst
}

// GetMarketAccount gets the "market" account.
// Account created and asigned to openbook_program but not been initialized
func (inst *MigrateToAmm) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetRequestQueueAccount sets the "request_queue" account.
// Account created and asigned to openbook_program but not been initialized
func (inst *MigrateToAmm) SetRequestQueueAccount(requestQueue ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(requestQueue).WRITE()
	return inst
}

// GetRequestQueueAccount gets the "request_queue" account.
// Account created and asigned to openbook_program but not been initialized
func (inst *MigrateToAmm) GetRequestQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetEventQueueAccount sets the "event_queue" account.
// Account created and asigned to openbook_program but not been initialized
func (inst *MigrateToAmm) SetEventQueueAccount(eventQueue ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(eventQueue).WRITE()
	return inst
}

// GetEventQueueAccount gets the "event_queue" account.
// Account created and asigned to openbook_program but not been initialized
func (inst *MigrateToAmm) GetEventQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetBidsAccount sets the "bids" account.
// Account created and asigned to openbook_program but not been initialized
func (inst *MigrateToAmm) SetBidsAccount(bids ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(bids).WRITE()
	return inst
}

// GetBidsAccount gets the "bids" account.
// Account created and asigned to openbook_program but not been initialized
func (inst *MigrateToAmm) GetBidsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetAsksAccount sets the "asks" account.
// Account created and asigned to openbook_program but not been initialized
func (inst *MigrateToAmm) SetAsksAccount(asks ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(asks).WRITE()
	return inst
}

// GetAsksAccount gets the "asks" account.
// Account created and asigned to openbook_program but not been initialized
func (inst *MigrateToAmm) GetAsksAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetMarketVaultSignerAccount sets the "market_vault_signer" account.
func (inst *MigrateToAmm) SetMarketVaultSignerAccount(marketVaultSigner ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(marketVaultSigner)
	return inst
}

// GetMarketVaultSignerAccount gets the "market_vault_signer" account.
func (inst *MigrateToAmm) GetMarketVaultSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetMarketBaseVaultAccount sets the "market_base_vault" account.
// Token account that holds the market's base tokens
func (inst *MigrateToAmm) SetMarketBaseVaultAccount(marketBaseVault ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(marketBaseVault).WRITE()
	return inst
}

// GetMarketBaseVaultAccount gets the "market_base_vault" account.
// Token account that holds the market's base tokens
func (inst *MigrateToAmm) GetMarketBaseVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetMarketQuoteVaultAccount sets the "market_quote_vault" account.
// Token account that holds the market's quote tokens
func (inst *MigrateToAmm) SetMarketQuoteVaultAccount(marketQuoteVault ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(marketQuoteVault).WRITE()
	return inst
}

// GetMarketQuoteVaultAccount gets the "market_quote_vault" account.
// Token account that holds the market's quote tokens
func (inst *MigrateToAmm) GetMarketQuoteVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetAmmProgramAccount sets the "amm_program" account.
func (inst *MigrateToAmm) SetAmmProgramAccount(ammProgram ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(ammProgram)
	return inst
}

// GetAmmProgramAccount gets the "amm_program" account.
func (inst *MigrateToAmm) GetAmmProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetAmmPoolAccount sets the "amm_pool" account.
func (inst *MigrateToAmm) SetAmmPoolAccount(ammPool ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(ammPool).WRITE()
	return inst
}

func (inst *MigrateToAmm) findFindAmmPoolAddress(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// path: ammProgram
	seeds = append(seeds, ammProgram.Bytes())
	// path: market
	seeds = append(seeds, market.Bytes())
	// const: amm_associated_seed
	seeds = append(seeds, []byte{byte(0x61), byte(0x6d), byte(0x6d), byte(0x5f), byte(0x61), byte(0x73), byte(0x73), byte(0x6f), byte(0x63), byte(0x69), byte(0x61), byte(0x74), byte(0x65), byte(0x64), byte(0x5f), byte(0x73), byte(0x65), byte(0x65), byte(0x64)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindAmmPoolAddressWithBumpSeed calculates AmmPool account address with given seeds and a known bump seed.
func (inst *MigrateToAmm) FindAmmPoolAddressWithBumpSeed(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindAmmPoolAddress(ammProgram, market, bumpSeed)
	return
}

func (inst *MigrateToAmm) MustFindAmmPoolAddressWithBumpSeed(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAmmPoolAddress(ammProgram, market, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindAmmPoolAddress finds AmmPool account address with given seeds.
func (inst *MigrateToAmm) FindAmmPoolAddress(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindAmmPoolAddress(ammProgram, market, 0)
	return
}

func (inst *MigrateToAmm) MustFindAmmPoolAddress(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAmmPoolAddress(ammProgram, market, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetAmmPoolAccount gets the "amm_pool" account.
func (inst *MigrateToAmm) GetAmmPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetAmmAuthorityAccount sets the "amm_authority" account.
func (inst *MigrateToAmm) SetAmmAuthorityAccount(ammAuthority ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(ammAuthority)
	return inst
}

func (inst *MigrateToAmm) findFindAmmAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: amm authority
	seeds = append(seeds, []byte{byte(0x61), byte(0x6d), byte(0x6d), byte(0x20), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindAmmAuthorityAddressWithBumpSeed calculates AmmAuthority account address with given seeds and a known bump seed.
func (inst *MigrateToAmm) FindAmmAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindAmmAuthorityAddress(bumpSeed)
	return
}

func (inst *MigrateToAmm) MustFindAmmAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAmmAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindAmmAuthorityAddress finds AmmAuthority account address with given seeds.
func (inst *MigrateToAmm) FindAmmAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindAmmAuthorityAddress(0)
	return
}

func (inst *MigrateToAmm) MustFindAmmAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAmmAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetAmmAuthorityAccount gets the "amm_authority" account.
func (inst *MigrateToAmm) GetAmmAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetAmmOpenOrdersAccount sets the "amm_open_orders" account.
func (inst *MigrateToAmm) SetAmmOpenOrdersAccount(ammOpenOrders ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(ammOpenOrders).WRITE()
	return inst
}

func (inst *MigrateToAmm) findFindAmmOpenOrdersAddress(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// path: ammProgram
	seeds = append(seeds, ammProgram.Bytes())
	// path: market
	seeds = append(seeds, market.Bytes())
	// const: open_order_associated_seed
	seeds = append(seeds, []byte{byte(0x6f), byte(0x70), byte(0x65), byte(0x6e), byte(0x5f), byte(0x6f), byte(0x72), byte(0x64), byte(0x65), byte(0x72), byte(0x5f), byte(0x61), byte(0x73), byte(0x73), byte(0x6f), byte(0x63), byte(0x69), byte(0x61), byte(0x74), byte(0x65), byte(0x64), byte(0x5f), byte(0x73), byte(0x65), byte(0x65), byte(0x64)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindAmmOpenOrdersAddressWithBumpSeed calculates AmmOpenOrders account address with given seeds and a known bump seed.
func (inst *MigrateToAmm) FindAmmOpenOrdersAddressWithBumpSeed(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindAmmOpenOrdersAddress(ammProgram, market, bumpSeed)
	return
}

func (inst *MigrateToAmm) MustFindAmmOpenOrdersAddressWithBumpSeed(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAmmOpenOrdersAddress(ammProgram, market, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindAmmOpenOrdersAddress finds AmmOpenOrders account address with given seeds.
func (inst *MigrateToAmm) FindAmmOpenOrdersAddress(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindAmmOpenOrdersAddress(ammProgram, market, 0)
	return
}

func (inst *MigrateToAmm) MustFindAmmOpenOrdersAddress(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAmmOpenOrdersAddress(ammProgram, market, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetAmmOpenOrdersAccount gets the "amm_open_orders" account.
func (inst *MigrateToAmm) GetAmmOpenOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetAmmLpMintAccount sets the "amm_lp_mint" account.
func (inst *MigrateToAmm) SetAmmLpMintAccount(ammLpMint ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(ammLpMint).WRITE()
	return inst
}

func (inst *MigrateToAmm) findFindAmmLpMintAddress(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// path: ammProgram
	seeds = append(seeds, ammProgram.Bytes())
	// path: market
	seeds = append(seeds, market.Bytes())
	// const: lp_mint_associated_seed
	seeds = append(seeds, []byte{byte(0x6c), byte(0x70), byte(0x5f), byte(0x6d), byte(0x69), byte(0x6e), byte(0x74), byte(0x5f), byte(0x61), byte(0x73), byte(0x73), byte(0x6f), byte(0x63), byte(0x69), byte(0x61), byte(0x74), byte(0x65), byte(0x64), byte(0x5f), byte(0x73), byte(0x65), byte(0x65), byte(0x64)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindAmmLpMintAddressWithBumpSeed calculates AmmLpMint account address with given seeds and a known bump seed.
func (inst *MigrateToAmm) FindAmmLpMintAddressWithBumpSeed(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindAmmLpMintAddress(ammProgram, market, bumpSeed)
	return
}

func (inst *MigrateToAmm) MustFindAmmLpMintAddressWithBumpSeed(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAmmLpMintAddress(ammProgram, market, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindAmmLpMintAddress finds AmmLpMint account address with given seeds.
func (inst *MigrateToAmm) FindAmmLpMintAddress(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindAmmLpMintAddress(ammProgram, market, 0)
	return
}

func (inst *MigrateToAmm) MustFindAmmLpMintAddress(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAmmLpMintAddress(ammProgram, market, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetAmmLpMintAccount gets the "amm_lp_mint" account.
func (inst *MigrateToAmm) GetAmmLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetAmmBaseVaultAccount sets the "amm_base_vault" account.
func (inst *MigrateToAmm) SetAmmBaseVaultAccount(ammBaseVault ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(ammBaseVault).WRITE()
	return inst
}

func (inst *MigrateToAmm) findFindAmmBaseVaultAddress(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// path: ammProgram
	seeds = append(seeds, ammProgram.Bytes())
	// path: market
	seeds = append(seeds, market.Bytes())
	// const: coin_vault_associated_seed
	seeds = append(seeds, []byte{byte(0x63), byte(0x6f), byte(0x69), byte(0x6e), byte(0x5f), byte(0x76), byte(0x61), byte(0x75), byte(0x6c), byte(0x74), byte(0x5f), byte(0x61), byte(0x73), byte(0x73), byte(0x6f), byte(0x63), byte(0x69), byte(0x61), byte(0x74), byte(0x65), byte(0x64), byte(0x5f), byte(0x73), byte(0x65), byte(0x65), byte(0x64)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindAmmBaseVaultAddressWithBumpSeed calculates AmmBaseVault account address with given seeds and a known bump seed.
func (inst *MigrateToAmm) FindAmmBaseVaultAddressWithBumpSeed(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindAmmBaseVaultAddress(ammProgram, market, bumpSeed)
	return
}

func (inst *MigrateToAmm) MustFindAmmBaseVaultAddressWithBumpSeed(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAmmBaseVaultAddress(ammProgram, market, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindAmmBaseVaultAddress finds AmmBaseVault account address with given seeds.
func (inst *MigrateToAmm) FindAmmBaseVaultAddress(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindAmmBaseVaultAddress(ammProgram, market, 0)
	return
}

func (inst *MigrateToAmm) MustFindAmmBaseVaultAddress(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAmmBaseVaultAddress(ammProgram, market, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetAmmBaseVaultAccount gets the "amm_base_vault" account.
func (inst *MigrateToAmm) GetAmmBaseVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

// SetAmmQuoteVaultAccount sets the "amm_quote_vault" account.
func (inst *MigrateToAmm) SetAmmQuoteVaultAccount(ammQuoteVault ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(ammQuoteVault).WRITE()
	return inst
}

func (inst *MigrateToAmm) findFindAmmQuoteVaultAddress(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// path: ammProgram
	seeds = append(seeds, ammProgram.Bytes())
	// path: market
	seeds = append(seeds, market.Bytes())
	// const: pc_vault_associated_seed
	seeds = append(seeds, []byte{byte(0x70), byte(0x63), byte(0x5f), byte(0x76), byte(0x61), byte(0x75), byte(0x6c), byte(0x74), byte(0x5f), byte(0x61), byte(0x73), byte(0x73), byte(0x6f), byte(0x63), byte(0x69), byte(0x61), byte(0x74), byte(0x65), byte(0x64), byte(0x5f), byte(0x73), byte(0x65), byte(0x65), byte(0x64)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindAmmQuoteVaultAddressWithBumpSeed calculates AmmQuoteVault account address with given seeds and a known bump seed.
func (inst *MigrateToAmm) FindAmmQuoteVaultAddressWithBumpSeed(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindAmmQuoteVaultAddress(ammProgram, market, bumpSeed)
	return
}

func (inst *MigrateToAmm) MustFindAmmQuoteVaultAddressWithBumpSeed(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAmmQuoteVaultAddress(ammProgram, market, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindAmmQuoteVaultAddress finds AmmQuoteVault account address with given seeds.
func (inst *MigrateToAmm) FindAmmQuoteVaultAddress(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindAmmQuoteVaultAddress(ammProgram, market, 0)
	return
}

func (inst *MigrateToAmm) MustFindAmmQuoteVaultAddress(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAmmQuoteVaultAddress(ammProgram, market, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetAmmQuoteVaultAccount gets the "amm_quote_vault" account.
func (inst *MigrateToAmm) GetAmmQuoteVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(18)
}

// SetAmmTargetOrdersAccount sets the "amm_target_orders" account.
func (inst *MigrateToAmm) SetAmmTargetOrdersAccount(ammTargetOrders ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[19] = ag_solanago.Meta(ammTargetOrders).WRITE()
	return inst
}

func (inst *MigrateToAmm) findFindAmmTargetOrdersAddress(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// path: ammProgram
	seeds = append(seeds, ammProgram.Bytes())
	// path: market
	seeds = append(seeds, market.Bytes())
	// const: target_associated_seed
	seeds = append(seeds, []byte{byte(0x74), byte(0x61), byte(0x72), byte(0x67), byte(0x65), byte(0x74), byte(0x5f), byte(0x61), byte(0x73), byte(0x73), byte(0x6f), byte(0x63), byte(0x69), byte(0x61), byte(0x74), byte(0x65), byte(0x64), byte(0x5f), byte(0x73), byte(0x65), byte(0x65), byte(0x64)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindAmmTargetOrdersAddressWithBumpSeed calculates AmmTargetOrders account address with given seeds and a known bump seed.
func (inst *MigrateToAmm) FindAmmTargetOrdersAddressWithBumpSeed(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindAmmTargetOrdersAddress(ammProgram, market, bumpSeed)
	return
}

func (inst *MigrateToAmm) MustFindAmmTargetOrdersAddressWithBumpSeed(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAmmTargetOrdersAddress(ammProgram, market, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindAmmTargetOrdersAddress finds AmmTargetOrders account address with given seeds.
func (inst *MigrateToAmm) FindAmmTargetOrdersAddress(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindAmmTargetOrdersAddress(ammProgram, market, 0)
	return
}

func (inst *MigrateToAmm) MustFindAmmTargetOrdersAddress(ammProgram ag_solanago.PublicKey, market ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAmmTargetOrdersAddress(ammProgram, market, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetAmmTargetOrdersAccount gets the "amm_target_orders" account.
func (inst *MigrateToAmm) GetAmmTargetOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(19)
}

// SetAmmConfigAccount sets the "amm_config" account.
func (inst *MigrateToAmm) SetAmmConfigAccount(ammConfig ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[20] = ag_solanago.Meta(ammConfig)
	return inst
}

func (inst *MigrateToAmm) findFindAmmConfigAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: amm_config_account_seed
	seeds = append(seeds, []byte{byte(0x61), byte(0x6d), byte(0x6d), byte(0x5f), byte(0x63), byte(0x6f), byte(0x6e), byte(0x66), byte(0x69), byte(0x67), byte(0x5f), byte(0x61), byte(0x63), byte(0x63), byte(0x6f), byte(0x75), byte(0x6e), byte(0x74), byte(0x5f), byte(0x73), byte(0x65), byte(0x65), byte(0x64)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindAmmConfigAddressWithBumpSeed calculates AmmConfig account address with given seeds and a known bump seed.
func (inst *MigrateToAmm) FindAmmConfigAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindAmmConfigAddress(bumpSeed)
	return
}

func (inst *MigrateToAmm) MustFindAmmConfigAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAmmConfigAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindAmmConfigAddress finds AmmConfig account address with given seeds.
func (inst *MigrateToAmm) FindAmmConfigAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindAmmConfigAddress(0)
	return
}

func (inst *MigrateToAmm) MustFindAmmConfigAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAmmConfigAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetAmmConfigAccount gets the "amm_config" account.
func (inst *MigrateToAmm) GetAmmConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(20)
}

// SetAmmCreateFeeDestinationAccount sets the "amm_create_fee_destination" account.
func (inst *MigrateToAmm) SetAmmCreateFeeDestinationAccount(ammCreateFeeDestination ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[21] = ag_solanago.Meta(ammCreateFeeDestination).WRITE()
	return inst
}

// GetAmmCreateFeeDestinationAccount gets the "amm_create_fee_destination" account.
func (inst *MigrateToAmm) GetAmmCreateFeeDestinationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(21)
}

// SetAuthorityAccount sets the "authority" account.
// PDA that acts as the authority for pool vault operations
// Generated using AUTH_SEED
func (inst *MigrateToAmm) SetAuthorityAccount(authority ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[22] = ag_solanago.Meta(authority).WRITE()
	return inst
}

func (inst *MigrateToAmm) findFindAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: vault_auth_seed
	seeds = append(seeds, []byte{byte(0x76), byte(0x61), byte(0x75), byte(0x6c), byte(0x74), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x5f), byte(0x73), byte(0x65), byte(0x65), byte(0x64)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindAuthorityAddressWithBumpSeed calculates Authority account address with given seeds and a known bump seed.
func (inst *MigrateToAmm) FindAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindAuthorityAddress(bumpSeed)
	return
}

func (inst *MigrateToAmm) MustFindAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindAuthorityAddress finds Authority account address with given seeds.
func (inst *MigrateToAmm) FindAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindAuthorityAddress(0)
	return
}

func (inst *MigrateToAmm) MustFindAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetAuthorityAccount gets the "authority" account.
// PDA that acts as the authority for pool vault operations
// Generated using AUTH_SEED
func (inst *MigrateToAmm) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(22)
}

// SetPoolStateAccount sets the "pool_state" account.
// Account that stores the pool's state and parameters
// PDA generated using POOL_SEED and both token mints
func (inst *MigrateToAmm) SetPoolStateAccount(poolState ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[23] = ag_solanago.Meta(poolState).WRITE()
	return inst
}

func (inst *MigrateToAmm) findFindPoolStateAddress(baseMint ag_solanago.PublicKey, quoteMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: pool
	seeds = append(seeds, []byte{byte(0x70), byte(0x6f), byte(0x6f), byte(0x6c)})
	// path: baseMint
	seeds = append(seeds, baseMint.Bytes())
	// path: quoteMint
	seeds = append(seeds, quoteMint.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindPoolStateAddressWithBumpSeed calculates PoolState account address with given seeds and a known bump seed.
func (inst *MigrateToAmm) FindPoolStateAddressWithBumpSeed(baseMint ag_solanago.PublicKey, quoteMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindPoolStateAddress(baseMint, quoteMint, bumpSeed)
	return
}

func (inst *MigrateToAmm) MustFindPoolStateAddressWithBumpSeed(baseMint ag_solanago.PublicKey, quoteMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindPoolStateAddress(baseMint, quoteMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindPoolStateAddress finds PoolState account address with given seeds.
func (inst *MigrateToAmm) FindPoolStateAddress(baseMint ag_solanago.PublicKey, quoteMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindPoolStateAddress(baseMint, quoteMint, 0)
	return
}

func (inst *MigrateToAmm) MustFindPoolStateAddress(baseMint ag_solanago.PublicKey, quoteMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindPoolStateAddress(baseMint, quoteMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetPoolStateAccount gets the "pool_state" account.
// Account that stores the pool's state and parameters
// PDA generated using POOL_SEED and both token mints
func (inst *MigrateToAmm) GetPoolStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(23)
}

// SetGlobalConfigAccount sets the "global_config" account.
// Global config account stores owner
func (inst *MigrateToAmm) SetGlobalConfigAccount(globalConfig ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[24] = ag_solanago.Meta(globalConfig)
	return inst
}

// GetGlobalConfigAccount gets the "global_config" account.
// Global config account stores owner
func (inst *MigrateToAmm) GetGlobalConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(24)
}

// SetBaseVaultAccount sets the "base_vault" account.
// The pool's vault for base tokens
// Will be fully drained during migration
func (inst *MigrateToAmm) SetBaseVaultAccount(baseVault ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[25] = ag_solanago.Meta(baseVault).WRITE()
	return inst
}

// GetBaseVaultAccount gets the "base_vault" account.
// The pool's vault for base tokens
// Will be fully drained during migration
func (inst *MigrateToAmm) GetBaseVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(25)
}

// SetQuoteVaultAccount sets the "quote_vault" account.
// The pool's vault for quote tokens
// Will be fully drained during migration
func (inst *MigrateToAmm) SetQuoteVaultAccount(quoteVault ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[26] = ag_solanago.Meta(quoteVault).WRITE()
	return inst
}

// GetQuoteVaultAccount gets the "quote_vault" account.
// The pool's vault for quote tokens
// Will be fully drained during migration
func (inst *MigrateToAmm) GetQuoteVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(26)
}

// SetPoolLpTokenAccount sets the "pool_lp_token" account.
func (inst *MigrateToAmm) SetPoolLpTokenAccount(poolLpToken ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[27] = ag_solanago.Meta(poolLpToken).WRITE()
	return inst
}

// GetPoolLpTokenAccount gets the "pool_lp_token" account.
func (inst *MigrateToAmm) GetPoolLpTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(27)
}

// SetSplTokenProgramAccount sets the "spl_token_program" account.
// SPL Token program for the base token
// Must be the standard Token program
func (inst *MigrateToAmm) SetSplTokenProgramAccount(splTokenProgram ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[28] = ag_solanago.Meta(splTokenProgram)
	return inst
}

// GetSplTokenProgramAccount gets the "spl_token_program" account.
// SPL Token program for the base token
// Must be the standard Token program
func (inst *MigrateToAmm) GetSplTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(28)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
// Program to create an ATA for receiving fee NFT
func (inst *MigrateToAmm) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[29] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
// Program to create an ATA for receiving fee NFT
func (inst *MigrateToAmm) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(29)
}

// SetSystemProgramAccount sets the "system_program" account.
// Required for account creation
func (inst *MigrateToAmm) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[30] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
// Required for account creation
func (inst *MigrateToAmm) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(30)
}

// SetRentProgramAccount sets the "rent_program" account.
// Required for rent exempt calculations
func (inst *MigrateToAmm) SetRentProgramAccount(rentProgram ag_solanago.PublicKey) *MigrateToAmm {
	inst.AccountMetaSlice[31] = ag_solanago.Meta(rentProgram)
	return inst
}

// GetRentProgramAccount gets the "rent_program" account.
// Required for rent exempt calculations
func (inst *MigrateToAmm) GetRentProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(31)
}

func (inst MigrateToAmm) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MigrateToAmm,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MigrateToAmm) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MigrateToAmm) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.BaseLotSize == nil {
			return errors.New("BaseLotSize parameter is not set")
		}
		if inst.QuoteLotSize == nil {
			return errors.New("QuoteLotSize parameter is not set")
		}
		if inst.MarketVaultSignerNonce == nil {
			return errors.New("MarketVaultSignerNonce parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.BaseMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.QuoteMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.OpenbookProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Market is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.RequestQueue is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.EventQueue is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Bids is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Asks is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.MarketVaultSigner is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.MarketBaseVault is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.MarketQuoteVault is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.AmmProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.AmmPool is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.AmmAuthority is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.AmmOpenOrders is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.AmmLpMint is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.AmmBaseVault is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.AmmQuoteVault is not set")
		}
		if inst.AccountMetaSlice[19] == nil {
			return errors.New("accounts.AmmTargetOrders is not set")
		}
		if inst.AccountMetaSlice[20] == nil {
			return errors.New("accounts.AmmConfig is not set")
		}
		if inst.AccountMetaSlice[21] == nil {
			return errors.New("accounts.AmmCreateFeeDestination is not set")
		}
		if inst.AccountMetaSlice[22] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[23] == nil {
			return errors.New("accounts.PoolState is not set")
		}
		if inst.AccountMetaSlice[24] == nil {
			return errors.New("accounts.GlobalConfig is not set")
		}
		if inst.AccountMetaSlice[25] == nil {
			return errors.New("accounts.BaseVault is not set")
		}
		if inst.AccountMetaSlice[26] == nil {
			return errors.New("accounts.QuoteVault is not set")
		}
		if inst.AccountMetaSlice[27] == nil {
			return errors.New("accounts.PoolLpToken is not set")
		}
		if inst.AccountMetaSlice[28] == nil {
			return errors.New("accounts.SplTokenProgram is not set")
		}
		if inst.AccountMetaSlice[29] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[30] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[31] == nil {
			return errors.New("accounts.RentProgram is not set")
		}
	}
	return nil
}

func (inst *MigrateToAmm) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MigrateToAmm")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("              BaseLotSize", *inst.BaseLotSize))
						paramsBranch.Child(ag_format.Param("             QuoteLotSize", *inst.QuoteLotSize))
						paramsBranch.Child(ag_format.Param("   MarketVaultSignerNonce", *inst.MarketVaultSignerNonce))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=32]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                     payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                 base_mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                quote_mint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("          openbook_program", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                    market", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("             request_queue", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("               event_queue", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                      bids", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                      asks", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("       market_vault_signer", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("         market_base_vault", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("        market_quote_vault", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("               amm_program", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("                  amm_pool", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("             amm_authority", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("           amm_open_orders", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("               amm_lp_mint", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("            amm_base_vault", inst.AccountMetaSlice.Get(17)))
						accountsBranch.Child(ag_format.Meta("           amm_quote_vault", inst.AccountMetaSlice.Get(18)))
						accountsBranch.Child(ag_format.Meta("         amm_target_orders", inst.AccountMetaSlice.Get(19)))
						accountsBranch.Child(ag_format.Meta("                amm_config", inst.AccountMetaSlice.Get(20)))
						accountsBranch.Child(ag_format.Meta("amm_create_fee_destination", inst.AccountMetaSlice.Get(21)))
						accountsBranch.Child(ag_format.Meta("                 authority", inst.AccountMetaSlice.Get(22)))
						accountsBranch.Child(ag_format.Meta("                pool_state", inst.AccountMetaSlice.Get(23)))
						accountsBranch.Child(ag_format.Meta("             global_config", inst.AccountMetaSlice.Get(24)))
						accountsBranch.Child(ag_format.Meta("                base_vault", inst.AccountMetaSlice.Get(25)))
						accountsBranch.Child(ag_format.Meta("               quote_vault", inst.AccountMetaSlice.Get(26)))
						accountsBranch.Child(ag_format.Meta("             pool_lp_token", inst.AccountMetaSlice.Get(27)))
						accountsBranch.Child(ag_format.Meta("         spl_token_program", inst.AccountMetaSlice.Get(28)))
						accountsBranch.Child(ag_format.Meta("  associated_token_program", inst.AccountMetaSlice.Get(29)))
						accountsBranch.Child(ag_format.Meta("            system_program", inst.AccountMetaSlice.Get(30)))
						accountsBranch.Child(ag_format.Meta("              rent_program", inst.AccountMetaSlice.Get(31)))
					})
				})
		})
}

func (obj MigrateToAmm) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BaseLotSize` param:
	err = encoder.Encode(obj.BaseLotSize)
	if err != nil {
		return err
	}
	// Serialize `QuoteLotSize` param:
	err = encoder.Encode(obj.QuoteLotSize)
	if err != nil {
		return err
	}
	// Serialize `MarketVaultSignerNonce` param:
	err = encoder.Encode(obj.MarketVaultSignerNonce)
	if err != nil {
		return err
	}
	return nil
}
func (obj *MigrateToAmm) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BaseLotSize`:
	err = decoder.Decode(&obj.BaseLotSize)
	if err != nil {
		return err
	}
	// Deserialize `QuoteLotSize`:
	err = decoder.Decode(&obj.QuoteLotSize)
	if err != nil {
		return err
	}
	// Deserialize `MarketVaultSignerNonce`:
	err = decoder.Decode(&obj.MarketVaultSignerNonce)
	if err != nil {
		return err
	}
	return nil
}

// NewMigrateToAmmInstruction declares a new MigrateToAmm instruction with the provided parameters and accounts.
func NewMigrateToAmmInstruction(
	// Parameters:
	base_lot_size uint64,
	quote_lot_size uint64,
	market_vault_signer_nonce uint8,
	// Accounts:
	payer ag_solanago.PublicKey,
	baseMint ag_solanago.PublicKey,
	quoteMint ag_solanago.PublicKey,
	openbookProgram ag_solanago.PublicKey,
	market ag_solanago.PublicKey,
	requestQueue ag_solanago.PublicKey,
	eventQueue ag_solanago.PublicKey,
	bids ag_solanago.PublicKey,
	asks ag_solanago.PublicKey,
	marketVaultSigner ag_solanago.PublicKey,
	marketBaseVault ag_solanago.PublicKey,
	marketQuoteVault ag_solanago.PublicKey,
	ammProgram ag_solanago.PublicKey,
	ammPool ag_solanago.PublicKey,
	ammAuthority ag_solanago.PublicKey,
	ammOpenOrders ag_solanago.PublicKey,
	ammLpMint ag_solanago.PublicKey,
	ammBaseVault ag_solanago.PublicKey,
	ammQuoteVault ag_solanago.PublicKey,
	ammTargetOrders ag_solanago.PublicKey,
	ammConfig ag_solanago.PublicKey,
	ammCreateFeeDestination ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	globalConfig ag_solanago.PublicKey,
	baseVault ag_solanago.PublicKey,
	quoteVault ag_solanago.PublicKey,
	poolLpToken ag_solanago.PublicKey,
	splTokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rentProgram ag_solanago.PublicKey) *MigrateToAmm {
	return NewMigrateToAmmInstructionBuilder().
		SetBaseLotSize(base_lot_size).
		SetQuoteLotSize(quote_lot_size).
		SetMarketVaultSignerNonce(market_vault_signer_nonce).
		SetPayerAccount(payer).
		SetBaseMintAccount(baseMint).
		SetQuoteMintAccount(quoteMint).
		SetOpenbookProgramAccount(openbookProgram).
		SetMarketAccount(market).
		SetRequestQueueAccount(requestQueue).
		SetEventQueueAccount(eventQueue).
		SetBidsAccount(bids).
		SetAsksAccount(asks).
		SetMarketVaultSignerAccount(marketVaultSigner).
		SetMarketBaseVaultAccount(marketBaseVault).
		SetMarketQuoteVaultAccount(marketQuoteVault).
		SetAmmProgramAccount(ammProgram).
		SetAmmPoolAccount(ammPool).
		SetAmmAuthorityAccount(ammAuthority).
		SetAmmOpenOrdersAccount(ammOpenOrders).
		SetAmmLpMintAccount(ammLpMint).
		SetAmmBaseVaultAccount(ammBaseVault).
		SetAmmQuoteVaultAccount(ammQuoteVault).
		SetAmmTargetOrdersAccount(ammTargetOrders).
		SetAmmConfigAccount(ammConfig).
		SetAmmCreateFeeDestinationAccount(ammCreateFeeDestination).
		SetAuthorityAccount(authority).
		SetPoolStateAccount(poolState).
		SetGlobalConfigAccount(globalConfig).
		SetBaseVaultAccount(baseVault).
		SetQuoteVaultAccount(quoteVault).
		SetPoolLpTokenAccount(poolLpToken).
		SetSplTokenProgramAccount(splTokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentProgramAccount(rentProgram)
}
