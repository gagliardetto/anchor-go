// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Claim vested token
// # Arguments
type ClaimVestedToken struct {

	// [0] = [WRITE, SIGNER] beneficiary
	// ··········· The beneficiary of the vesting account
	//
	// [1] = [] authority
	// ··········· PDA that acts as the authority for pool vault and mint operations
	// ··········· Generated using AUTH_SEED
	//
	// [2] = [WRITE] pool_state
	// ··········· Account that stores the pool's state and parameters
	// ··········· PDA generated using POOL_SEED and both token mints
	//
	// [3] = [WRITE] vesting_record
	// ··········· The vesting record account
	//
	// [4] = [WRITE] base_vault
	// ··········· The pool's vault for base tokens
	// ··········· Will be debited to send tokens to the user
	//
	// [5] = [WRITE, SIGNER] user_base_token
	//
	// [6] = [] base_token_mint
	// ··········· The mint for the base token (token being sold)
	// ··········· Created in this instruction with specified decimals
	//
	// [7] = [] base_token_program
	// ··········· SPL Token program for the base token
	// ··········· Must be the standard Token program
	//
	// [8] = [] system_program
	// ··········· Required for account creation
	//
	// [9] = [] associated_token_program
	// ··········· Required for associated token program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewClaimVestedTokenInstructionBuilder creates a new `ClaimVestedToken` instruction builder.
func NewClaimVestedTokenInstructionBuilder() *ClaimVestedToken {
	nd := &ClaimVestedToken{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	nd.AccountMetaSlice[7] = ag_solanago.Meta(Addresses["TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"])
	nd.AccountMetaSlice[8] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	nd.AccountMetaSlice[9] = ag_solanago.Meta(Addresses["ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"])
	return nd
}

// SetBeneficiaryAccount sets the "beneficiary" account.
// The beneficiary of the vesting account
func (inst *ClaimVestedToken) SetBeneficiaryAccount(beneficiary ag_solanago.PublicKey) *ClaimVestedToken {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(beneficiary).WRITE().SIGNER()
	return inst
}

// GetBeneficiaryAccount gets the "beneficiary" account.
// The beneficiary of the vesting account
func (inst *ClaimVestedToken) GetBeneficiaryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
// PDA that acts as the authority for pool vault and mint operations
// Generated using AUTH_SEED
func (inst *ClaimVestedToken) SetAuthorityAccount(authority ag_solanago.PublicKey) *ClaimVestedToken {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority)
	return inst
}

// GetAuthorityAccount gets the "authority" account.
// PDA that acts as the authority for pool vault and mint operations
// Generated using AUTH_SEED
func (inst *ClaimVestedToken) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPoolStateAccount sets the "pool_state" account.
// Account that stores the pool's state and parameters
// PDA generated using POOL_SEED and both token mints
func (inst *ClaimVestedToken) SetPoolStateAccount(poolState ag_solanago.PublicKey) *ClaimVestedToken {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(poolState).WRITE()
	return inst
}

// GetPoolStateAccount gets the "pool_state" account.
// Account that stores the pool's state and parameters
// PDA generated using POOL_SEED and both token mints
func (inst *ClaimVestedToken) GetPoolStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetVestingRecordAccount sets the "vesting_record" account.
// The vesting record account
func (inst *ClaimVestedToken) SetVestingRecordAccount(vestingRecord ag_solanago.PublicKey) *ClaimVestedToken {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(vestingRecord).WRITE()
	return inst
}

// GetVestingRecordAccount gets the "vesting_record" account.
// The vesting record account
func (inst *ClaimVestedToken) GetVestingRecordAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetBaseVaultAccount sets the "base_vault" account.
// The pool's vault for base tokens
// Will be debited to send tokens to the user
func (inst *ClaimVestedToken) SetBaseVaultAccount(baseVault ag_solanago.PublicKey) *ClaimVestedToken {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(baseVault).WRITE()
	return inst
}

// GetBaseVaultAccount gets the "base_vault" account.
// The pool's vault for base tokens
// Will be debited to send tokens to the user
func (inst *ClaimVestedToken) GetBaseVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetUserBaseTokenAccount sets the "user_base_token" account.
func (inst *ClaimVestedToken) SetUserBaseTokenAccount(userBaseToken ag_solanago.PublicKey) *ClaimVestedToken {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(userBaseToken).WRITE().SIGNER()
	return inst
}

// GetUserBaseTokenAccount gets the "user_base_token" account.
func (inst *ClaimVestedToken) GetUserBaseTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetBaseTokenMintAccount sets the "base_token_mint" account.
// The mint for the base token (token being sold)
// Created in this instruction with specified decimals
func (inst *ClaimVestedToken) SetBaseTokenMintAccount(baseTokenMint ag_solanago.PublicKey) *ClaimVestedToken {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(baseTokenMint)
	return inst
}

// GetBaseTokenMintAccount gets the "base_token_mint" account.
// The mint for the base token (token being sold)
// Created in this instruction with specified decimals
func (inst *ClaimVestedToken) GetBaseTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetBaseTokenProgramAccount sets the "base_token_program" account.
// SPL Token program for the base token
// Must be the standard Token program
func (inst *ClaimVestedToken) SetBaseTokenProgramAccount(baseTokenProgram ag_solanago.PublicKey) *ClaimVestedToken {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(baseTokenProgram)
	return inst
}

// GetBaseTokenProgramAccount gets the "base_token_program" account.
// SPL Token program for the base token
// Must be the standard Token program
func (inst *ClaimVestedToken) GetBaseTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSystemProgramAccount sets the "system_program" account.
// Required for account creation
func (inst *ClaimVestedToken) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *ClaimVestedToken {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
// Required for account creation
func (inst *ClaimVestedToken) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
// Required for associated token program
func (inst *ClaimVestedToken) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *ClaimVestedToken {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
// Required for associated token program
func (inst *ClaimVestedToken) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst ClaimVestedToken) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ClaimVestedToken,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ClaimVestedToken) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ClaimVestedToken) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Beneficiary is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PoolState is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.VestingRecord is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.BaseVault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.UserBaseToken is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.BaseTokenMint is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.BaseTokenProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
	}
	return nil
}

func (inst *ClaimVestedToken) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ClaimVestedToken")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("             beneficiary", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("               authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("              pool_state", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("          vesting_record", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("              base_vault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         user_base_token", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("         base_token_mint", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("      base_token_program", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("          system_program", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("associated_token_program", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj ClaimVestedToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *ClaimVestedToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewClaimVestedTokenInstruction declares a new ClaimVestedToken instruction with the provided parameters and accounts.
func NewClaimVestedTokenInstruction(
	// Accounts:
	beneficiary ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	vestingRecord ag_solanago.PublicKey,
	baseVault ag_solanago.PublicKey,
	userBaseToken ag_solanago.PublicKey,
	baseTokenMint ag_solanago.PublicKey,
	baseTokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey) *ClaimVestedToken {
	return NewClaimVestedTokenInstructionBuilder().
		SetBeneficiaryAccount(beneficiary).
		SetAuthorityAccount(authority).
		SetPoolStateAccount(poolState).
		SetVestingRecordAccount(vestingRecord).
		SetBaseVaultAccount(baseVault).
		SetUserBaseTokenAccount(userBaseToken).
		SetBaseTokenMintAccount(baseTokenMint).
		SetBaseTokenProgramAccount(baseTokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram)
}
