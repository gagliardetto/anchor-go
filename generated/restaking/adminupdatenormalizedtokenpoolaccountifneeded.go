// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package restaking

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AdminUpdateNormalizedTokenPoolAccountIfNeeded is the `admin_update_normalized_token_pool_account_if_needed` instruction.
type AdminUpdateNormalizedTokenPoolAccountIfNeeded struct {

	// [0] = [WRITE, SIGNER] payer
	//
	// [1] = [SIGNER] admin
	//
	// [2] = [] system_program
	//
	// [3] = [] normalized_token_program
	//
	// [4] = [] normalized_token_mint
	//
	// [5] = [WRITE] normalized_token_pool_account
	//
	// [6] = [] event_authority
	//
	// [7] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAdminUpdateNormalizedTokenPoolAccountIfNeededInstructionBuilder creates a new `AdminUpdateNormalizedTokenPoolAccountIfNeeded` instruction builder.
func NewAdminUpdateNormalizedTokenPoolAccountIfNeededInstructionBuilder() *AdminUpdateNormalizedTokenPoolAccountIfNeeded {
	nd := &AdminUpdateNormalizedTokenPoolAccountIfNeeded{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	nd.AccountMetaSlice[1] = ag_solanago.Meta(Addresses["fragkamrANLvuZYQPcmPsCATQAabkqNGH6gxqqPG3aP"]).SIGNER()
	nd.AccountMetaSlice[2] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	nd.AccountMetaSlice[3] = ag_solanago.Meta(Addresses["TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"])
	return nd
}

// SetPayerAccount sets the "payer" account.
func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) SetPayerAccount(payer ag_solanago.PublicKey) *AdminUpdateNormalizedTokenPoolAccountIfNeeded {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAdminAccount sets the "admin" account.
func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) SetAdminAccount(admin ag_solanago.PublicKey) *AdminUpdateNormalizedTokenPoolAccountIfNeeded {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AdminUpdateNormalizedTokenPoolAccountIfNeeded {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetNormalizedTokenProgramAccount sets the "normalized_token_program" account.
func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) SetNormalizedTokenProgramAccount(normalizedTokenProgram ag_solanago.PublicKey) *AdminUpdateNormalizedTokenPoolAccountIfNeeded {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(normalizedTokenProgram)
	return inst
}

// GetNormalizedTokenProgramAccount gets the "normalized_token_program" account.
func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) GetNormalizedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetNormalizedTokenMintAccount sets the "normalized_token_mint" account.
func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) SetNormalizedTokenMintAccount(normalizedTokenMint ag_solanago.PublicKey) *AdminUpdateNormalizedTokenPoolAccountIfNeeded {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(normalizedTokenMint)
	return inst
}

// GetNormalizedTokenMintAccount gets the "normalized_token_mint" account.
func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) GetNormalizedTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetNormalizedTokenPoolAccountAccount sets the "normalized_token_pool_account" account.
func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) SetNormalizedTokenPoolAccountAccount(normalizedTokenPoolAccount ag_solanago.PublicKey) *AdminUpdateNormalizedTokenPoolAccountIfNeeded {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(normalizedTokenPoolAccount).WRITE()
	return inst
}

func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) findFindNormalizedTokenPoolAccountAddress(normalizedTokenMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: nt_pool
	seeds = append(seeds, []byte{byte(0x6e), byte(0x74), byte(0x5f), byte(0x70), byte(0x6f), byte(0x6f), byte(0x6c)})
	// path: normalizedTokenMint
	seeds = append(seeds, normalizedTokenMint.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindNormalizedTokenPoolAccountAddressWithBumpSeed calculates NormalizedTokenPoolAccount account address with given seeds and a known bump seed.
func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) FindNormalizedTokenPoolAccountAddressWithBumpSeed(normalizedTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindNormalizedTokenPoolAccountAddress(normalizedTokenMint, bumpSeed)
	return
}

func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) MustFindNormalizedTokenPoolAccountAddressWithBumpSeed(normalizedTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindNormalizedTokenPoolAccountAddress(normalizedTokenMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindNormalizedTokenPoolAccountAddress finds NormalizedTokenPoolAccount account address with given seeds.
func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) FindNormalizedTokenPoolAccountAddress(normalizedTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindNormalizedTokenPoolAccountAddress(normalizedTokenMint, 0)
	return
}

func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) MustFindNormalizedTokenPoolAccountAddress(normalizedTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindNormalizedTokenPoolAccountAddress(normalizedTokenMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetNormalizedTokenPoolAccountAccount gets the "normalized_token_pool_account" account.
func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) GetNormalizedTokenPoolAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *AdminUpdateNormalizedTokenPoolAccountIfNeeded {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(eventAuthority)
	return inst
}

func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) findFindEventAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: __event_authority
	seeds = append(seeds, []byte{byte(0x5f), byte(0x5f), byte(0x65), byte(0x76), byte(0x65), byte(0x6e), byte(0x74), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindEventAuthorityAddressWithBumpSeed calculates EventAuthority account address with given seeds and a known bump seed.
func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) FindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindEventAuthorityAddress(bumpSeed)
	return
}

func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) MustFindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindEventAuthorityAddress finds EventAuthority account address with given seeds.
func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) FindEventAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindEventAuthorityAddress(0)
	return
}

func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) MustFindEventAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetProgramAccount sets the "program" account.
func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) SetProgramAccount(program ag_solanago.PublicKey) *AdminUpdateNormalizedTokenPoolAccountIfNeeded {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst AdminUpdateNormalizedTokenPoolAccountIfNeeded) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AdminUpdateNormalizedTokenPoolAccountIfNeeded,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AdminUpdateNormalizedTokenPoolAccountIfNeeded) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.NormalizedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.NormalizedTokenMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.NormalizedTokenPoolAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *AdminUpdateNormalizedTokenPoolAccountIfNeeded) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AdminUpdateNormalizedTokenPoolAccountIfNeeded")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                   payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                   admin", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("          system_program", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("normalized_token_program", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("   normalized_token_mint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("  normalized_token_pool_", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("         event_authority", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                 program", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj AdminUpdateNormalizedTokenPoolAccountIfNeeded) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *AdminUpdateNormalizedTokenPoolAccountIfNeeded) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewAdminUpdateNormalizedTokenPoolAccountIfNeededInstruction declares a new AdminUpdateNormalizedTokenPoolAccountIfNeeded instruction with the provided parameters and accounts.
func NewAdminUpdateNormalizedTokenPoolAccountIfNeededInstruction(
	// Accounts:
	payer ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	normalizedTokenProgram ag_solanago.PublicKey,
	normalizedTokenMint ag_solanago.PublicKey,
	normalizedTokenPoolAccount ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *AdminUpdateNormalizedTokenPoolAccountIfNeeded {
	return NewAdminUpdateNormalizedTokenPoolAccountIfNeededInstructionBuilder().
		SetPayerAccount(payer).
		SetAdminAccount(admin).
		SetSystemProgramAccount(systemProgram).
		SetNormalizedTokenProgramAccount(normalizedTokenProgram).
		SetNormalizedTokenMintAccount(normalizedTokenMint).
		SetNormalizedTokenPoolAccountAccount(normalizedTokenPoolAccount).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
