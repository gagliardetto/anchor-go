// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package restaking

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AdminInitializeFundWrapAccountRewardAccount is the `admin_initialize_fund_wrap_account_reward_account` instruction.
type AdminInitializeFundWrapAccountRewardAccount struct {

	// [0] = [WRITE, SIGNER] payer
	//
	// [1] = [SIGNER] admin
	//
	// [2] = [] fund_wrap_account
	//
	// [3] = [] system_program
	//
	// [4] = [] receipt_token_mint
	//
	// [5] = [] receipt_token_wrap_account
	//
	// [6] = [] fund_account
	//
	// [7] = [WRITE] reward_account
	//
	// [8] = [WRITE] fund_wrap_account_reward_account
	//
	// [9] = [] event_authority
	//
	// [10] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAdminInitializeFundWrapAccountRewardAccountInstructionBuilder creates a new `AdminInitializeFundWrapAccountRewardAccount` instruction builder.
func NewAdminInitializeFundWrapAccountRewardAccountInstructionBuilder() *AdminInitializeFundWrapAccountRewardAccount {
	nd := &AdminInitializeFundWrapAccountRewardAccount{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 11),
	}
	nd.AccountMetaSlice[1] = ag_solanago.Meta(Addresses["fragkamrANLvuZYQPcmPsCATQAabkqNGH6gxqqPG3aP"]).SIGNER()
	nd.AccountMetaSlice[3] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	return nd
}

// SetPayerAccount sets the "payer" account.
func (inst *AdminInitializeFundWrapAccountRewardAccount) SetPayerAccount(payer ag_solanago.PublicKey) *AdminInitializeFundWrapAccountRewardAccount {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *AdminInitializeFundWrapAccountRewardAccount) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAdminAccount sets the "admin" account.
func (inst *AdminInitializeFundWrapAccountRewardAccount) SetAdminAccount(admin ag_solanago.PublicKey) *AdminInitializeFundWrapAccountRewardAccount {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *AdminInitializeFundWrapAccountRewardAccount) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetFundWrapAccountAccount sets the "fund_wrap_account" account.
func (inst *AdminInitializeFundWrapAccountRewardAccount) SetFundWrapAccountAccount(fundWrapAccount ag_solanago.PublicKey) *AdminInitializeFundWrapAccountRewardAccount {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(fundWrapAccount)
	return inst
}

func (inst *AdminInitializeFundWrapAccountRewardAccount) findFindFundWrapAccountAddress(receiptTokenMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: fund_wrap
	seeds = append(seeds, []byte{byte(0x66), byte(0x75), byte(0x6e), byte(0x64), byte(0x5f), byte(0x77), byte(0x72), byte(0x61), byte(0x70)})
	// path: receiptTokenMint
	seeds = append(seeds, receiptTokenMint.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindFundWrapAccountAddressWithBumpSeed calculates FundWrapAccount account address with given seeds and a known bump seed.
func (inst *AdminInitializeFundWrapAccountRewardAccount) FindFundWrapAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindFundWrapAccountAddress(receiptTokenMint, bumpSeed)
	return
}

func (inst *AdminInitializeFundWrapAccountRewardAccount) MustFindFundWrapAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundWrapAccountAddress(receiptTokenMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindFundWrapAccountAddress finds FundWrapAccount account address with given seeds.
func (inst *AdminInitializeFundWrapAccountRewardAccount) FindFundWrapAccountAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindFundWrapAccountAddress(receiptTokenMint, 0)
	return
}

func (inst *AdminInitializeFundWrapAccountRewardAccount) MustFindFundWrapAccountAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundWrapAccountAddress(receiptTokenMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetFundWrapAccountAccount gets the "fund_wrap_account" account.
func (inst *AdminInitializeFundWrapAccountRewardAccount) GetFundWrapAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *AdminInitializeFundWrapAccountRewardAccount) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AdminInitializeFundWrapAccountRewardAccount {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *AdminInitializeFundWrapAccountRewardAccount) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetReceiptTokenMintAccount sets the "receipt_token_mint" account.
func (inst *AdminInitializeFundWrapAccountRewardAccount) SetReceiptTokenMintAccount(receiptTokenMint ag_solanago.PublicKey) *AdminInitializeFundWrapAccountRewardAccount {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(receiptTokenMint)
	return inst
}

// GetReceiptTokenMintAccount gets the "receipt_token_mint" account.
func (inst *AdminInitializeFundWrapAccountRewardAccount) GetReceiptTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetReceiptTokenWrapAccountAccount sets the "receipt_token_wrap_account" account.
func (inst *AdminInitializeFundWrapAccountRewardAccount) SetReceiptTokenWrapAccountAccount(receiptTokenWrapAccount ag_solanago.PublicKey) *AdminInitializeFundWrapAccountRewardAccount {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(receiptTokenWrapAccount)
	return inst
}

func (inst *AdminInitializeFundWrapAccountRewardAccount) findFindReceiptTokenWrapAccountAddress(fundWrapAccount ag_solanago.PublicKey, receiptTokenMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// path: fundWrapAccount
	seeds = append(seeds, fundWrapAccount.Bytes())
	// const (raw): [6 221 246 225 238 117 143 222 24 66 93 188 228 108 205 218 182 26 252 77 131 185 13 39 254 189 249 40 216 161 139 252]
	seeds = append(seeds, []byte{byte(0x6), byte(0xdd), byte(0xf6), byte(0xe1), byte(0xee), byte(0x75), byte(0x8f), byte(0xde), byte(0x18), byte(0x42), byte(0x5d), byte(0xbc), byte(0xe4), byte(0x6c), byte(0xcd), byte(0xda), byte(0xb6), byte(0x1a), byte(0xfc), byte(0x4d), byte(0x83), byte(0xb9), byte(0xd), byte(0x27), byte(0xfe), byte(0xbd), byte(0xf9), byte(0x28), byte(0xd8), byte(0xa1), byte(0x8b), byte(0xfc)})
	// path: receiptTokenMint
	seeds = append(seeds, receiptTokenMint.Bytes())

	programID := Addresses["ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"]

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, programID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, programID)
	}
	return
}

// FindReceiptTokenWrapAccountAddressWithBumpSeed calculates ReceiptTokenWrapAccount account address with given seeds and a known bump seed.
func (inst *AdminInitializeFundWrapAccountRewardAccount) FindReceiptTokenWrapAccountAddressWithBumpSeed(fundWrapAccount ag_solanago.PublicKey, receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindReceiptTokenWrapAccountAddress(fundWrapAccount, receiptTokenMint, bumpSeed)
	return
}

func (inst *AdminInitializeFundWrapAccountRewardAccount) MustFindReceiptTokenWrapAccountAddressWithBumpSeed(fundWrapAccount ag_solanago.PublicKey, receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindReceiptTokenWrapAccountAddress(fundWrapAccount, receiptTokenMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindReceiptTokenWrapAccountAddress finds ReceiptTokenWrapAccount account address with given seeds.
func (inst *AdminInitializeFundWrapAccountRewardAccount) FindReceiptTokenWrapAccountAddress(fundWrapAccount ag_solanago.PublicKey, receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindReceiptTokenWrapAccountAddress(fundWrapAccount, receiptTokenMint, 0)
	return
}

func (inst *AdminInitializeFundWrapAccountRewardAccount) MustFindReceiptTokenWrapAccountAddress(fundWrapAccount ag_solanago.PublicKey, receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindReceiptTokenWrapAccountAddress(fundWrapAccount, receiptTokenMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetReceiptTokenWrapAccountAccount gets the "receipt_token_wrap_account" account.
func (inst *AdminInitializeFundWrapAccountRewardAccount) GetReceiptTokenWrapAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetFundAccountAccount sets the "fund_account" account.
func (inst *AdminInitializeFundWrapAccountRewardAccount) SetFundAccountAccount(fundAccount ag_solanago.PublicKey) *AdminInitializeFundWrapAccountRewardAccount {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(fundAccount)
	return inst
}

func (inst *AdminInitializeFundWrapAccountRewardAccount) findFindFundAccountAddress(receiptTokenMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: fund
	seeds = append(seeds, []byte{byte(0x66), byte(0x75), byte(0x6e), byte(0x64)})
	// path: receiptTokenMint
	seeds = append(seeds, receiptTokenMint.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindFundAccountAddressWithBumpSeed calculates FundAccount account address with given seeds and a known bump seed.
func (inst *AdminInitializeFundWrapAccountRewardAccount) FindFundAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindFundAccountAddress(receiptTokenMint, bumpSeed)
	return
}

func (inst *AdminInitializeFundWrapAccountRewardAccount) MustFindFundAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundAccountAddress(receiptTokenMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindFundAccountAddress finds FundAccount account address with given seeds.
func (inst *AdminInitializeFundWrapAccountRewardAccount) FindFundAccountAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindFundAccountAddress(receiptTokenMint, 0)
	return
}

func (inst *AdminInitializeFundWrapAccountRewardAccount) MustFindFundAccountAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundAccountAddress(receiptTokenMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetFundAccountAccount gets the "fund_account" account.
func (inst *AdminInitializeFundWrapAccountRewardAccount) GetFundAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetRewardAccountAccount sets the "reward_account" account.
func (inst *AdminInitializeFundWrapAccountRewardAccount) SetRewardAccountAccount(rewardAccount ag_solanago.PublicKey) *AdminInitializeFundWrapAccountRewardAccount {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(rewardAccount).WRITE()
	return inst
}

func (inst *AdminInitializeFundWrapAccountRewardAccount) findFindRewardAccountAddress(receiptTokenMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: reward
	seeds = append(seeds, []byte{byte(0x72), byte(0x65), byte(0x77), byte(0x61), byte(0x72), byte(0x64)})
	// path: receiptTokenMint
	seeds = append(seeds, receiptTokenMint.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindRewardAccountAddressWithBumpSeed calculates RewardAccount account address with given seeds and a known bump seed.
func (inst *AdminInitializeFundWrapAccountRewardAccount) FindRewardAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindRewardAccountAddress(receiptTokenMint, bumpSeed)
	return
}

func (inst *AdminInitializeFundWrapAccountRewardAccount) MustFindRewardAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindRewardAccountAddress(receiptTokenMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindRewardAccountAddress finds RewardAccount account address with given seeds.
func (inst *AdminInitializeFundWrapAccountRewardAccount) FindRewardAccountAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindRewardAccountAddress(receiptTokenMint, 0)
	return
}

func (inst *AdminInitializeFundWrapAccountRewardAccount) MustFindRewardAccountAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindRewardAccountAddress(receiptTokenMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetRewardAccountAccount gets the "reward_account" account.
func (inst *AdminInitializeFundWrapAccountRewardAccount) GetRewardAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetFundWrapAccountRewardAccountAccount sets the "fund_wrap_account_reward_account" account.
func (inst *AdminInitializeFundWrapAccountRewardAccount) SetFundWrapAccountRewardAccountAccount(fundWrapAccountRewardAccount ag_solanago.PublicKey) *AdminInitializeFundWrapAccountRewardAccount {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(fundWrapAccountRewardAccount).WRITE()
	return inst
}

func (inst *AdminInitializeFundWrapAccountRewardAccount) findFindFundWrapAccountRewardAccountAddress(receiptTokenMint ag_solanago.PublicKey, fundWrapAccount ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: user_reward
	seeds = append(seeds, []byte{byte(0x75), byte(0x73), byte(0x65), byte(0x72), byte(0x5f), byte(0x72), byte(0x65), byte(0x77), byte(0x61), byte(0x72), byte(0x64)})
	// path: receiptTokenMint
	seeds = append(seeds, receiptTokenMint.Bytes())
	// path: fundWrapAccount
	seeds = append(seeds, fundWrapAccount.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindFundWrapAccountRewardAccountAddressWithBumpSeed calculates FundWrapAccountRewardAccount account address with given seeds and a known bump seed.
func (inst *AdminInitializeFundWrapAccountRewardAccount) FindFundWrapAccountRewardAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, fundWrapAccount ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindFundWrapAccountRewardAccountAddress(receiptTokenMint, fundWrapAccount, bumpSeed)
	return
}

func (inst *AdminInitializeFundWrapAccountRewardAccount) MustFindFundWrapAccountRewardAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, fundWrapAccount ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundWrapAccountRewardAccountAddress(receiptTokenMint, fundWrapAccount, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindFundWrapAccountRewardAccountAddress finds FundWrapAccountRewardAccount account address with given seeds.
func (inst *AdminInitializeFundWrapAccountRewardAccount) FindFundWrapAccountRewardAccountAddress(receiptTokenMint ag_solanago.PublicKey, fundWrapAccount ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindFundWrapAccountRewardAccountAddress(receiptTokenMint, fundWrapAccount, 0)
	return
}

func (inst *AdminInitializeFundWrapAccountRewardAccount) MustFindFundWrapAccountRewardAccountAddress(receiptTokenMint ag_solanago.PublicKey, fundWrapAccount ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundWrapAccountRewardAccountAddress(receiptTokenMint, fundWrapAccount, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetFundWrapAccountRewardAccountAccount gets the "fund_wrap_account_reward_account" account.
func (inst *AdminInitializeFundWrapAccountRewardAccount) GetFundWrapAccountRewardAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *AdminInitializeFundWrapAccountRewardAccount) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *AdminInitializeFundWrapAccountRewardAccount {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(eventAuthority)
	return inst
}

func (inst *AdminInitializeFundWrapAccountRewardAccount) findFindEventAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: __event_authority
	seeds = append(seeds, []byte{byte(0x5f), byte(0x5f), byte(0x65), byte(0x76), byte(0x65), byte(0x6e), byte(0x74), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindEventAuthorityAddressWithBumpSeed calculates EventAuthority account address with given seeds and a known bump seed.
func (inst *AdminInitializeFundWrapAccountRewardAccount) FindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindEventAuthorityAddress(bumpSeed)
	return
}

func (inst *AdminInitializeFundWrapAccountRewardAccount) MustFindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindEventAuthorityAddress finds EventAuthority account address with given seeds.
func (inst *AdminInitializeFundWrapAccountRewardAccount) FindEventAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindEventAuthorityAddress(0)
	return
}

func (inst *AdminInitializeFundWrapAccountRewardAccount) MustFindEventAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *AdminInitializeFundWrapAccountRewardAccount) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetProgramAccount sets the "program" account.
func (inst *AdminInitializeFundWrapAccountRewardAccount) SetProgramAccount(program ag_solanago.PublicKey) *AdminInitializeFundWrapAccountRewardAccount {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *AdminInitializeFundWrapAccountRewardAccount) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

func (inst AdminInitializeFundWrapAccountRewardAccount) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AdminInitializeFundWrapAccountRewardAccount,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AdminInitializeFundWrapAccountRewardAccount) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AdminInitializeFundWrapAccountRewardAccount) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.FundWrapAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.ReceiptTokenMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.ReceiptTokenWrapAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.FundAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.RewardAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.FundWrapAccountRewardAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *AdminInitializeFundWrapAccountRewardAccount) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AdminInitializeFundWrapAccountRewardAccount")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=11]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                    payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                    admin", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("               fund_wrap_", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("           system_program", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       receipt_token_mint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("      receipt_token_wrap_", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                    fund_", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                  reward_", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("fund_wrap_account_reward_", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("          event_authority", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("                  program", inst.AccountMetaSlice.Get(10)))
					})
				})
		})
}

func (obj AdminInitializeFundWrapAccountRewardAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *AdminInitializeFundWrapAccountRewardAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewAdminInitializeFundWrapAccountRewardAccountInstruction declares a new AdminInitializeFundWrapAccountRewardAccount instruction with the provided parameters and accounts.
func NewAdminInitializeFundWrapAccountRewardAccountInstruction(
	// Accounts:
	payer ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	fundWrapAccount ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	receiptTokenMint ag_solanago.PublicKey,
	receiptTokenWrapAccount ag_solanago.PublicKey,
	fundAccount ag_solanago.PublicKey,
	rewardAccount ag_solanago.PublicKey,
	fundWrapAccountRewardAccount ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *AdminInitializeFundWrapAccountRewardAccount {
	return NewAdminInitializeFundWrapAccountRewardAccountInstructionBuilder().
		SetPayerAccount(payer).
		SetAdminAccount(admin).
		SetFundWrapAccountAccount(fundWrapAccount).
		SetSystemProgramAccount(systemProgram).
		SetReceiptTokenMintAccount(receiptTokenMint).
		SetReceiptTokenWrapAccountAccount(receiptTokenWrapAccount).
		SetFundAccountAccount(fundAccount).
		SetRewardAccountAccount(rewardAccount).
		SetFundWrapAccountRewardAccountAccount(fundWrapAccountRewardAccount).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
