// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package restaking

import (
	"encoding/json"
	"errors"
	"fmt"
	ag_jsonrpc "github.com/gagliardetto/solana-go/rpc/jsonrpc"
)

var (
	_ *json.Encoder        = nil
	_ *ag_jsonrpc.RPCError = nil
	_ fmt.Formatter        = nil
	_                      = errors.ErrUnsupported
)
var (
	ErrCalculationArithmeticException = &customErrorDef{
		code: 6000,
		msg:  "calculation arithmetic exception",
		name: "CalculationArithmeticException",
	}
	ErrIndexOutOfBoundsException = &customErrorDef{
		code: 6001,
		msg:  "index out of bounds exception",
		name: "IndexOutOfBoundsException",
	}
	ErrUTF8DecodingException = &customErrorDef{
		code: 6002,
		msg:  "utf-8 decoding exception",
		name: "UTF8DecodingException",
	}
	ErrInvalidSignatureError = &customErrorDef{
		code: 6003,
		msg:  "signature verification failed",
		name: "InvalidSignatureError",
	}
	ErrInvalidAccountDataVersionError = &customErrorDef{
		code: 6004,
		msg:  "invalid account data version",
		name: "InvalidAccountDataVersionError",
	}
	ErrTokenNotTransferableError = &customErrorDef{
		code: 6005,
		msg:  "token is not transferable currently",
		name: "TokenNotTransferableError",
	}
	ErrTokenNotTransferringException = &customErrorDef{
		code: 6006,
		msg:  "token is not transferring currently",
		name: "TokenNotTransferringException",
	}
	ErrRewardInvalidTransferArgsException = &customErrorDef{
		code: 6007,
		msg:  "reward: invalid token transfer args",
		name: "RewardInvalidTransferArgsException",
	}
	ErrRewardInvalidMetadataNameLengthError = &customErrorDef{
		code: 6008,
		msg:  "reward: invalid metadata name length",
		name: "RewardInvalidMetadataNameLengthError",
	}
	ErrRewardInvalidMetadataDescriptionLengthError = &customErrorDef{
		code: 6009,
		msg:  "reward: invalid metadata description length",
		name: "RewardInvalidMetadataDescriptionLengthError",
	}
	ErrRewardInvalidRewardTypeError = &customErrorDef{
		code: 6010,
		msg:  "reward: invalid reward type",
		name: "RewardInvalidRewardTypeError",
	}
	ErrRewardAlreadyExistingHolderError = &customErrorDef{
		code: 6011,
		msg:  "reward: already existing holder",
		name: "RewardAlreadyExistingHolderError",
	}
	ErrRewardAlreadyExistingRewardError = &customErrorDef{
		code: 6012,
		msg:  "reward: already existing reward",
		name: "RewardAlreadyExistingRewardError",
	}
	ErrRewardAlreadyExistingPoolError = &customErrorDef{
		code: 6013,
		msg:  "reward: already existing pool",
		name: "RewardAlreadyExistingPoolError",
	}
	ErrRewardHolderNotFoundError = &customErrorDef{
		code: 6014,
		msg:  "reward: holder not found",
		name: "RewardHolderNotFoundError",
	}
	ErrRewardNotFoundError = &customErrorDef{
		code: 6015,
		msg:  "reward: reward not found",
		name: "RewardNotFoundError",
	}
	ErrRewardPoolNotFoundError = &customErrorDef{
		code: 6016,
		msg:  "reward: pool not found",
		name: "RewardPoolNotFoundError",
	}
	ErrRewardUserPoolNotFoundError = &customErrorDef{
		code: 6017,
		msg:  "reward: user pool not found",
		name: "RewardUserPoolNotFoundError",
	}
	ErrRewardPoolClosedError = &customErrorDef{
		code: 6018,
		msg:  "reward: pool is closed",
		name: "RewardPoolClosedError",
	}
	ErrRewardInvalidPoolConfigurationException = &customErrorDef{
		code: 6019,
		msg:  "reward: invalid pool configuration",
		name: "RewardInvalidPoolConfigurationException",
	}
	ErrRewardInvalidPoolAccessException = &customErrorDef{
		code: 6020,
		msg:  "reward: invalid reward pool access",
		name: "RewardInvalidPoolAccessException",
	}
	ErrRewardInvalidAccountingException = &customErrorDef{
		code: 6021,
		msg:  "reward: incorrect accounting exception",
		name: "RewardInvalidAccountingException",
	}
	ErrRewardInvalidAllocatedAmountDeltaException = &customErrorDef{
		code: 6022,
		msg:  "reward: invalid amount or contribution accrual rate",
		name: "RewardInvalidAllocatedAmountDeltaException",
	}
	ErrRewardExceededMaxHoldersError = &customErrorDef{
		code: 6023,
		msg:  "reward: exceeded max holders",
		name: "RewardExceededMaxHoldersError",
	}
	ErrRewardExceededMaxRewardsError = &customErrorDef{
		code: 6024,
		msg:  "reward: exceeded max rewards",
		name: "RewardExceededMaxRewardsError",
	}
	ErrRewardExceededMaxRewardPoolsError = &customErrorDef{
		code: 6025,
		msg:  "reward: exceeded max reward pools",
		name: "RewardExceededMaxRewardPoolsError",
	}
	ErrRewardExceededMaxUserRewardPoolsError = &customErrorDef{
		code: 6026,
		msg:  "reward: exceeded max user reward pools",
		name: "RewardExceededMaxUserRewardPoolsError",
	}
	ErrRewardExceededMaxHolderPubkeysError = &customErrorDef{
		code: 6027,
		msg:  "reward: exceeded max pubkeys per holder",
		name: "RewardExceededMaxHolderPubkeysError",
	}
	ErrRewardExceededMaxTokenAllocatedAmountRecordException = &customErrorDef{
		code: 6028,
		msg:  "reward: exceeded max token allocated amount record",
		name: "RewardExceededMaxTokenAllocatedAmountRecordException",
	}
	ErrRewardExceededMaxRewardSettlementError = &customErrorDef{
		code: 6029,
		msg:  "reward: exceeded max reward settlements per pool",
		name: "RewardExceededMaxRewardSettlementError",
	}
	ErrRewardStaleSettlementBlockNotExistError = &customErrorDef{
		code: 6030,
		msg:  "reward: stale settlement block not exist",
		name: "RewardStaleSettlementBlockNotExistError",
	}
	ErrRewardInvalidSettlementBlockHeightException = &customErrorDef{
		code: 6031,
		msg:  "reward: invalid settlement block height",
		name: "RewardInvalidSettlementBlockHeightException",
	}
	ErrRewardInvalidSettlementBlockContributionException = &customErrorDef{
		code: 6032,
		msg:  "reward: invalid settlement block contribution",
		name: "RewardInvalidSettlementBlockContributionException",
	}
	ErrRewardInvalidTotalUserSettledAmountException = &customErrorDef{
		code: 6033,
		msg:  "reward: sum of user settled amount cannot exceed total amount",
		name: "RewardInvalidTotalUserSettledAmountException",
	}
	ErrRewardInvalidTotalUserSettledContributionException = &customErrorDef{
		code: 6034,
		msg:  "reward: sum of user settled contribution cannot exceed total contribution",
		name: "RewardInvalidTotalUserSettledContributionException",
	}
	ErrRewardPoolCloseConditionError = &customErrorDef{
		code: 6035,
		msg:  "reward: cannot close the reward pool",
		name: "RewardPoolCloseConditionError",
	}
	ErrTokenPricingSourceAccountNotFoundError = &customErrorDef{
		code: 6036,
		msg:  "pricing: token pricing source is not found",
		name: "TokenPricingSourceAccountNotFoundError",
	}
	ErrFundInvalidConfigurationUpdateError = &customErrorDef{
		code: 6037,
		msg:  "fund: cannot apply invalid configuration update",
		name: "FundInvalidConfigurationUpdateError",
	}
	ErrFundAlreadySupportedTokenError = &customErrorDef{
		code: 6038,
		msg:  "fund: already supported token",
		name: "FundAlreadySupportedTokenError",
	}
	ErrFundNotSupportedTokenError = &customErrorDef{
		code: 6039,
		msg:  "fund: not supported token",
		name: "FundNotSupportedTokenError",
	}
	ErrFundDepositDisabledError = &customErrorDef{
		code: 6040,
		msg:  "fund: deposit is currently disabled",
		name: "FundDepositDisabledError",
	}
	ErrFundExceededDepositCapacityAmountError = &customErrorDef{
		code: 6041,
		msg:  "fund: exceeded deposit capacity amount",
		name: "FundExceededDepositCapacityAmountError",
	}
	ErrFundDepositNotSupportedAsset = &customErrorDef{
		code: 6042,
		msg:  "fund: deposit is not supported for the given asset",
		name: "FundDepositNotSupportedAsset",
	}
	ErrFundExceededMaxWithdrawalRequestError = &customErrorDef{
		code: 6043,
		msg:  "fund: exceeded max withdrawal request per user",
		name: "FundExceededMaxWithdrawalRequestError",
	}
	ErrFundWithdrawalRequestNotFoundError = &customErrorDef{
		code: 6044,
		msg:  "fund: withdrawal request not found",
		name: "FundWithdrawalRequestNotFoundError",
	}
	ErrFundWithdrawalRequestIncorrectBatchError = &customErrorDef{
		code: 6045,
		msg:  "fund: withdrawal request not belongs to the given batch",
		name: "FundWithdrawalRequestIncorrectBatchError",
	}
	ErrFundWithdrawalDisabledError = &customErrorDef{
		code: 6046,
		msg:  "fund: withdrawal is currently disabled",
		name: "FundWithdrawalDisabledError",
	}
	ErrFundWithdrawalNotSupportedAsset = &customErrorDef{
		code: 6047,
		msg:  "fund: withdrawal is not supported for the given asset",
		name: "FundWithdrawalNotSupportedAsset",
	}
	ErrFundWithdrawalReserveExhaustedSupportedAsset = &customErrorDef{
		code: 6048,
		msg:  "fund: withdrawal reserve is exhausted for the given asset",
		name: "FundWithdrawalReserveExhaustedSupportedAsset",
	}
	ErrFundWithdrawalRequestAlreadyQueuedError = &customErrorDef{
		code: 6049,
		msg:  "fund: withdrawal request is already in progress",
		name: "FundWithdrawalRequestAlreadyQueuedError",
	}
	ErrFundDepositMetadataSignatureExpiredError = &customErrorDef{
		code: 6050,
		msg:  "fund: deposit metadata signature has expired",
		name: "FundDepositMetadataSignatureExpiredError",
	}
	ErrFundExceededMaxSupportedTokensError = &customErrorDef{
		code: 6051,
		msg:  "fund: exceeded max supported tokens",
		name: "FundExceededMaxSupportedTokensError",
	}
	ErrFundInvalidWithdrawalFeeRateError = &customErrorDef{
		code: 6052,
		msg:  "fund: invalid withdrawal fee rate",
		name: "FundInvalidWithdrawalFeeRateError",
	}
	ErrFundNormalizedTokenAlreadySetError = &customErrorDef{
		code: 6053,
		msg:  "fund: normalized token already set",
		name: "FundNormalizedTokenAlreadySetError",
	}
	ErrFundNormalizedTokenNotSetError = &customErrorDef{
		code: 6054,
		msg:  "fund: normalized token is not set",
		name: "FundNormalizedTokenNotSetError",
	}
	ErrFundRestakingVaultAlreadyRegisteredError = &customErrorDef{
		code: 6055,
		msg:  "fund: restaking vault already registered",
		name: "FundRestakingVaultAlreadyRegisteredError",
	}
	ErrFundExceededMaxRestakingVaultsError = &customErrorDef{
		code: 6056,
		msg:  "reward: exceeded max restaking vaults",
		name: "FundExceededMaxRestakingVaultsError",
	}
	ErrFundRestakingNotSupportedVaultError = &customErrorDef{
		code: 6057,
		msg:  "fund: not supported restaking vault",
		name: "FundRestakingNotSupportedVaultError",
	}
	ErrFundRestakingVaultNotFoundError = &customErrorDef{
		code: 6058,
		msg:  "fund: restaking vault not found",
		name: "FundRestakingVaultNotFoundError",
	}
	ErrFundRestakingVaultOperatorNotFoundError = &customErrorDef{
		code: 6059,
		msg:  "fund: restaking vault operator not found",
		name: "FundRestakingVaultOperatorNotFoundError",
	}
	ErrFundRestakingVaultOperatorAlreadyRegisteredError = &customErrorDef{
		code: 6060,
		msg:  "fund: restaking vault operator already registered",
		name: "FundRestakingVaultOperatorAlreadyRegisteredError",
	}
	ErrFundExceededMaxRestakingVaultDelegationsError = &customErrorDef{
		code: 6061,
		msg:  "fund: exceeded max restaking vault delegations",
		name: "FundExceededMaxRestakingVaultDelegationsError",
	}
	ErrFundRestakingVaultCompoundingRewardTokenAlreadyRegisteredError = &customErrorDef{
		code: 6062,
		msg:  "fund: restaking vault compounding reward token already registered",
		name: "FundRestakingVaultCompoundingRewardTokenAlreadyRegisteredError",
	}
	ErrFundExceededMaxRestakingVaultCompoundingRewardTokensError = &customErrorDef{
		code: 6063,
		msg:  "fund: exceeded max restaking vault compounding reward tokens",
		name: "FundExceededMaxRestakingVaultCompoundingRewardTokensError",
	}
	ErrFundOperationUnauthorizedCommandError = &customErrorDef{
		code: 6064,
		msg:  "fund: unauhorized operation command",
		name: "FundOperationUnauthorizedCommandError",
	}
	ErrFundOperationCommandAccountComputationException = &customErrorDef{
		code: 6065,
		msg:  "fund: failed to compute required accounts for the operation command",
		name: "FundOperationCommandAccountComputationException",
	}
	ErrFundOperationCommandExecutionFailedException = &customErrorDef{
		code: 6066,
		msg:  "fund: failed to execute the operation command",
		name: "FundOperationCommandExecutionFailedException",
	}
	ErrNormalizedTokenPoolNotSupportedTokenError = &customErrorDef{
		code: 6067,
		msg:  "normalization: not supported token",
		name: "NormalizedTokenPoolNotSupportedTokenError",
	}
	ErrNormalizedTokenPoolAlreadySupportedTokenError = &customErrorDef{
		code: 6068,
		msg:  "normalization: already supported token",
		name: "NormalizedTokenPoolAlreadySupportedTokenError",
	}
	ErrNormalizedTokenPoolExceededMaxSupportedTokensError = &customErrorDef{
		code: 6069,
		msg:  "normalization: exceeded max supported tokens",
		name: "NormalizedTokenPoolExceededMaxSupportedTokensError",
	}
	ErrNormalizedTokenPoolNotEnoughSupportedTokenException = &customErrorDef{
		code: 6070,
		msg:  "normalization: not enough supported token in the pool",
		name: "NormalizedTokenPoolNotEnoughSupportedTokenException",
	}
	ErrNormalizedTokenPoolAlreadySettledWithdrawalAccountError = &customErrorDef{
		code: 6071,
		msg:  "normalization: already settled withdrawal account",
		name: "NormalizedTokenPoolAlreadySettledWithdrawalAccountError",
	}
	ErrNormalizedTokenPoolNonClaimableTokenError = &customErrorDef{
		code: 6072,
		msg:  "normalization: the token is non-claimable for the given withdrawal account",
		name: "NormalizedTokenPoolNonClaimableTokenError",
	}
	ErrStakingUninitializedWithdrawTicketNotFoundException = &customErrorDef{
		code: 6073,
		msg:  "staking: failed to find uninitialized withdraw ticket",
		name: "StakingUninitializedWithdrawTicketNotFoundException",
	}
	ErrStakingAccountNotMatchedException = &customErrorDef{
		code: 6074,
		msg:  "staking: account not matched",
		name: "StakingAccountNotMatchedException",
	}
	ErrStakingSPLActiveStakeNotAvailableException = &customErrorDef{
		code: 6075,
		msg:  "staking: spl stake pool's active stake not available",
		name: "StakingSPLActiveStakeNotAvailableException",
	}
	ErrRestakingVaultWithdrawalTicketsExhaustedError = &customErrorDef{
		code: 6076,
		msg:  "restaking: all withdrawal tickets are already in use",
		name: "RestakingVaultWithdrawalTicketsExhaustedError",
	}
	ErrRestakingVaultWithdrawalTicketNotWithdrawableError = &customErrorDef{
		code: 6077,
		msg:  "restaking: withdrawal ticket is not withdrawable",
		name: "RestakingVaultWithdrawalTicketNotWithdrawableError",
	}
	ErrRestakingVaultWithdrawalTicketAlreadyInitializedError = &customErrorDef{
		code: 6078,
		msg:  "restaking: withdrawal ticket is already initialized",
		name: "RestakingVaultWithdrawalTicketAlreadyInitializedError",
	}
	ErrFundDonationDisabledError = &customErrorDef{
		code: 6079,
		msg:  "fund: donation is currently disabled",
		name: "FundDonationDisabledError",
	}
	ErrFundWrappedTokenAlreadySetError = &customErrorDef{
		code: 6080,
		msg:  "fund: wrapped token already set",
		name: "FundWrappedTokenAlreadySetError",
	}
	ErrFundWrappedTokenNotSetError = &customErrorDef{
		code: 6081,
		msg:  "fund: wrapped token is not set",
		name: "FundWrappedTokenNotSetError",
	}
	ErrFundTokenSwapStrategyAlreadyRegistered = &customErrorDef{
		code: 6082,
		msg:  "fund: token swap strategy already registered",
		name: "FundTokenSwapStrategyAlreadyRegistered",
	}
	ErrFundExceededMaxTokenSwapStrategiesError = &customErrorDef{
		code: 6083,
		msg:  "fund: exceeded max token swap strategies",
		name: "FundExceededMaxTokenSwapStrategiesError",
	}
	ErrFundTokenSwapStrategyNotFoundError = &customErrorDef{
		code: 6084,
		msg:  "fund: token swap strategy not found",
		name: "FundTokenSwapStrategyNotFoundError",
	}
	Errors = map[int]CustomError{
		6000: ErrCalculationArithmeticException,
		6001: ErrIndexOutOfBoundsException,
		6002: ErrUTF8DecodingException,
		6003: ErrInvalidSignatureError,
		6004: ErrInvalidAccountDataVersionError,
		6005: ErrTokenNotTransferableError,
		6006: ErrTokenNotTransferringException,
		6007: ErrRewardInvalidTransferArgsException,
		6008: ErrRewardInvalidMetadataNameLengthError,
		6009: ErrRewardInvalidMetadataDescriptionLengthError,
		6010: ErrRewardInvalidRewardTypeError,
		6011: ErrRewardAlreadyExistingHolderError,
		6012: ErrRewardAlreadyExistingRewardError,
		6013: ErrRewardAlreadyExistingPoolError,
		6014: ErrRewardHolderNotFoundError,
		6015: ErrRewardNotFoundError,
		6016: ErrRewardPoolNotFoundError,
		6017: ErrRewardUserPoolNotFoundError,
		6018: ErrRewardPoolClosedError,
		6019: ErrRewardInvalidPoolConfigurationException,
		6020: ErrRewardInvalidPoolAccessException,
		6021: ErrRewardInvalidAccountingException,
		6022: ErrRewardInvalidAllocatedAmountDeltaException,
		6023: ErrRewardExceededMaxHoldersError,
		6024: ErrRewardExceededMaxRewardsError,
		6025: ErrRewardExceededMaxRewardPoolsError,
		6026: ErrRewardExceededMaxUserRewardPoolsError,
		6027: ErrRewardExceededMaxHolderPubkeysError,
		6028: ErrRewardExceededMaxTokenAllocatedAmountRecordException,
		6029: ErrRewardExceededMaxRewardSettlementError,
		6030: ErrRewardStaleSettlementBlockNotExistError,
		6031: ErrRewardInvalidSettlementBlockHeightException,
		6032: ErrRewardInvalidSettlementBlockContributionException,
		6033: ErrRewardInvalidTotalUserSettledAmountException,
		6034: ErrRewardInvalidTotalUserSettledContributionException,
		6035: ErrRewardPoolCloseConditionError,
		6036: ErrTokenPricingSourceAccountNotFoundError,
		6037: ErrFundInvalidConfigurationUpdateError,
		6038: ErrFundAlreadySupportedTokenError,
		6039: ErrFundNotSupportedTokenError,
		6040: ErrFundDepositDisabledError,
		6041: ErrFundExceededDepositCapacityAmountError,
		6042: ErrFundDepositNotSupportedAsset,
		6043: ErrFundExceededMaxWithdrawalRequestError,
		6044: ErrFundWithdrawalRequestNotFoundError,
		6045: ErrFundWithdrawalRequestIncorrectBatchError,
		6046: ErrFundWithdrawalDisabledError,
		6047: ErrFundWithdrawalNotSupportedAsset,
		6048: ErrFundWithdrawalReserveExhaustedSupportedAsset,
		6049: ErrFundWithdrawalRequestAlreadyQueuedError,
		6050: ErrFundDepositMetadataSignatureExpiredError,
		6051: ErrFundExceededMaxSupportedTokensError,
		6052: ErrFundInvalidWithdrawalFeeRateError,
		6053: ErrFundNormalizedTokenAlreadySetError,
		6054: ErrFundNormalizedTokenNotSetError,
		6055: ErrFundRestakingVaultAlreadyRegisteredError,
		6056: ErrFundExceededMaxRestakingVaultsError,
		6057: ErrFundRestakingNotSupportedVaultError,
		6058: ErrFundRestakingVaultNotFoundError,
		6059: ErrFundRestakingVaultOperatorNotFoundError,
		6060: ErrFundRestakingVaultOperatorAlreadyRegisteredError,
		6061: ErrFundExceededMaxRestakingVaultDelegationsError,
		6062: ErrFundRestakingVaultCompoundingRewardTokenAlreadyRegisteredError,
		6063: ErrFundExceededMaxRestakingVaultCompoundingRewardTokensError,
		6064: ErrFundOperationUnauthorizedCommandError,
		6065: ErrFundOperationCommandAccountComputationException,
		6066: ErrFundOperationCommandExecutionFailedException,
		6067: ErrNormalizedTokenPoolNotSupportedTokenError,
		6068: ErrNormalizedTokenPoolAlreadySupportedTokenError,
		6069: ErrNormalizedTokenPoolExceededMaxSupportedTokensError,
		6070: ErrNormalizedTokenPoolNotEnoughSupportedTokenException,
		6071: ErrNormalizedTokenPoolAlreadySettledWithdrawalAccountError,
		6072: ErrNormalizedTokenPoolNonClaimableTokenError,
		6073: ErrStakingUninitializedWithdrawTicketNotFoundException,
		6074: ErrStakingAccountNotMatchedException,
		6075: ErrStakingSPLActiveStakeNotAvailableException,
		6076: ErrRestakingVaultWithdrawalTicketsExhaustedError,
		6077: ErrRestakingVaultWithdrawalTicketNotWithdrawableError,
		6078: ErrRestakingVaultWithdrawalTicketAlreadyInitializedError,
		6079: ErrFundDonationDisabledError,
		6080: ErrFundWrappedTokenAlreadySetError,
		6081: ErrFundWrappedTokenNotSetError,
		6082: ErrFundTokenSwapStrategyAlreadyRegistered,
		6083: ErrFundExceededMaxTokenSwapStrategiesError,
		6084: ErrFundTokenSwapStrategyNotFoundError,
	}
)

type CustomError interface {
	Code() int
	Name() string
	Error() string
}

type customErrorDef struct {
	code int
	name string
	msg  string
}

func (e *customErrorDef) Code() int {
	return e.code
}

func (e *customErrorDef) Name() string {
	return e.name
}

func (e *customErrorDef) Error() string {
	return fmt.Sprintf("%s(%d): %s", e.name, e.code, e.msg)
}

func DecodeCustomError(rpcErr error) (err error, ok bool) {
	if errCode, o := decodeErrorCode(rpcErr); o {
		if customErr, o := Errors[errCode]; o {
			err = customErr
			ok = true
			return
		}
	}
	return
}

func decodeErrorCode(rpcErr error) (errorCode int, ok bool) {
	var jErr *ag_jsonrpc.RPCError
	if errors.As(rpcErr, &jErr) && jErr.Data != nil {
		if root, o := jErr.Data.(map[string]interface{}); o {
			if rootErr, o := root["err"].(map[string]interface{}); o {
				if rootErrInstructionError, o := rootErr["InstructionError"]; o {
					if rootErrInstructionErrorItems, o := rootErrInstructionError.([]interface{}); o {
						if len(rootErrInstructionErrorItems) == 2 {
							if v, o := rootErrInstructionErrorItems[1].(map[string]interface{}); o {
								if v2, o := v["Custom"].(json.Number); o {
									if code, err := v2.Int64(); err == nil {
										ok = true
										errorCode = int(code)
									}
								} else if v2, o := v["Custom"].(float64); o {
									ok = true
									errorCode = int(v2)
								}
							}
						}
					}
				}
			}
		}
	}
	return
}
