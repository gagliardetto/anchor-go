// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package restaking

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Asset struct {
	Value asset
}

func (obj Asset) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	tmp := assetContainer{}
	switch realvalue := obj.Value.(type) {
	case AssetSOLTuple:
		tmp.Enum = 0
		tmp.SOL = realvalue
	case AssetTokenTuple:
		tmp.Enum = 1
		tmp.Token = realvalue
	}
	return encoder.Encode(tmp)
}

func (obj *Asset) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	tmp := new(assetContainer)
	err = decoder.Decode(tmp)
	if err != nil {
		return err
	}
	switch tmp.Enum {
	case 0:
		obj.Value = tmp.SOL
	case 1:
		obj.Value = tmp.Token
	default:
		return fmt.Errorf("unknown enum index: %v", tmp.Enum)
	}
	return nil
}

type asset interface {
	isAsset()
}

type assetContainer struct {
	Enum  ag_binary.BorshEnum `borsh_enum:"true"`
	SOL   AssetSOLTuple
	Token AssetTokenTuple
}

type AssetSOLTuple struct {
	Elem0 uint64
}

func (obj AssetSOLTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AssetSOLTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ AssetSOLTuple) isAsset() {}

type AssetTokenTuple struct {
	Elem0 ag_solanago.PublicKey
	Elem1 *TokenPricingSource `bin:"optional"`
	Elem2 uint64
}

func (obj AssetTokenTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	// Serialize `Elem1` param (optional):
	{
		if obj.Elem1 == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Elem1)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Elem2` param:
	err = encoder.Encode(obj.Elem2)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AssetTokenTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	// Deserialize `Elem1` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Elem1)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Elem2`:
	err = decoder.Decode(&obj.Elem2)
	if err != nil {
		return err
	}
	return nil
}

func (_ AssetTokenTuple) isAsset() {}

type AssetPod struct {
	Discriminant       uint8
	Padding            [7]uint8
	SolAmount          uint64
	TokenAmount        uint64
	TokenMint          ag_solanago.PublicKey
	TokenPricingSource TokenPricingSourcePod
}

func (obj AssetPod) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Discriminant` param:
	err = encoder.Encode(obj.Discriminant)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `SolAmount` param:
	err = encoder.Encode(obj.SolAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenAmount` param:
	err = encoder.Encode(obj.TokenAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	// Serialize `TokenPricingSource` param:
	err = encoder.Encode(obj.TokenPricingSource)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AssetPod) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Discriminant`:
	err = decoder.Decode(&obj.Discriminant)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `SolAmount`:
	err = decoder.Decode(&obj.SolAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenAmount`:
	err = decoder.Decode(&obj.TokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenPricingSource`:
	err = decoder.Decode(&obj.TokenPricingSource)
	if err != nil {
		return err
	}
	return nil
}

type AssetState struct {
	TokenMint                        ag_solanago.PublicKey
	TokenProgram                     ag_solanago.PublicKey
	AccumulatedDepositCapacityAmount uint64
	AccumulatedDepositAmount         uint64
	Depositable                      uint8
	Padding                          [4]uint8
	Withdrawable                     uint8
	NormalReserveRateBps             uint16
	NormalReserveMaxAmount           uint64
	WithdrawalLastCreatedRequestId   uint64
	WithdrawalLastProcessedBatchId   uint64
	WithdrawalLastBatchEnqueuedAt    int64
	WithdrawalLastBatchProcessedAt   int64
	WithdrawalPendingBatch           WithdrawalBatch
	Padding2                         [15]uint8
	WithdrawalNumQueuedBatches       uint8
	WithdrawalQueuedBatches          [10]WithdrawalBatch
	Reserved                         [56]uint8

	// receipt token amount that users can request to withdraw with the given asset from the fund.
	// it can be conditionally inaccurate on price changes among multiple assets, so make sure to update this properly before any use of it.
	// do not make any hard limit constraints with this value from off-chain. a requested withdrawal amount will be adjusted on-chain based on the status.
	WithdrawableValueAsReceiptTokenAmount uint64

	// informative: reserved amount that users can claim for processed withdrawal requests, which is not accounted for as an asset of the fund.
	WithdrawalUserReservedAmount uint64

	// asset: receivable amount that the fund may charge the users requesting withdrawals.
	// It is accrued during either the preparation of the withdrawal obligation or rebalancing of LST like fees from (un)staking or (un)restaking.
	// And it shall be settled by the withdrawal fee normally. And it also can be written off by a donation operation.
	// Then it costs the rebalancing expense to the capital of the fund itself as an operation cost instead of charging the users requesting withdrawals.
	OperationReceivableAmount uint64

	// asset: remaining asset for cash-in/out
	OperationReservedAmount uint64
}

func (obj AssetState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	// Serialize `TokenProgram` param:
	err = encoder.Encode(obj.TokenProgram)
	if err != nil {
		return err
	}
	// Serialize `AccumulatedDepositCapacityAmount` param:
	err = encoder.Encode(obj.AccumulatedDepositCapacityAmount)
	if err != nil {
		return err
	}
	// Serialize `AccumulatedDepositAmount` param:
	err = encoder.Encode(obj.AccumulatedDepositAmount)
	if err != nil {
		return err
	}
	// Serialize `Depositable` param:
	err = encoder.Encode(obj.Depositable)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `Withdrawable` param:
	err = encoder.Encode(obj.Withdrawable)
	if err != nil {
		return err
	}
	// Serialize `NormalReserveRateBps` param:
	err = encoder.Encode(obj.NormalReserveRateBps)
	if err != nil {
		return err
	}
	// Serialize `NormalReserveMaxAmount` param:
	err = encoder.Encode(obj.NormalReserveMaxAmount)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalLastCreatedRequestId` param:
	err = encoder.Encode(obj.WithdrawalLastCreatedRequestId)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalLastProcessedBatchId` param:
	err = encoder.Encode(obj.WithdrawalLastProcessedBatchId)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalLastBatchEnqueuedAt` param:
	err = encoder.Encode(obj.WithdrawalLastBatchEnqueuedAt)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalLastBatchProcessedAt` param:
	err = encoder.Encode(obj.WithdrawalLastBatchProcessedAt)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalPendingBatch` param:
	err = encoder.Encode(obj.WithdrawalPendingBatch)
	if err != nil {
		return err
	}
	// Serialize `Padding2` param:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalNumQueuedBatches` param:
	err = encoder.Encode(obj.WithdrawalNumQueuedBatches)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalQueuedBatches` param:
	err = encoder.Encode(obj.WithdrawalQueuedBatches)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	// Serialize `WithdrawableValueAsReceiptTokenAmount` param:
	err = encoder.Encode(obj.WithdrawableValueAsReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalUserReservedAmount` param:
	err = encoder.Encode(obj.WithdrawalUserReservedAmount)
	if err != nil {
		return err
	}
	// Serialize `OperationReceivableAmount` param:
	err = encoder.Encode(obj.OperationReceivableAmount)
	if err != nil {
		return err
	}
	// Serialize `OperationReservedAmount` param:
	err = encoder.Encode(obj.OperationReservedAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AssetState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenProgram`:
	err = decoder.Decode(&obj.TokenProgram)
	if err != nil {
		return err
	}
	// Deserialize `AccumulatedDepositCapacityAmount`:
	err = decoder.Decode(&obj.AccumulatedDepositCapacityAmount)
	if err != nil {
		return err
	}
	// Deserialize `AccumulatedDepositAmount`:
	err = decoder.Decode(&obj.AccumulatedDepositAmount)
	if err != nil {
		return err
	}
	// Deserialize `Depositable`:
	err = decoder.Decode(&obj.Depositable)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `Withdrawable`:
	err = decoder.Decode(&obj.Withdrawable)
	if err != nil {
		return err
	}
	// Deserialize `NormalReserveRateBps`:
	err = decoder.Decode(&obj.NormalReserveRateBps)
	if err != nil {
		return err
	}
	// Deserialize `NormalReserveMaxAmount`:
	err = decoder.Decode(&obj.NormalReserveMaxAmount)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalLastCreatedRequestId`:
	err = decoder.Decode(&obj.WithdrawalLastCreatedRequestId)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalLastProcessedBatchId`:
	err = decoder.Decode(&obj.WithdrawalLastProcessedBatchId)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalLastBatchEnqueuedAt`:
	err = decoder.Decode(&obj.WithdrawalLastBatchEnqueuedAt)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalLastBatchProcessedAt`:
	err = decoder.Decode(&obj.WithdrawalLastBatchProcessedAt)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalPendingBatch`:
	err = decoder.Decode(&obj.WithdrawalPendingBatch)
	if err != nil {
		return err
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalNumQueuedBatches`:
	err = decoder.Decode(&obj.WithdrawalNumQueuedBatches)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalQueuedBatches`:
	err = decoder.Decode(&obj.WithdrawalQueuedBatches)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawableValueAsReceiptTokenAmount`:
	err = decoder.Decode(&obj.WithdrawableValueAsReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalUserReservedAmount`:
	err = decoder.Decode(&obj.WithdrawalUserReservedAmount)
	if err != nil {
		return err
	}
	// Deserialize `OperationReceivableAmount`:
	err = decoder.Decode(&obj.OperationReceivableAmount)
	if err != nil {
		return err
	}
	// Deserialize `OperationReservedAmount`:
	err = decoder.Decode(&obj.OperationReservedAmount)
	if err != nil {
		return err
	}
	return nil
}

type ClaimUnrestakedVSTCommand struct {
	State *ClaimUnrestakedVSTCommandState
}

func (obj ClaimUnrestakedVSTCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `State` param:
	err = encoder.Encode(obj.State)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimUnrestakedVSTCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `State`:
	err = decoder.Decode(&obj.State)
	if err != nil {
		return err
	}
	return nil
}

type ClaimUnrestakedVSTCommandItem struct {
	Vault              ag_solanago.PublicKey
	ReceiptTokenMint   ag_solanago.PublicKey
	SupportedTokenMint ag_solanago.PublicKey
}

func (obj ClaimUnrestakedVSTCommandItem) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Vault` param:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenMint` param:
	err = encoder.Encode(obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimUnrestakedVSTCommandItem) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenMint`:
	err = decoder.Decode(&obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	return nil
}

type ClaimUnrestakedVSTCommandResult struct {
	Vault                                 ag_solanago.PublicKey
	ReceiptTokenMint                      ag_solanago.PublicKey
	SupportedTokenMint                    ag_solanago.PublicKey
	ClaimedSupportedTokenAmount           uint64
	OperationReservedSupportedTokenAmount uint64
	UnrestakedReceiptTokenAmount          uint64
	DeductedReceiptTokenFeeAmount         uint64
	TotalUnrestakingReceiptTokenAmount    uint64
}

func (obj ClaimUnrestakedVSTCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Vault` param:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenMint` param:
	err = encoder.Encode(obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Serialize `ClaimedSupportedTokenAmount` param:
	err = encoder.Encode(obj.ClaimedSupportedTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `OperationReservedSupportedTokenAmount` param:
	err = encoder.Encode(obj.OperationReservedSupportedTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `UnrestakedReceiptTokenAmount` param:
	err = encoder.Encode(obj.UnrestakedReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `DeductedReceiptTokenFeeAmount` param:
	err = encoder.Encode(obj.DeductedReceiptTokenFeeAmount)
	if err != nil {
		return err
	}
	// Serialize `TotalUnrestakingReceiptTokenAmount` param:
	err = encoder.Encode(obj.TotalUnrestakingReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimUnrestakedVSTCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenMint`:
	err = decoder.Decode(&obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `ClaimedSupportedTokenAmount`:
	err = decoder.Decode(&obj.ClaimedSupportedTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `OperationReservedSupportedTokenAmount`:
	err = decoder.Decode(&obj.OperationReservedSupportedTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `UnrestakedReceiptTokenAmount`:
	err = decoder.Decode(&obj.UnrestakedReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `DeductedReceiptTokenFeeAmount`:
	err = decoder.Decode(&obj.DeductedReceiptTokenFeeAmount)
	if err != nil {
		return err
	}
	// Deserialize `TotalUnrestakingReceiptTokenAmount`:
	err = decoder.Decode(&obj.TotalUnrestakingReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type ClaimUnrestakedVSTCommandState struct {
	Value claimUnrestakedVSTCommandState
}

func (obj ClaimUnrestakedVSTCommandState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	tmp := claimUnrestakedVSTCommandStateContainer{}
	switch realvalue := obj.Value.(type) {
	case ClaimUnrestakedVSTCommandStateNewTuple:
		tmp.Enum = 0
		tmp.New = realvalue
	case ClaimUnrestakedVSTCommandStatePrepareTuple:
		tmp.Enum = 1
		tmp.Prepare = realvalue
	case ClaimUnrestakedVSTCommandStateExecuteTuple:
		tmp.Enum = 2
		tmp.Execute = realvalue
	}
	return encoder.Encode(tmp)
}

func (obj *ClaimUnrestakedVSTCommandState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	tmp := new(claimUnrestakedVSTCommandStateContainer)
	err = decoder.Decode(tmp)
	if err != nil {
		return err
	}
	switch tmp.Enum {
	case 0:
		obj.Value = tmp.New
	case 1:
		obj.Value = tmp.Prepare
	case 2:
		obj.Value = tmp.Execute
	default:
		return fmt.Errorf("unknown enum index: %v", tmp.Enum)
	}
	return nil
}

type claimUnrestakedVSTCommandState interface {
	isClaimUnrestakedVSTCommandState()
}

type claimUnrestakedVSTCommandStateContainer struct {
	Enum    ag_binary.BorshEnum `borsh_enum:"true"`
	New     ClaimUnrestakedVSTCommandStateNewTuple
	Prepare ClaimUnrestakedVSTCommandStatePrepareTuple
	Execute ClaimUnrestakedVSTCommandStateExecuteTuple
}

type ClaimUnrestakedVSTCommandStateNewTuple uint8

func (obj ClaimUnrestakedVSTCommandStateNewTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *ClaimUnrestakedVSTCommandStateNewTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ ClaimUnrestakedVSTCommandStateNewTuple) isClaimUnrestakedVSTCommandState() {}

type ClaimUnrestakedVSTCommandStatePrepareTuple struct {
	Items []ClaimUnrestakedVSTCommandItem
}

func (obj ClaimUnrestakedVSTCommandStatePrepareTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimUnrestakedVSTCommandStatePrepareTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ ClaimUnrestakedVSTCommandStatePrepareTuple) isClaimUnrestakedVSTCommandState() {}

type ClaimUnrestakedVSTCommandStateExecuteTuple struct {
	Items []ClaimUnrestakedVSTCommandItem
}

func (obj ClaimUnrestakedVSTCommandStateExecuteTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimUnrestakedVSTCommandStateExecuteTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ ClaimUnrestakedVSTCommandStateExecuteTuple) isClaimUnrestakedVSTCommandState() {}

type ClaimUnstakedSOLCommand struct {
	State *ClaimUnstakedSOLCommandState
}

func (obj ClaimUnstakedSOLCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `State` param:
	err = encoder.Encode(obj.State)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimUnstakedSOLCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `State`:
	err = decoder.Decode(&obj.State)
	if err != nil {
		return err
	}
	return nil
}

type ClaimUnstakedSOLCommandResult struct {
	TokenMint                    ag_solanago.PublicKey
	ClaimedSolAmount             uint64
	TotalUnstakingSolAmount      uint64
	TransferredSolRevenueAmount  uint64
	OffsettedSolReceivableAmount uint64
	OffsettedAssetReceivables    []ClaimUnstakedSOLCommandResultAssetReceivable
	OperationReservedSolAmount   uint64
	OperationReceivableSolAmount uint64
}

func (obj ClaimUnstakedSOLCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	// Serialize `ClaimedSolAmount` param:
	err = encoder.Encode(obj.ClaimedSolAmount)
	if err != nil {
		return err
	}
	// Serialize `TotalUnstakingSolAmount` param:
	err = encoder.Encode(obj.TotalUnstakingSolAmount)
	if err != nil {
		return err
	}
	// Serialize `TransferredSolRevenueAmount` param:
	err = encoder.Encode(obj.TransferredSolRevenueAmount)
	if err != nil {
		return err
	}
	// Serialize `OffsettedSolReceivableAmount` param:
	err = encoder.Encode(obj.OffsettedSolReceivableAmount)
	if err != nil {
		return err
	}
	// Serialize `OffsettedAssetReceivables` param:
	err = encoder.Encode(obj.OffsettedAssetReceivables)
	if err != nil {
		return err
	}
	// Serialize `OperationReservedSolAmount` param:
	err = encoder.Encode(obj.OperationReservedSolAmount)
	if err != nil {
		return err
	}
	// Serialize `OperationReceivableSolAmount` param:
	err = encoder.Encode(obj.OperationReceivableSolAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimUnstakedSOLCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	// Deserialize `ClaimedSolAmount`:
	err = decoder.Decode(&obj.ClaimedSolAmount)
	if err != nil {
		return err
	}
	// Deserialize `TotalUnstakingSolAmount`:
	err = decoder.Decode(&obj.TotalUnstakingSolAmount)
	if err != nil {
		return err
	}
	// Deserialize `TransferredSolRevenueAmount`:
	err = decoder.Decode(&obj.TransferredSolRevenueAmount)
	if err != nil {
		return err
	}
	// Deserialize `OffsettedSolReceivableAmount`:
	err = decoder.Decode(&obj.OffsettedSolReceivableAmount)
	if err != nil {
		return err
	}
	// Deserialize `OffsettedAssetReceivables`:
	err = decoder.Decode(&obj.OffsettedAssetReceivables)
	if err != nil {
		return err
	}
	// Deserialize `OperationReservedSolAmount`:
	err = decoder.Decode(&obj.OperationReservedSolAmount)
	if err != nil {
		return err
	}
	// Deserialize `OperationReceivableSolAmount`:
	err = decoder.Decode(&obj.OperationReceivableSolAmount)
	if err != nil {
		return err
	}
	return nil
}

type ClaimUnstakedSOLCommandResultAssetReceivable struct {
	AssetTokenMint *ag_solanago.PublicKey `bin:"optional"`
	AssetAmount    uint64
}

func (obj ClaimUnstakedSOLCommandResultAssetReceivable) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AssetTokenMint` param (optional):
	{
		if obj.AssetTokenMint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.AssetTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `AssetAmount` param:
	err = encoder.Encode(obj.AssetAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimUnstakedSOLCommandResultAssetReceivable) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AssetTokenMint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.AssetTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `AssetAmount`:
	err = decoder.Decode(&obj.AssetAmount)
	if err != nil {
		return err
	}
	return nil
}

type ClaimUnstakedSOLCommandState struct {
	Value claimUnstakedSOLCommandState
}

func (obj ClaimUnstakedSOLCommandState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	tmp := claimUnstakedSOLCommandStateContainer{}
	switch realvalue := obj.Value.(type) {
	case ClaimUnstakedSOLCommandStateNewTuple:
		tmp.Enum = 0
		tmp.New = realvalue
	case ClaimUnstakedSOLCommandStatePrepareTuple:
		tmp.Enum = 1
		tmp.Prepare = realvalue
	case ClaimUnstakedSOLCommandStateGetClaimableStakeAccountsTuple:
		tmp.Enum = 2
		tmp.GetClaimableStakeAccounts = realvalue
	case ClaimUnstakedSOLCommandStateExecuteTuple:
		tmp.Enum = 3
		tmp.Execute = realvalue
	}
	return encoder.Encode(tmp)
}

func (obj *ClaimUnstakedSOLCommandState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	tmp := new(claimUnstakedSOLCommandStateContainer)
	err = decoder.Decode(tmp)
	if err != nil {
		return err
	}
	switch tmp.Enum {
	case 0:
		obj.Value = tmp.New
	case 1:
		obj.Value = tmp.Prepare
	case 2:
		obj.Value = tmp.GetClaimableStakeAccounts
	case 3:
		obj.Value = tmp.Execute
	default:
		return fmt.Errorf("unknown enum index: %v", tmp.Enum)
	}
	return nil
}

type claimUnstakedSOLCommandState interface {
	isClaimUnstakedSOLCommandState()
}

type claimUnstakedSOLCommandStateContainer struct {
	Enum                      ag_binary.BorshEnum `borsh_enum:"true"`
	New                       ClaimUnstakedSOLCommandStateNewTuple
	Prepare                   ClaimUnstakedSOLCommandStatePrepareTuple
	GetClaimableStakeAccounts ClaimUnstakedSOLCommandStateGetClaimableStakeAccountsTuple
	Execute                   ClaimUnstakedSOLCommandStateExecuteTuple
}

type ClaimUnstakedSOLCommandStateNewTuple uint8

func (obj ClaimUnstakedSOLCommandStateNewTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *ClaimUnstakedSOLCommandStateNewTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ ClaimUnstakedSOLCommandStateNewTuple) isClaimUnstakedSOLCommandState() {}

type ClaimUnstakedSOLCommandStatePrepareTuple struct {
	PoolTokenMints []ag_solanago.PublicKey
}

func (obj ClaimUnstakedSOLCommandStatePrepareTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolTokenMints` param:
	err = encoder.Encode(obj.PoolTokenMints)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimUnstakedSOLCommandStatePrepareTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolTokenMints`:
	err = decoder.Decode(&obj.PoolTokenMints)
	if err != nil {
		return err
	}
	return nil
}

func (_ ClaimUnstakedSOLCommandStatePrepareTuple) isClaimUnstakedSOLCommandState() {}

type ClaimUnstakedSOLCommandStateGetClaimableStakeAccountsTuple struct {
	PoolTokenMints []ag_solanago.PublicKey
}

func (obj ClaimUnstakedSOLCommandStateGetClaimableStakeAccountsTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolTokenMints` param:
	err = encoder.Encode(obj.PoolTokenMints)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimUnstakedSOLCommandStateGetClaimableStakeAccountsTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolTokenMints`:
	err = decoder.Decode(&obj.PoolTokenMints)
	if err != nil {
		return err
	}
	return nil
}

func (_ ClaimUnstakedSOLCommandStateGetClaimableStakeAccountsTuple) isClaimUnstakedSOLCommandState() {
}

type ClaimUnstakedSOLCommandStateExecuteTuple struct {
	PoolTokenMints               []ag_solanago.PublicKey
	ClaimableStakeAccountIndices []byte
}

func (obj ClaimUnstakedSOLCommandStateExecuteTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolTokenMints` param:
	err = encoder.Encode(obj.PoolTokenMints)
	if err != nil {
		return err
	}
	// Serialize `ClaimableStakeAccountIndices` param:
	err = encoder.Encode(obj.ClaimableStakeAccountIndices)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimUnstakedSOLCommandStateExecuteTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolTokenMints`:
	err = decoder.Decode(&obj.PoolTokenMints)
	if err != nil {
		return err
	}
	// Deserialize `ClaimableStakeAccountIndices`:
	err = decoder.Decode(&obj.ClaimableStakeAccountIndices)
	if err != nil {
		return err
	}
	return nil
}

func (_ ClaimUnstakedSOLCommandStateExecuteTuple) isClaimUnstakedSOLCommandState() {}

type DelegateVSTCommand struct {
	State *DelegateVSTCommandState
}

func (obj DelegateVSTCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `State` param:
	err = encoder.Encode(obj.State)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DelegateVSTCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `State`:
	err = decoder.Decode(&obj.State)
	if err != nil {
		return err
	}
	return nil
}

type DelegateVSTCommandItem struct {
	Operator                      ag_solanago.PublicKey
	AllocatedSupportedTokenAmount uint64
}

func (obj DelegateVSTCommandItem) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Operator` param:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return err
	}
	// Serialize `AllocatedSupportedTokenAmount` param:
	err = encoder.Encode(obj.AllocatedSupportedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DelegateVSTCommandItem) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return err
	}
	// Deserialize `AllocatedSupportedTokenAmount`:
	err = decoder.Decode(&obj.AllocatedSupportedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type DelegateVSTCommandResult struct {
	Vault       ag_solanago.PublicKey
	Delegations []DelegateVSTCommandResultDelegated
}

func (obj DelegateVSTCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Vault` param:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return err
	}
	// Serialize `Delegations` param:
	err = encoder.Encode(obj.Delegations)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DelegateVSTCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return err
	}
	// Deserialize `Delegations`:
	err = decoder.Decode(&obj.Delegations)
	if err != nil {
		return err
	}
	return nil
}

type DelegateVSTCommandResultDelegated struct {
	Operator                  ag_solanago.PublicKey
	DelegatedTokenAmount      uint64
	TotalDelegatedTokenAmount uint64
}

func (obj DelegateVSTCommandResultDelegated) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Operator` param:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return err
	}
	// Serialize `DelegatedTokenAmount` param:
	err = encoder.Encode(obj.DelegatedTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `TotalDelegatedTokenAmount` param:
	err = encoder.Encode(obj.TotalDelegatedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DelegateVSTCommandResultDelegated) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return err
	}
	// Deserialize `DelegatedTokenAmount`:
	err = decoder.Decode(&obj.DelegatedTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `TotalDelegatedTokenAmount`:
	err = decoder.Decode(&obj.TotalDelegatedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type DelegateVSTCommandState struct {
	Value delegateVSTCommandState
}

func (obj DelegateVSTCommandState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	tmp := delegateVSTCommandStateContainer{}
	switch realvalue := obj.Value.(type) {
	case DelegateVSTCommandStateNewTuple:
		tmp.Enum = 0
		tmp.New = realvalue
	case DelegateVSTCommandStatePrepareTuple:
		tmp.Enum = 1
		tmp.Prepare = realvalue
	case DelegateVSTCommandStateExecuteTuple:
		tmp.Enum = 2
		tmp.Execute = realvalue
	}
	return encoder.Encode(tmp)
}

func (obj *DelegateVSTCommandState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	tmp := new(delegateVSTCommandStateContainer)
	err = decoder.Decode(tmp)
	if err != nil {
		return err
	}
	switch tmp.Enum {
	case 0:
		obj.Value = tmp.New
	case 1:
		obj.Value = tmp.Prepare
	case 2:
		obj.Value = tmp.Execute
	default:
		return fmt.Errorf("unknown enum index: %v", tmp.Enum)
	}
	return nil
}

type delegateVSTCommandState interface {
	isDelegateVSTCommandState()
}

type delegateVSTCommandStateContainer struct {
	Enum    ag_binary.BorshEnum `borsh_enum:"true"`
	New     DelegateVSTCommandStateNewTuple
	Prepare DelegateVSTCommandStatePrepareTuple
	Execute DelegateVSTCommandStateExecuteTuple
}

type DelegateVSTCommandStateNewTuple uint8

func (obj DelegateVSTCommandStateNewTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *DelegateVSTCommandStateNewTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ DelegateVSTCommandStateNewTuple) isDelegateVSTCommandState() {}

type DelegateVSTCommandStatePrepareTuple struct {
	Vaults []ag_solanago.PublicKey
}

func (obj DelegateVSTCommandStatePrepareTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Vaults` param:
	err = encoder.Encode(obj.Vaults)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DelegateVSTCommandStatePrepareTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Vaults`:
	err = decoder.Decode(&obj.Vaults)
	if err != nil {
		return err
	}
	return nil
}

func (_ DelegateVSTCommandStatePrepareTuple) isDelegateVSTCommandState() {}

type DelegateVSTCommandStateExecuteTuple struct {
	Vaults []ag_solanago.PublicKey
	Items  []DelegateVSTCommandItem
}

func (obj DelegateVSTCommandStateExecuteTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Vaults` param:
	err = encoder.Encode(obj.Vaults)
	if err != nil {
		return err
	}
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DelegateVSTCommandStateExecuteTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Vaults`:
	err = decoder.Decode(&obj.Vaults)
	if err != nil {
		return err
	}
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ DelegateVSTCommandStateExecuteTuple) isDelegateVSTCommandState() {}

type DenormalizeNTCommand struct {
	State *DenormalizeNTCommandState
}

func (obj DenormalizeNTCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `State` param:
	err = encoder.Encode(obj.State)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DenormalizeNTCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `State`:
	err = decoder.Decode(&obj.State)
	if err != nil {
		return err
	}
	return nil
}

type DenormalizeNTCommandItem struct {
	SupportedTokenMint             ag_solanago.PublicKey
	AllocatedNormalizedTokenAmount uint64
}

func (obj DenormalizeNTCommandItem) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SupportedTokenMint` param:
	err = encoder.Encode(obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Serialize `AllocatedNormalizedTokenAmount` param:
	err = encoder.Encode(obj.AllocatedNormalizedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DenormalizeNTCommandItem) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SupportedTokenMint`:
	err = decoder.Decode(&obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `AllocatedNormalizedTokenAmount`:
	err = decoder.Decode(&obj.AllocatedNormalizedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type DenormalizeNTCommandResult struct {
	SupportedTokenMint                     ag_solanago.PublicKey
	BurntNormalizedTokenAmount             uint64
	OperationReservedNormalizedTokenAmount uint64
	DenormalizedSupportedTokenAmount       uint64
	OperationReservedSupportedTokenAmount  uint64
}

func (obj DenormalizeNTCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SupportedTokenMint` param:
	err = encoder.Encode(obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Serialize `BurntNormalizedTokenAmount` param:
	err = encoder.Encode(obj.BurntNormalizedTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `OperationReservedNormalizedTokenAmount` param:
	err = encoder.Encode(obj.OperationReservedNormalizedTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `DenormalizedSupportedTokenAmount` param:
	err = encoder.Encode(obj.DenormalizedSupportedTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `OperationReservedSupportedTokenAmount` param:
	err = encoder.Encode(obj.OperationReservedSupportedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DenormalizeNTCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SupportedTokenMint`:
	err = decoder.Decode(&obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `BurntNormalizedTokenAmount`:
	err = decoder.Decode(&obj.BurntNormalizedTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `OperationReservedNormalizedTokenAmount`:
	err = decoder.Decode(&obj.OperationReservedNormalizedTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `DenormalizedSupportedTokenAmount`:
	err = decoder.Decode(&obj.DenormalizedSupportedTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `OperationReservedSupportedTokenAmount`:
	err = decoder.Decode(&obj.OperationReservedSupportedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type DenormalizeNTCommandState struct {
	Value denormalizeNTCommandState
}

func (obj DenormalizeNTCommandState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	tmp := denormalizeNTCommandStateContainer{}
	switch realvalue := obj.Value.(type) {
	case DenormalizeNTCommandStateNewTuple:
		tmp.Enum = 0
		tmp.New = realvalue
	case DenormalizeNTCommandStatePrepareTuple:
		tmp.Enum = 1
		tmp.Prepare = realvalue
	case DenormalizeNTCommandStateExecuteTuple:
		tmp.Enum = 2
		tmp.Execute = realvalue
	}
	return encoder.Encode(tmp)
}

func (obj *DenormalizeNTCommandState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	tmp := new(denormalizeNTCommandStateContainer)
	err = decoder.Decode(tmp)
	if err != nil {
		return err
	}
	switch tmp.Enum {
	case 0:
		obj.Value = tmp.New
	case 1:
		obj.Value = tmp.Prepare
	case 2:
		obj.Value = tmp.Execute
	default:
		return fmt.Errorf("unknown enum index: %v", tmp.Enum)
	}
	return nil
}

type denormalizeNTCommandState interface {
	isDenormalizeNTCommandState()
}

type denormalizeNTCommandStateContainer struct {
	Enum    ag_binary.BorshEnum `borsh_enum:"true"`
	New     DenormalizeNTCommandStateNewTuple
	Prepare DenormalizeNTCommandStatePrepareTuple
	Execute DenormalizeNTCommandStateExecuteTuple
}

type DenormalizeNTCommandStateNewTuple uint8

func (obj DenormalizeNTCommandStateNewTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *DenormalizeNTCommandStateNewTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ DenormalizeNTCommandStateNewTuple) isDenormalizeNTCommandState() {}

type DenormalizeNTCommandStatePrepareTuple struct {
	Items []DenormalizeNTCommandItem
}

func (obj DenormalizeNTCommandStatePrepareTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DenormalizeNTCommandStatePrepareTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ DenormalizeNTCommandStatePrepareTuple) isDenormalizeNTCommandState() {}

type DenormalizeNTCommandStateExecuteTuple struct {
	Items []DenormalizeNTCommandItem
}

func (obj DenormalizeNTCommandStateExecuteTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DenormalizeNTCommandStateExecuteTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ DenormalizeNTCommandStateExecuteTuple) isDenormalizeNTCommandState() {}

type DepositMetadata struct {
	User                    ag_solanago.PublicKey
	WalletProvider          string
	ContributionAccrualRate uint16
	ExpiredAt               int64
}

func (obj DepositMetadata) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `WalletProvider` param:
	err = encoder.Encode(obj.WalletProvider)
	if err != nil {
		return err
	}
	// Serialize `ContributionAccrualRate` param:
	err = encoder.Encode(obj.ContributionAccrualRate)
	if err != nil {
		return err
	}
	// Serialize `ExpiredAt` param:
	err = encoder.Encode(obj.ExpiredAt)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DepositMetadata) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `WalletProvider`:
	err = decoder.Decode(&obj.WalletProvider)
	if err != nil {
		return err
	}
	// Deserialize `ContributionAccrualRate`:
	err = decoder.Decode(&obj.ContributionAccrualRate)
	if err != nil {
		return err
	}
	// Deserialize `ExpiredAt`:
	err = decoder.Decode(&obj.ExpiredAt)
	if err != nil {
		return err
	}
	return nil
}

type EnqueueWithdrawalBatchCommand struct {
	Forced bool
}

func (obj EnqueueWithdrawalBatchCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Forced` param:
	err = encoder.Encode(obj.Forced)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EnqueueWithdrawalBatchCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Forced`:
	err = decoder.Decode(&obj.Forced)
	if err != nil {
		return err
	}
	return nil
}

type EnqueueWithdrawalBatchCommandResult struct {
	EnqueuedReceiptTokenAmount    uint64
	TotalQueuedReceiptTokenAmount uint64
}

func (obj EnqueueWithdrawalBatchCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `EnqueuedReceiptTokenAmount` param:
	err = encoder.Encode(obj.EnqueuedReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `TotalQueuedReceiptTokenAmount` param:
	err = encoder.Encode(obj.TotalQueuedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EnqueueWithdrawalBatchCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `EnqueuedReceiptTokenAmount`:
	err = decoder.Decode(&obj.EnqueuedReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `TotalQueuedReceiptTokenAmount`:
	err = decoder.Decode(&obj.TotalQueuedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type FundAccount struct {
	DataVersion               uint16
	Bump                      uint8
	ReserveAccountBump        uint8
	TreasuryAccountBump       uint8
	WrapAccountBump           uint8
	Padding                   [8]uint8
	TransferEnabled           uint8
	AddressLookupTableEnabled uint8
	AddressLookupTableAccount ag_solanago.PublicKey
	ReserveAccount            ag_solanago.PublicKey
	TreasuryAccount           ag_solanago.PublicKey

	// receipt token information
	ReceiptTokenMint             ag_solanago.PublicKey
	ReceiptTokenProgram          ag_solanago.PublicKey
	ReceiptTokenDecimals         uint8
	Padding2                     [7]uint8
	ReceiptTokenSupplyAmount     uint64
	OneReceiptTokenAsSol         uint64
	ReceiptTokenValueUpdatedSlot uint64
	ReceiptTokenValue            TokenValuePod

	// global withdrawal configurations
	WithdrawalBatchThresholdIntervalSeconds int64
	WithdrawalFeeRateBps                    uint16
	WithdrawalEnabled                       uint8
	DepositEnabled                          uint8
	DonationEnabled                         uint8
	Padding4                                [3]uint8

	// SOL deposit & withdrawal
	Sol AssetState

	// underlying assets
	Padding6           [15]uint8
	NumSupportedTokens uint8
	SupportedTokens    [30]SupportedToken

	// optional basket of underlying assets
	NormalizedToken NormalizedToken

	// investments
	Padding7           [15]uint8
	NumRestakingVaults uint8
	RestakingVaults    [16]RestakingVault
	Padding8           [112]uint8

	// fund operation state
	Operation OperationState

	// optional wrapped token of fund receipt token
	WrapAccount  ag_solanago.PublicKey
	WrappedToken WrappedToken

	// which DEX to use for swap between two tokens
	NumTokenSwapStrategies uint8
	Padding9               [7]uint8
	TokenSwapStrategies    [30]TokenSwapStrategy
	Reserved               [3616]uint8
}

func (obj FundAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DataVersion` param:
	err = encoder.Encode(obj.DataVersion)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `ReserveAccountBump` param:
	err = encoder.Encode(obj.ReserveAccountBump)
	if err != nil {
		return err
	}
	// Serialize `TreasuryAccountBump` param:
	err = encoder.Encode(obj.TreasuryAccountBump)
	if err != nil {
		return err
	}
	// Serialize `WrapAccountBump` param:
	err = encoder.Encode(obj.WrapAccountBump)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `TransferEnabled` param:
	err = encoder.Encode(obj.TransferEnabled)
	if err != nil {
		return err
	}
	// Serialize `AddressLookupTableEnabled` param:
	err = encoder.Encode(obj.AddressLookupTableEnabled)
	if err != nil {
		return err
	}
	// Serialize `AddressLookupTableAccount` param:
	err = encoder.Encode(obj.AddressLookupTableAccount)
	if err != nil {
		return err
	}
	// Serialize `ReserveAccount` param:
	err = encoder.Encode(obj.ReserveAccount)
	if err != nil {
		return err
	}
	// Serialize `TreasuryAccount` param:
	err = encoder.Encode(obj.TreasuryAccount)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenProgram` param:
	err = encoder.Encode(obj.ReceiptTokenProgram)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenDecimals` param:
	err = encoder.Encode(obj.ReceiptTokenDecimals)
	if err != nil {
		return err
	}
	// Serialize `Padding2` param:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenSupplyAmount` param:
	err = encoder.Encode(obj.ReceiptTokenSupplyAmount)
	if err != nil {
		return err
	}
	// Serialize `OneReceiptTokenAsSol` param:
	err = encoder.Encode(obj.OneReceiptTokenAsSol)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenValueUpdatedSlot` param:
	err = encoder.Encode(obj.ReceiptTokenValueUpdatedSlot)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenValue` param:
	err = encoder.Encode(obj.ReceiptTokenValue)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalBatchThresholdIntervalSeconds` param:
	err = encoder.Encode(obj.WithdrawalBatchThresholdIntervalSeconds)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalFeeRateBps` param:
	err = encoder.Encode(obj.WithdrawalFeeRateBps)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalEnabled` param:
	err = encoder.Encode(obj.WithdrawalEnabled)
	if err != nil {
		return err
	}
	// Serialize `DepositEnabled` param:
	err = encoder.Encode(obj.DepositEnabled)
	if err != nil {
		return err
	}
	// Serialize `DonationEnabled` param:
	err = encoder.Encode(obj.DonationEnabled)
	if err != nil {
		return err
	}
	// Serialize `Padding4` param:
	err = encoder.Encode(obj.Padding4)
	if err != nil {
		return err
	}
	// Serialize `Sol` param:
	err = encoder.Encode(obj.Sol)
	if err != nil {
		return err
	}
	// Serialize `Padding6` param:
	err = encoder.Encode(obj.Padding6)
	if err != nil {
		return err
	}
	// Serialize `NumSupportedTokens` param:
	err = encoder.Encode(obj.NumSupportedTokens)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokens` param:
	err = encoder.Encode(obj.SupportedTokens)
	if err != nil {
		return err
	}
	// Serialize `NormalizedToken` param:
	err = encoder.Encode(obj.NormalizedToken)
	if err != nil {
		return err
	}
	// Serialize `Padding7` param:
	err = encoder.Encode(obj.Padding7)
	if err != nil {
		return err
	}
	// Serialize `NumRestakingVaults` param:
	err = encoder.Encode(obj.NumRestakingVaults)
	if err != nil {
		return err
	}
	// Serialize `RestakingVaults` param:
	err = encoder.Encode(obj.RestakingVaults)
	if err != nil {
		return err
	}
	// Serialize `Padding8` param:
	err = encoder.Encode(obj.Padding8)
	if err != nil {
		return err
	}
	// Serialize `Operation` param:
	err = encoder.Encode(obj.Operation)
	if err != nil {
		return err
	}
	// Serialize `WrapAccount` param:
	err = encoder.Encode(obj.WrapAccount)
	if err != nil {
		return err
	}
	// Serialize `WrappedToken` param:
	err = encoder.Encode(obj.WrappedToken)
	if err != nil {
		return err
	}
	// Serialize `NumTokenSwapStrategies` param:
	err = encoder.Encode(obj.NumTokenSwapStrategies)
	if err != nil {
		return err
	}
	// Serialize `Padding9` param:
	err = encoder.Encode(obj.Padding9)
	if err != nil {
		return err
	}
	// Serialize `TokenSwapStrategies` param:
	err = encoder.Encode(obj.TokenSwapStrategies)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FundAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DataVersion`:
	err = decoder.Decode(&obj.DataVersion)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `ReserveAccountBump`:
	err = decoder.Decode(&obj.ReserveAccountBump)
	if err != nil {
		return err
	}
	// Deserialize `TreasuryAccountBump`:
	err = decoder.Decode(&obj.TreasuryAccountBump)
	if err != nil {
		return err
	}
	// Deserialize `WrapAccountBump`:
	err = decoder.Decode(&obj.WrapAccountBump)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `TransferEnabled`:
	err = decoder.Decode(&obj.TransferEnabled)
	if err != nil {
		return err
	}
	// Deserialize `AddressLookupTableEnabled`:
	err = decoder.Decode(&obj.AddressLookupTableEnabled)
	if err != nil {
		return err
	}
	// Deserialize `AddressLookupTableAccount`:
	err = decoder.Decode(&obj.AddressLookupTableAccount)
	if err != nil {
		return err
	}
	// Deserialize `ReserveAccount`:
	err = decoder.Decode(&obj.ReserveAccount)
	if err != nil {
		return err
	}
	// Deserialize `TreasuryAccount`:
	err = decoder.Decode(&obj.TreasuryAccount)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenProgram`:
	err = decoder.Decode(&obj.ReceiptTokenProgram)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenDecimals`:
	err = decoder.Decode(&obj.ReceiptTokenDecimals)
	if err != nil {
		return err
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenSupplyAmount`:
	err = decoder.Decode(&obj.ReceiptTokenSupplyAmount)
	if err != nil {
		return err
	}
	// Deserialize `OneReceiptTokenAsSol`:
	err = decoder.Decode(&obj.OneReceiptTokenAsSol)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenValueUpdatedSlot`:
	err = decoder.Decode(&obj.ReceiptTokenValueUpdatedSlot)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenValue`:
	err = decoder.Decode(&obj.ReceiptTokenValue)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalBatchThresholdIntervalSeconds`:
	err = decoder.Decode(&obj.WithdrawalBatchThresholdIntervalSeconds)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalFeeRateBps`:
	err = decoder.Decode(&obj.WithdrawalFeeRateBps)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalEnabled`:
	err = decoder.Decode(&obj.WithdrawalEnabled)
	if err != nil {
		return err
	}
	// Deserialize `DepositEnabled`:
	err = decoder.Decode(&obj.DepositEnabled)
	if err != nil {
		return err
	}
	// Deserialize `DonationEnabled`:
	err = decoder.Decode(&obj.DonationEnabled)
	if err != nil {
		return err
	}
	// Deserialize `Padding4`:
	err = decoder.Decode(&obj.Padding4)
	if err != nil {
		return err
	}
	// Deserialize `Sol`:
	err = decoder.Decode(&obj.Sol)
	if err != nil {
		return err
	}
	// Deserialize `Padding6`:
	err = decoder.Decode(&obj.Padding6)
	if err != nil {
		return err
	}
	// Deserialize `NumSupportedTokens`:
	err = decoder.Decode(&obj.NumSupportedTokens)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokens`:
	err = decoder.Decode(&obj.SupportedTokens)
	if err != nil {
		return err
	}
	// Deserialize `NormalizedToken`:
	err = decoder.Decode(&obj.NormalizedToken)
	if err != nil {
		return err
	}
	// Deserialize `Padding7`:
	err = decoder.Decode(&obj.Padding7)
	if err != nil {
		return err
	}
	// Deserialize `NumRestakingVaults`:
	err = decoder.Decode(&obj.NumRestakingVaults)
	if err != nil {
		return err
	}
	// Deserialize `RestakingVaults`:
	err = decoder.Decode(&obj.RestakingVaults)
	if err != nil {
		return err
	}
	// Deserialize `Padding8`:
	err = decoder.Decode(&obj.Padding8)
	if err != nil {
		return err
	}
	// Deserialize `Operation`:
	err = decoder.Decode(&obj.Operation)
	if err != nil {
		return err
	}
	// Deserialize `WrapAccount`:
	err = decoder.Decode(&obj.WrapAccount)
	if err != nil {
		return err
	}
	// Deserialize `WrappedToken`:
	err = decoder.Decode(&obj.WrappedToken)
	if err != nil {
		return err
	}
	// Deserialize `NumTokenSwapStrategies`:
	err = decoder.Decode(&obj.NumTokenSwapStrategies)
	if err != nil {
		return err
	}
	// Deserialize `Padding9`:
	err = decoder.Decode(&obj.Padding9)
	if err != nil {
		return err
	}
	// Deserialize `TokenSwapStrategies`:
	err = decoder.Decode(&obj.TokenSwapStrategies)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type FundManagerUpdatedFund struct {
	ReceiptTokenMint ag_solanago.PublicKey
	FundAccount      ag_solanago.PublicKey
}

func (obj FundManagerUpdatedFund) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FundAccount` param:
	err = encoder.Encode(obj.FundAccount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FundManagerUpdatedFund) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FundAccount`:
	err = decoder.Decode(&obj.FundAccount)
	if err != nil {
		return err
	}
	return nil
}

type FundManagerUpdatedRewardPool struct {
	ReceiptTokenMint ag_solanago.PublicKey
	RewardAccount    ag_solanago.PublicKey
}

func (obj FundManagerUpdatedRewardPool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `RewardAccount` param:
	err = encoder.Encode(obj.RewardAccount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FundManagerUpdatedRewardPool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `RewardAccount`:
	err = decoder.Decode(&obj.RewardAccount)
	if err != nil {
		return err
	}
	return nil
}

type FundWithdrawalBatchAccount struct {
	DataVersion               uint16
	Bump                      uint8
	ReceiptTokenMint          ag_solanago.PublicKey
	SupportedTokenMint        *ag_solanago.PublicKey `bin:"optional"`
	SupportedTokenProgram     *ag_solanago.PublicKey `bin:"optional"`
	BatchId                   uint64
	NumRequests               uint64
	NumClaimedRequests        uint64
	ReceiptTokenAmount        uint64
	ClaimedReceiptTokenAmount uint64

	// asset to be withdrawn
	AssetUserAmount        uint64
	ClaimedAssetUserAmount uint64

	// informative: withdrawal fee is already paid to the treasury account, just informative.
	AssetFeeAmount uint64
	ProcessedAt    int64
	Reserved       [32]uint8
}

func (obj FundWithdrawalBatchAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DataVersion` param:
	err = encoder.Encode(obj.DataVersion)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenMint` param (optional):
	{
		if obj.SupportedTokenMint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `SupportedTokenProgram` param (optional):
	{
		if obj.SupportedTokenProgram == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SupportedTokenProgram)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `BatchId` param:
	err = encoder.Encode(obj.BatchId)
	if err != nil {
		return err
	}
	// Serialize `NumRequests` param:
	err = encoder.Encode(obj.NumRequests)
	if err != nil {
		return err
	}
	// Serialize `NumClaimedRequests` param:
	err = encoder.Encode(obj.NumClaimedRequests)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenAmount` param:
	err = encoder.Encode(obj.ReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `ClaimedReceiptTokenAmount` param:
	err = encoder.Encode(obj.ClaimedReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `AssetUserAmount` param:
	err = encoder.Encode(obj.AssetUserAmount)
	if err != nil {
		return err
	}
	// Serialize `ClaimedAssetUserAmount` param:
	err = encoder.Encode(obj.ClaimedAssetUserAmount)
	if err != nil {
		return err
	}
	// Serialize `AssetFeeAmount` param:
	err = encoder.Encode(obj.AssetFeeAmount)
	if err != nil {
		return err
	}
	// Serialize `ProcessedAt` param:
	err = encoder.Encode(obj.ProcessedAt)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FundWithdrawalBatchAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DataVersion`:
	err = decoder.Decode(&obj.DataVersion)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenMint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `SupportedTokenProgram` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SupportedTokenProgram)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `BatchId`:
	err = decoder.Decode(&obj.BatchId)
	if err != nil {
		return err
	}
	// Deserialize `NumRequests`:
	err = decoder.Decode(&obj.NumRequests)
	if err != nil {
		return err
	}
	// Deserialize `NumClaimedRequests`:
	err = decoder.Decode(&obj.NumClaimedRequests)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenAmount`:
	err = decoder.Decode(&obj.ReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `ClaimedReceiptTokenAmount`:
	err = decoder.Decode(&obj.ClaimedReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `AssetUserAmount`:
	err = decoder.Decode(&obj.AssetUserAmount)
	if err != nil {
		return err
	}
	// Deserialize `ClaimedAssetUserAmount`:
	err = decoder.Decode(&obj.ClaimedAssetUserAmount)
	if err != nil {
		return err
	}
	// Deserialize `AssetFeeAmount`:
	err = decoder.Decode(&obj.AssetFeeAmount)
	if err != nil {
		return err
	}
	// Deserialize `ProcessedAt`:
	err = decoder.Decode(&obj.ProcessedAt)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type HarvestRewardCommand struct {
	State *HarvestRewardCommandState
}

func (obj HarvestRewardCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `State` param:
	err = encoder.Encode(obj.State)
	if err != nil {
		return err
	}
	return nil
}

func (obj *HarvestRewardCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `State`:
	err = decoder.Decode(&obj.State)
	if err != nil {
		return err
	}
	return nil
}

type HarvestRewardCommandItem struct {
	RewardTokenMint ag_solanago.PublicKey
	HarvestType     *HarvestType
}

func (obj HarvestRewardCommandItem) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RewardTokenMint` param:
	err = encoder.Encode(obj.RewardTokenMint)
	if err != nil {
		return err
	}
	// Serialize `HarvestType` param:
	err = encoder.Encode(obj.HarvestType)
	if err != nil {
		return err
	}
	return nil
}

func (obj *HarvestRewardCommandItem) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RewardTokenMint`:
	err = decoder.Decode(&obj.RewardTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `HarvestType`:
	err = decoder.Decode(&obj.HarvestType)
	if err != nil {
		return err
	}
	return nil
}

type HarvestRewardCommandResult struct {
	RewardTokenMint        ag_solanago.PublicKey
	RewardTokenAmount      uint64
	SwappedTokenMint       *ag_solanago.PublicKey `bin:"optional"`
	DistributedTokenAmount uint64
	CompoundedTokenAmount  uint64
}

func (obj HarvestRewardCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RewardTokenMint` param:
	err = encoder.Encode(obj.RewardTokenMint)
	if err != nil {
		return err
	}
	// Serialize `RewardTokenAmount` param:
	err = encoder.Encode(obj.RewardTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `SwappedTokenMint` param (optional):
	{
		if obj.SwappedTokenMint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SwappedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `DistributedTokenAmount` param:
	err = encoder.Encode(obj.DistributedTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `CompoundedTokenAmount` param:
	err = encoder.Encode(obj.CompoundedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *HarvestRewardCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RewardTokenMint`:
	err = decoder.Decode(&obj.RewardTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `RewardTokenAmount`:
	err = decoder.Decode(&obj.RewardTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `SwappedTokenMint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SwappedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `DistributedTokenAmount`:
	err = decoder.Decode(&obj.DistributedTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `CompoundedTokenAmount`:
	err = decoder.Decode(&obj.CompoundedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type HarvestRewardCommandState struct {
	Value harvestRewardCommandState
}

func (obj HarvestRewardCommandState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	tmp := harvestRewardCommandStateContainer{}
	switch realvalue := obj.Value.(type) {
	case HarvestRewardCommandStateNewTuple:
		tmp.Enum = 0
		tmp.New = realvalue
	case HarvestRewardCommandStatePrepareTuple:
		tmp.Enum = 1
		tmp.Prepare = realvalue
	case HarvestRewardCommandStatePrepareSwapTuple:
		tmp.Enum = 2
		tmp.PrepareSwap = realvalue
	case HarvestRewardCommandStateExecuteTuple:
		tmp.Enum = 3
		tmp.Execute = realvalue
	}
	return encoder.Encode(tmp)
}

func (obj *HarvestRewardCommandState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	tmp := new(harvestRewardCommandStateContainer)
	err = decoder.Decode(tmp)
	if err != nil {
		return err
	}
	switch tmp.Enum {
	case 0:
		obj.Value = tmp.New
	case 1:
		obj.Value = tmp.Prepare
	case 2:
		obj.Value = tmp.PrepareSwap
	case 3:
		obj.Value = tmp.Execute
	default:
		return fmt.Errorf("unknown enum index: %v", tmp.Enum)
	}
	return nil
}

type harvestRewardCommandState interface {
	isHarvestRewardCommandState()
}

type harvestRewardCommandStateContainer struct {
	Enum        ag_binary.BorshEnum `borsh_enum:"true"`
	New         HarvestRewardCommandStateNewTuple
	Prepare     HarvestRewardCommandStatePrepareTuple
	PrepareSwap HarvestRewardCommandStatePrepareSwapTuple
	Execute     HarvestRewardCommandStateExecuteTuple
}

type HarvestRewardCommandStateNewTuple uint8

func (obj HarvestRewardCommandStateNewTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *HarvestRewardCommandStateNewTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ HarvestRewardCommandStateNewTuple) isHarvestRewardCommandState() {}

type HarvestRewardCommandStatePrepareTuple struct {
	Vaults []ag_solanago.PublicKey
	Items  []HarvestRewardCommandItem
}

func (obj HarvestRewardCommandStatePrepareTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Vaults` param:
	err = encoder.Encode(obj.Vaults)
	if err != nil {
		return err
	}
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *HarvestRewardCommandStatePrepareTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Vaults`:
	err = decoder.Decode(&obj.Vaults)
	if err != nil {
		return err
	}
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ HarvestRewardCommandStatePrepareTuple) isHarvestRewardCommandState() {}

type HarvestRewardCommandStatePrepareSwapTuple struct {
	Vaults []ag_solanago.PublicKey
	Items  []HarvestRewardCommandItem
}

func (obj HarvestRewardCommandStatePrepareSwapTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Vaults` param:
	err = encoder.Encode(obj.Vaults)
	if err != nil {
		return err
	}
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *HarvestRewardCommandStatePrepareSwapTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Vaults`:
	err = decoder.Decode(&obj.Vaults)
	if err != nil {
		return err
	}
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ HarvestRewardCommandStatePrepareSwapTuple) isHarvestRewardCommandState() {}

type HarvestRewardCommandStateExecuteTuple struct {
	Vaults []ag_solanago.PublicKey
	Items  []HarvestRewardCommandItem
}

func (obj HarvestRewardCommandStateExecuteTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Vaults` param:
	err = encoder.Encode(obj.Vaults)
	if err != nil {
		return err
	}
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *HarvestRewardCommandStateExecuteTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Vaults`:
	err = decoder.Decode(&obj.Vaults)
	if err != nil {
		return err
	}
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ HarvestRewardCommandStateExecuteTuple) isHarvestRewardCommandState() {}

type HarvestType struct {
	Value harvestType
}

func (obj HarvestType) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	tmp := harvestTypeContainer{}
	switch realvalue := obj.Value.(type) {
	case HarvestTypeSwapTuple:
		tmp.Enum = 0
		tmp.Swap = realvalue
	case HarvestTypeTransferTuple:
		tmp.Enum = 1
		tmp.Transfer = realvalue
	}
	return encoder.Encode(tmp)
}

func (obj *HarvestType) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	tmp := new(harvestTypeContainer)
	err = decoder.Decode(tmp)
	if err != nil {
		return err
	}
	switch tmp.Enum {
	case 0:
		obj.Value = tmp.Swap
	case 1:
		obj.Value = tmp.Transfer
	default:
		return fmt.Errorf("unknown enum index: %v", tmp.Enum)
	}
	return nil
}

type harvestType interface {
	isHarvestType()
}

type harvestTypeContainer struct {
	Enum     ag_binary.BorshEnum `borsh_enum:"true"`
	Swap     HarvestTypeSwapTuple
	Transfer HarvestTypeTransferTuple
}

type HarvestTypeSwapTuple struct {
	Elem0 ag_solanago.PublicKey
}

func (obj HarvestTypeSwapTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *HarvestTypeSwapTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ HarvestTypeSwapTuple) isHarvestType() {}

type HarvestTypeTransferTuple uint8

func (obj HarvestTypeTransferTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *HarvestTypeTransferTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ HarvestTypeTransferTuple) isHarvestType() {}

type InitializeCommand struct {
	State *InitializeCommandState
}

func (obj InitializeCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `State` param:
	err = encoder.Encode(obj.State)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitializeCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `State`:
	err = decoder.Decode(&obj.State)
	if err != nil {
		return err
	}
	return nil
}

type InitializeCommandRestakingVaultDelegationUpdateItem struct {
	Operator ag_solanago.PublicKey
	Index    uint64
}

func (obj InitializeCommandRestakingVaultDelegationUpdateItem) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Operator` param:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitializeCommandRestakingVaultDelegationUpdateItem) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	return nil
}

type InitializeCommandResult struct {
	RestakingVaultUpdated *InitializeCommandResultRestakingVaultUpdated `bin:"optional"`
}

func (obj InitializeCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RestakingVaultUpdated` param (optional):
	{
		if obj.RestakingVaultUpdated == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.RestakingVaultUpdated)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *InitializeCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RestakingVaultUpdated` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.RestakingVaultUpdated)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type InitializeCommandResultRestakingVaultDelegationUpdate struct {
	Operator           ag_solanago.PublicKey
	DelegatedAmount    uint64
	UndelegatingAmount uint64
}

func (obj InitializeCommandResultRestakingVaultDelegationUpdate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Operator` param:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return err
	}
	// Serialize `DelegatedAmount` param:
	err = encoder.Encode(obj.DelegatedAmount)
	if err != nil {
		return err
	}
	// Serialize `UndelegatingAmount` param:
	err = encoder.Encode(obj.UndelegatingAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitializeCommandResultRestakingVaultDelegationUpdate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return err
	}
	// Deserialize `DelegatedAmount`:
	err = decoder.Decode(&obj.DelegatedAmount)
	if err != nil {
		return err
	}
	// Deserialize `UndelegatingAmount`:
	err = decoder.Decode(&obj.UndelegatingAmount)
	if err != nil {
		return err
	}
	return nil
}

type InitializeCommandResultRestakingVaultUpdated struct {
	Vault              ag_solanago.PublicKey
	Epoch              uint64
	Finalized          bool
	SupportedTokenMint ag_solanago.PublicKey
	Delegations        []InitializeCommandResultRestakingVaultDelegationUpdate
}

func (obj InitializeCommandResultRestakingVaultUpdated) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Vault` param:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return err
	}
	// Serialize `Epoch` param:
	err = encoder.Encode(obj.Epoch)
	if err != nil {
		return err
	}
	// Serialize `Finalized` param:
	err = encoder.Encode(obj.Finalized)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenMint` param:
	err = encoder.Encode(obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Serialize `Delegations` param:
	err = encoder.Encode(obj.Delegations)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitializeCommandResultRestakingVaultUpdated) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return err
	}
	// Deserialize `Epoch`:
	err = decoder.Decode(&obj.Epoch)
	if err != nil {
		return err
	}
	// Deserialize `Finalized`:
	err = decoder.Decode(&obj.Finalized)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenMint`:
	err = decoder.Decode(&obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `Delegations`:
	err = decoder.Decode(&obj.Delegations)
	if err != nil {
		return err
	}
	return nil
}

type InitializeCommandState struct {
	Value initializeCommandState
}

func (obj InitializeCommandState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	tmp := initializeCommandStateContainer{}
	switch realvalue := obj.Value.(type) {
	case InitializeCommandStateNewRestakingVaultUpdateTuple:
		tmp.Enum = 0
		tmp.NewRestakingVaultUpdate = realvalue
	case InitializeCommandStatePrepareRestakingVaultUpdateTuple:
		tmp.Enum = 1
		tmp.PrepareRestakingVaultUpdate = realvalue
	case InitializeCommandStateExecuteRestakingVaultUpdateTuple:
		tmp.Enum = 2
		tmp.ExecuteRestakingVaultUpdate = realvalue
	}
	return encoder.Encode(tmp)
}

func (obj *InitializeCommandState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	tmp := new(initializeCommandStateContainer)
	err = decoder.Decode(tmp)
	if err != nil {
		return err
	}
	switch tmp.Enum {
	case 0:
		obj.Value = tmp.NewRestakingVaultUpdate
	case 1:
		obj.Value = tmp.PrepareRestakingVaultUpdate
	case 2:
		obj.Value = tmp.ExecuteRestakingVaultUpdate
	default:
		return fmt.Errorf("unknown enum index: %v", tmp.Enum)
	}
	return nil
}

type initializeCommandState interface {
	isInitializeCommandState()
}

type initializeCommandStateContainer struct {
	Enum                        ag_binary.BorshEnum `borsh_enum:"true"`
	NewRestakingVaultUpdate     InitializeCommandStateNewRestakingVaultUpdateTuple
	PrepareRestakingVaultUpdate InitializeCommandStatePrepareRestakingVaultUpdateTuple
	ExecuteRestakingVaultUpdate InitializeCommandStateExecuteRestakingVaultUpdateTuple
}

type InitializeCommandStateNewRestakingVaultUpdateTuple uint8

func (obj InitializeCommandStateNewRestakingVaultUpdateTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *InitializeCommandStateNewRestakingVaultUpdateTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ InitializeCommandStateNewRestakingVaultUpdateTuple) isInitializeCommandState() {}

type InitializeCommandStatePrepareRestakingVaultUpdateTuple struct {
	Vaults []ag_solanago.PublicKey
}

func (obj InitializeCommandStatePrepareRestakingVaultUpdateTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Vaults` param:
	err = encoder.Encode(obj.Vaults)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitializeCommandStatePrepareRestakingVaultUpdateTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Vaults`:
	err = decoder.Decode(&obj.Vaults)
	if err != nil {
		return err
	}
	return nil
}

func (_ InitializeCommandStatePrepareRestakingVaultUpdateTuple) isInitializeCommandState() {}

type InitializeCommandStateExecuteRestakingVaultUpdateTuple struct {
	Vaults []ag_solanago.PublicKey
	Items  []InitializeCommandRestakingVaultDelegationUpdateItem
}

func (obj InitializeCommandStateExecuteRestakingVaultUpdateTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Vaults` param:
	err = encoder.Encode(obj.Vaults)
	if err != nil {
		return err
	}
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitializeCommandStateExecuteRestakingVaultUpdateTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Vaults`:
	err = decoder.Decode(&obj.Vaults)
	if err != nil {
		return err
	}
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ InitializeCommandStateExecuteRestakingVaultUpdateTuple) isInitializeCommandState() {}

type NormalizeSTCommand struct {
	State *NormalizeSTCommandState
}

func (obj NormalizeSTCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `State` param:
	err = encoder.Encode(obj.State)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NormalizeSTCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `State`:
	err = decoder.Decode(&obj.State)
	if err != nil {
		return err
	}
	return nil
}

type NormalizeSTCommandItem struct {
	SupportedTokenMint   ag_solanago.PublicKey
	AllocatedTokenAmount uint64
}

func (obj NormalizeSTCommandItem) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SupportedTokenMint` param:
	err = encoder.Encode(obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Serialize `AllocatedTokenAmount` param:
	err = encoder.Encode(obj.AllocatedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NormalizeSTCommandItem) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SupportedTokenMint`:
	err = decoder.Decode(&obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `AllocatedTokenAmount`:
	err = decoder.Decode(&obj.AllocatedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type NormalizeSTCommandResult struct {
	SupportedTokenMint             ag_solanago.PublicKey
	NormalizedSupportedTokenAmount uint64
	MintedTokenAmount              uint64
	OperationReservedTokenAmount   uint64
}

func (obj NormalizeSTCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SupportedTokenMint` param:
	err = encoder.Encode(obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Serialize `NormalizedSupportedTokenAmount` param:
	err = encoder.Encode(obj.NormalizedSupportedTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `MintedTokenAmount` param:
	err = encoder.Encode(obj.MintedTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `OperationReservedTokenAmount` param:
	err = encoder.Encode(obj.OperationReservedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NormalizeSTCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SupportedTokenMint`:
	err = decoder.Decode(&obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `NormalizedSupportedTokenAmount`:
	err = decoder.Decode(&obj.NormalizedSupportedTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `MintedTokenAmount`:
	err = decoder.Decode(&obj.MintedTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `OperationReservedTokenAmount`:
	err = decoder.Decode(&obj.OperationReservedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type NormalizeSTCommandState struct {
	Value normalizeSTCommandState
}

func (obj NormalizeSTCommandState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	tmp := normalizeSTCommandStateContainer{}
	switch realvalue := obj.Value.(type) {
	case NormalizeSTCommandStateNewTuple:
		tmp.Enum = 0
		tmp.New = realvalue
	case NormalizeSTCommandStatePrepareTuple:
		tmp.Enum = 1
		tmp.Prepare = realvalue
	case NormalizeSTCommandStateExecuteTuple:
		tmp.Enum = 2
		tmp.Execute = realvalue
	}
	return encoder.Encode(tmp)
}

func (obj *NormalizeSTCommandState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	tmp := new(normalizeSTCommandStateContainer)
	err = decoder.Decode(tmp)
	if err != nil {
		return err
	}
	switch tmp.Enum {
	case 0:
		obj.Value = tmp.New
	case 1:
		obj.Value = tmp.Prepare
	case 2:
		obj.Value = tmp.Execute
	default:
		return fmt.Errorf("unknown enum index: %v", tmp.Enum)
	}
	return nil
}

type normalizeSTCommandState interface {
	isNormalizeSTCommandState()
}

type normalizeSTCommandStateContainer struct {
	Enum    ag_binary.BorshEnum `borsh_enum:"true"`
	New     NormalizeSTCommandStateNewTuple
	Prepare NormalizeSTCommandStatePrepareTuple
	Execute NormalizeSTCommandStateExecuteTuple
}

type NormalizeSTCommandStateNewTuple uint8

func (obj NormalizeSTCommandStateNewTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *NormalizeSTCommandStateNewTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ NormalizeSTCommandStateNewTuple) isNormalizeSTCommandState() {}

type NormalizeSTCommandStatePrepareTuple struct {
	Items []NormalizeSTCommandItem
}

func (obj NormalizeSTCommandStatePrepareTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NormalizeSTCommandStatePrepareTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ NormalizeSTCommandStatePrepareTuple) isNormalizeSTCommandState() {}

type NormalizeSTCommandStateExecuteTuple struct {
	Items []NormalizeSTCommandItem
}

func (obj NormalizeSTCommandStateExecuteTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NormalizeSTCommandStateExecuteTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ NormalizeSTCommandStateExecuteTuple) isNormalizeSTCommandState() {}

type NormalizedClaimableToken struct {
	Mint            ag_solanago.PublicKey
	Program         ag_solanago.PublicKey
	ClaimableAmount uint64
	Claimed         bool
}

func (obj NormalizedClaimableToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Program` param:
	err = encoder.Encode(obj.Program)
	if err != nil {
		return err
	}
	// Serialize `ClaimableAmount` param:
	err = encoder.Encode(obj.ClaimableAmount)
	if err != nil {
		return err
	}
	// Serialize `Claimed` param:
	err = encoder.Encode(obj.Claimed)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NormalizedClaimableToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Program`:
	err = decoder.Decode(&obj.Program)
	if err != nil {
		return err
	}
	// Deserialize `ClaimableAmount`:
	err = decoder.Decode(&obj.ClaimableAmount)
	if err != nil {
		return err
	}
	// Deserialize `Claimed`:
	err = decoder.Decode(&obj.Claimed)
	if err != nil {
		return err
	}
	return nil
}

type NormalizedSupportedToken struct {
	Mint                     ag_solanago.PublicKey
	Program                  ag_solanago.PublicKey
	ReserveAccount           ag_solanago.PublicKey
	LockedAmount             uint64
	Decimals                 uint8
	WithdrawalReservedAmount uint64
	OneTokenAsSol            uint64
	PricingSource            *TokenPricingSource
	Reserved                 [14]uint8
}

func (obj NormalizedSupportedToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Program` param:
	err = encoder.Encode(obj.Program)
	if err != nil {
		return err
	}
	// Serialize `ReserveAccount` param:
	err = encoder.Encode(obj.ReserveAccount)
	if err != nil {
		return err
	}
	// Serialize `LockedAmount` param:
	err = encoder.Encode(obj.LockedAmount)
	if err != nil {
		return err
	}
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalReservedAmount` param:
	err = encoder.Encode(obj.WithdrawalReservedAmount)
	if err != nil {
		return err
	}
	// Serialize `OneTokenAsSol` param:
	err = encoder.Encode(obj.OneTokenAsSol)
	if err != nil {
		return err
	}
	// Serialize `PricingSource` param:
	err = encoder.Encode(obj.PricingSource)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NormalizedSupportedToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Program`:
	err = decoder.Decode(&obj.Program)
	if err != nil {
		return err
	}
	// Deserialize `ReserveAccount`:
	err = decoder.Decode(&obj.ReserveAccount)
	if err != nil {
		return err
	}
	// Deserialize `LockedAmount`:
	err = decoder.Decode(&obj.LockedAmount)
	if err != nil {
		return err
	}
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalReservedAmount`:
	err = decoder.Decode(&obj.WithdrawalReservedAmount)
	if err != nil {
		return err
	}
	// Deserialize `OneTokenAsSol`:
	err = decoder.Decode(&obj.OneTokenAsSol)
	if err != nil {
		return err
	}
	// Deserialize `PricingSource`:
	err = decoder.Decode(&obj.PricingSource)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type NormalizedToken struct {
	Mint                    ag_solanago.PublicKey
	Program                 ag_solanago.PublicKey
	Decimals                uint8
	Enabled                 uint8
	Padding                 [6]uint8
	PricingSource           TokenPricingSourcePod
	OneTokenAsSol           uint64
	OperationReservedAmount uint64
	Reserved                [64]uint8
}

func (obj NormalizedToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Program` param:
	err = encoder.Encode(obj.Program)
	if err != nil {
		return err
	}
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	// Serialize `Enabled` param:
	err = encoder.Encode(obj.Enabled)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `PricingSource` param:
	err = encoder.Encode(obj.PricingSource)
	if err != nil {
		return err
	}
	// Serialize `OneTokenAsSol` param:
	err = encoder.Encode(obj.OneTokenAsSol)
	if err != nil {
		return err
	}
	// Serialize `OperationReservedAmount` param:
	err = encoder.Encode(obj.OperationReservedAmount)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NormalizedToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Program`:
	err = decoder.Decode(&obj.Program)
	if err != nil {
		return err
	}
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	// Deserialize `Enabled`:
	err = decoder.Decode(&obj.Enabled)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `PricingSource`:
	err = decoder.Decode(&obj.PricingSource)
	if err != nil {
		return err
	}
	// Deserialize `OneTokenAsSol`:
	err = decoder.Decode(&obj.OneTokenAsSol)
	if err != nil {
		return err
	}
	// Deserialize `OperationReservedAmount`:
	err = decoder.Decode(&obj.OperationReservedAmount)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type NormalizedTokenPoolAccount struct {
	DataVersion                     uint16
	Bump                            uint8
	NormalizedTokenMint             ag_solanago.PublicKey
	NormalizedTokenProgram          ag_solanago.PublicKey
	SupportedTokens                 []NormalizedSupportedToken
	NormalizedTokenDecimals         uint8
	NormalizedTokenSupplyAmount     uint64
	NormalizedTokenValue            TokenValue
	NormalizedTokenValueUpdatedSlot uint64
	OneNormalizedTokenAsSol         uint64
	Reserved                        [128]uint8
}

func (obj NormalizedTokenPoolAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DataVersion` param:
	err = encoder.Encode(obj.DataVersion)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `NormalizedTokenMint` param:
	err = encoder.Encode(obj.NormalizedTokenMint)
	if err != nil {
		return err
	}
	// Serialize `NormalizedTokenProgram` param:
	err = encoder.Encode(obj.NormalizedTokenProgram)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokens` param:
	err = encoder.Encode(obj.SupportedTokens)
	if err != nil {
		return err
	}
	// Serialize `NormalizedTokenDecimals` param:
	err = encoder.Encode(obj.NormalizedTokenDecimals)
	if err != nil {
		return err
	}
	// Serialize `NormalizedTokenSupplyAmount` param:
	err = encoder.Encode(obj.NormalizedTokenSupplyAmount)
	if err != nil {
		return err
	}
	// Serialize `NormalizedTokenValue` param:
	err = encoder.Encode(obj.NormalizedTokenValue)
	if err != nil {
		return err
	}
	// Serialize `NormalizedTokenValueUpdatedSlot` param:
	err = encoder.Encode(obj.NormalizedTokenValueUpdatedSlot)
	if err != nil {
		return err
	}
	// Serialize `OneNormalizedTokenAsSol` param:
	err = encoder.Encode(obj.OneNormalizedTokenAsSol)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NormalizedTokenPoolAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DataVersion`:
	err = decoder.Decode(&obj.DataVersion)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `NormalizedTokenMint`:
	err = decoder.Decode(&obj.NormalizedTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `NormalizedTokenProgram`:
	err = decoder.Decode(&obj.NormalizedTokenProgram)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokens`:
	err = decoder.Decode(&obj.SupportedTokens)
	if err != nil {
		return err
	}
	// Deserialize `NormalizedTokenDecimals`:
	err = decoder.Decode(&obj.NormalizedTokenDecimals)
	if err != nil {
		return err
	}
	// Deserialize `NormalizedTokenSupplyAmount`:
	err = decoder.Decode(&obj.NormalizedTokenSupplyAmount)
	if err != nil {
		return err
	}
	// Deserialize `NormalizedTokenValue`:
	err = decoder.Decode(&obj.NormalizedTokenValue)
	if err != nil {
		return err
	}
	// Deserialize `NormalizedTokenValueUpdatedSlot`:
	err = decoder.Decode(&obj.NormalizedTokenValueUpdatedSlot)
	if err != nil {
		return err
	}
	// Deserialize `OneNormalizedTokenAsSol`:
	err = decoder.Decode(&obj.OneNormalizedTokenAsSol)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type NormalizedTokenWithdrawalAccount struct {
	DataVersion           uint16
	Bump                  uint8
	WithdrawalAuthority   ag_solanago.PublicKey
	NormalizedTokenMint   ag_solanago.PublicKey
	NormalizedTokenPool   ag_solanago.PublicKey
	NormalizedTokenAmount uint64
	ClaimableTokens       []NormalizedClaimableToken
	CreatedAt             int64
	Reserved              [32]uint8
}

func (obj NormalizedTokenWithdrawalAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DataVersion` param:
	err = encoder.Encode(obj.DataVersion)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalAuthority` param:
	err = encoder.Encode(obj.WithdrawalAuthority)
	if err != nil {
		return err
	}
	// Serialize `NormalizedTokenMint` param:
	err = encoder.Encode(obj.NormalizedTokenMint)
	if err != nil {
		return err
	}
	// Serialize `NormalizedTokenPool` param:
	err = encoder.Encode(obj.NormalizedTokenPool)
	if err != nil {
		return err
	}
	// Serialize `NormalizedTokenAmount` param:
	err = encoder.Encode(obj.NormalizedTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `ClaimableTokens` param:
	err = encoder.Encode(obj.ClaimableTokens)
	if err != nil {
		return err
	}
	// Serialize `CreatedAt` param:
	err = encoder.Encode(obj.CreatedAt)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NormalizedTokenWithdrawalAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DataVersion`:
	err = decoder.Decode(&obj.DataVersion)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalAuthority`:
	err = decoder.Decode(&obj.WithdrawalAuthority)
	if err != nil {
		return err
	}
	// Deserialize `NormalizedTokenMint`:
	err = decoder.Decode(&obj.NormalizedTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `NormalizedTokenPool`:
	err = decoder.Decode(&obj.NormalizedTokenPool)
	if err != nil {
		return err
	}
	// Deserialize `NormalizedTokenAmount`:
	err = decoder.Decode(&obj.NormalizedTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `ClaimableTokens`:
	err = decoder.Decode(&obj.ClaimableTokens)
	if err != nil {
		return err
	}
	// Deserialize `CreatedAt`:
	err = decoder.Decode(&obj.CreatedAt)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type OperationCommand struct {
	Value operationCommand
}

func (obj OperationCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	tmp := operationCommandContainer{}
	switch realvalue := obj.Value.(type) {
	case OperationCommandInitializeTuple:
		tmp.Enum = 0
		tmp.Initialize = realvalue
	case OperationCommandEnqueueWithdrawalBatchTuple:
		tmp.Enum = 1
		tmp.EnqueueWithdrawalBatch = realvalue
	case OperationCommandClaimUnrestakedVSTTuple:
		tmp.Enum = 2
		tmp.ClaimUnrestakedVST = realvalue
	case OperationCommandDenormalizeNTTuple:
		tmp.Enum = 3
		tmp.DenormalizeNT = realvalue
	case OperationCommandUndelegateVSTTuple:
		tmp.Enum = 4
		tmp.UndelegateVST = realvalue
	case OperationCommandUnrestakeVRTTuple:
		tmp.Enum = 5
		tmp.UnrestakeVRT = realvalue
	case OperationCommandClaimUnstakedSOLTuple:
		tmp.Enum = 6
		tmp.ClaimUnstakedSOL = realvalue
	case OperationCommandProcessWithdrawalBatchTuple:
		tmp.Enum = 7
		tmp.ProcessWithdrawalBatch = realvalue
	case OperationCommandUnstakeLSTTuple:
		tmp.Enum = 8
		tmp.UnstakeLST = realvalue
	case OperationCommandStakeSOLTuple:
		tmp.Enum = 9
		tmp.StakeSOL = realvalue
	case OperationCommandNormalizeSTTuple:
		tmp.Enum = 10
		tmp.NormalizeST = realvalue
	case OperationCommandRestakeVSTTuple:
		tmp.Enum = 11
		tmp.RestakeVST = realvalue
	case OperationCommandDelegateVSTTuple:
		tmp.Enum = 12
		tmp.DelegateVST = realvalue
	case OperationCommandHarvestRewardTuple:
		tmp.Enum = 13
		tmp.HarvestReward = realvalue
	}
	return encoder.Encode(tmp)
}

func (obj *OperationCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	tmp := new(operationCommandContainer)
	err = decoder.Decode(tmp)
	if err != nil {
		return err
	}
	switch tmp.Enum {
	case 0:
		obj.Value = tmp.Initialize
	case 1:
		obj.Value = tmp.EnqueueWithdrawalBatch
	case 2:
		obj.Value = tmp.ClaimUnrestakedVST
	case 3:
		obj.Value = tmp.DenormalizeNT
	case 4:
		obj.Value = tmp.UndelegateVST
	case 5:
		obj.Value = tmp.UnrestakeVRT
	case 6:
		obj.Value = tmp.ClaimUnstakedSOL
	case 7:
		obj.Value = tmp.ProcessWithdrawalBatch
	case 8:
		obj.Value = tmp.UnstakeLST
	case 9:
		obj.Value = tmp.StakeSOL
	case 10:
		obj.Value = tmp.NormalizeST
	case 11:
		obj.Value = tmp.RestakeVST
	case 12:
		obj.Value = tmp.DelegateVST
	case 13:
		obj.Value = tmp.HarvestReward
	default:
		return fmt.Errorf("unknown enum index: %v", tmp.Enum)
	}
	return nil
}

type operationCommand interface {
	isOperationCommand()
}

type operationCommandContainer struct {
	Enum                   ag_binary.BorshEnum `borsh_enum:"true"`
	Initialize             OperationCommandInitializeTuple
	EnqueueWithdrawalBatch OperationCommandEnqueueWithdrawalBatchTuple
	ClaimUnrestakedVST     OperationCommandClaimUnrestakedVSTTuple
	DenormalizeNT          OperationCommandDenormalizeNTTuple
	UndelegateVST          OperationCommandUndelegateVSTTuple
	UnrestakeVRT           OperationCommandUnrestakeVRTTuple
	ClaimUnstakedSOL       OperationCommandClaimUnstakedSOLTuple
	ProcessWithdrawalBatch OperationCommandProcessWithdrawalBatchTuple
	UnstakeLST             OperationCommandUnstakeLSTTuple
	StakeSOL               OperationCommandStakeSOLTuple
	NormalizeST            OperationCommandNormalizeSTTuple
	RestakeVST             OperationCommandRestakeVSTTuple
	DelegateVST            OperationCommandDelegateVSTTuple
	HarvestReward          OperationCommandHarvestRewardTuple
}

type OperationCommandInitializeTuple struct {
	Elem0 InitializeCommand
}

func (obj OperationCommandInitializeTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandInitializeTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandInitializeTuple) isOperationCommand() {}

type OperationCommandEnqueueWithdrawalBatchTuple struct {
	Elem0 EnqueueWithdrawalBatchCommand
}

func (obj OperationCommandEnqueueWithdrawalBatchTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandEnqueueWithdrawalBatchTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandEnqueueWithdrawalBatchTuple) isOperationCommand() {}

type OperationCommandClaimUnrestakedVSTTuple struct {
	Elem0 ClaimUnrestakedVSTCommand
}

func (obj OperationCommandClaimUnrestakedVSTTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandClaimUnrestakedVSTTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandClaimUnrestakedVSTTuple) isOperationCommand() {}

type OperationCommandDenormalizeNTTuple struct {
	Elem0 DenormalizeNTCommand
}

func (obj OperationCommandDenormalizeNTTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandDenormalizeNTTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandDenormalizeNTTuple) isOperationCommand() {}

type OperationCommandUndelegateVSTTuple struct {
	Elem0 UndelegateVSTCommand
}

func (obj OperationCommandUndelegateVSTTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandUndelegateVSTTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandUndelegateVSTTuple) isOperationCommand() {}

type OperationCommandUnrestakeVRTTuple struct {
	Elem0 UnrestakeVRTCommand
}

func (obj OperationCommandUnrestakeVRTTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandUnrestakeVRTTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandUnrestakeVRTTuple) isOperationCommand() {}

type OperationCommandClaimUnstakedSOLTuple struct {
	Elem0 ClaimUnstakedSOLCommand
}

func (obj OperationCommandClaimUnstakedSOLTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandClaimUnstakedSOLTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandClaimUnstakedSOLTuple) isOperationCommand() {}

type OperationCommandProcessWithdrawalBatchTuple struct {
	Elem0 ProcessWithdrawalBatchCommand
}

func (obj OperationCommandProcessWithdrawalBatchTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandProcessWithdrawalBatchTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandProcessWithdrawalBatchTuple) isOperationCommand() {}

type OperationCommandUnstakeLSTTuple struct {
	Elem0 UnstakeLSTCommand
}

func (obj OperationCommandUnstakeLSTTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandUnstakeLSTTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandUnstakeLSTTuple) isOperationCommand() {}

type OperationCommandStakeSOLTuple struct {
	Elem0 StakeSOLCommand
}

func (obj OperationCommandStakeSOLTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandStakeSOLTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandStakeSOLTuple) isOperationCommand() {}

type OperationCommandNormalizeSTTuple struct {
	Elem0 NormalizeSTCommand
}

func (obj OperationCommandNormalizeSTTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandNormalizeSTTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandNormalizeSTTuple) isOperationCommand() {}

type OperationCommandRestakeVSTTuple struct {
	Elem0 RestakeVSTCommand
}

func (obj OperationCommandRestakeVSTTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandRestakeVSTTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandRestakeVSTTuple) isOperationCommand() {}

type OperationCommandDelegateVSTTuple struct {
	Elem0 DelegateVSTCommand
}

func (obj OperationCommandDelegateVSTTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandDelegateVSTTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandDelegateVSTTuple) isOperationCommand() {}

type OperationCommandHarvestRewardTuple struct {
	Elem0 HarvestRewardCommand
}

func (obj OperationCommandHarvestRewardTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandHarvestRewardTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandHarvestRewardTuple) isOperationCommand() {}

type OperationCommandAccountMeta struct {
	Pubkey     ag_solanago.PublicKey
	IsWritable bool
}

func (obj OperationCommandAccountMeta) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pubkey` param:
	err = encoder.Encode(obj.Pubkey)
	if err != nil {
		return err
	}
	// Serialize `IsWritable` param:
	err = encoder.Encode(obj.IsWritable)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandAccountMeta) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pubkey`:
	err = decoder.Decode(&obj.Pubkey)
	if err != nil {
		return err
	}
	// Deserialize `IsWritable`:
	err = decoder.Decode(&obj.IsWritable)
	if err != nil {
		return err
	}
	return nil
}

type OperationCommandAccountMetaPod struct {
	Pubkey     ag_solanago.PublicKey
	IsWritable uint8
	Padding    [7]uint8
}

func (obj OperationCommandAccountMetaPod) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pubkey` param:
	err = encoder.Encode(obj.Pubkey)
	if err != nil {
		return err
	}
	// Serialize `IsWritable` param:
	err = encoder.Encode(obj.IsWritable)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandAccountMetaPod) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pubkey`:
	err = decoder.Decode(&obj.Pubkey)
	if err != nil {
		return err
	}
	// Deserialize `IsWritable`:
	err = decoder.Decode(&obj.IsWritable)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type OperationCommandEntry struct {
	Command          *OperationCommand
	RequiredAccounts []OperationCommandAccountMeta
}

func (obj OperationCommandEntry) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Command` param:
	err = encoder.Encode(obj.Command)
	if err != nil {
		return err
	}
	// Serialize `RequiredAccounts` param:
	err = encoder.Encode(obj.RequiredAccounts)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandEntry) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Command`:
	err = decoder.Decode(&obj.Command)
	if err != nil {
		return err
	}
	// Deserialize `RequiredAccounts`:
	err = decoder.Decode(&obj.RequiredAccounts)
	if err != nil {
		return err
	}
	return nil
}

type OperationCommandEntryPod struct {
	NumRequiredAccounts uint8
	Padding             [7]uint8
	RequiredAccounts    [32]OperationCommandAccountMetaPod
	Command             OperationCommandPod
}

func (obj OperationCommandEntryPod) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NumRequiredAccounts` param:
	err = encoder.Encode(obj.NumRequiredAccounts)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `RequiredAccounts` param:
	err = encoder.Encode(obj.RequiredAccounts)
	if err != nil {
		return err
	}
	// Serialize `Command` param:
	err = encoder.Encode(obj.Command)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandEntryPod) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NumRequiredAccounts`:
	err = decoder.Decode(&obj.NumRequiredAccounts)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `RequiredAccounts`:
	err = decoder.Decode(&obj.RequiredAccounts)
	if err != nil {
		return err
	}
	// Deserialize `Command`:
	err = decoder.Decode(&obj.Command)
	if err != nil {
		return err
	}
	return nil
}

type OperationCommandPod struct {
	Discriminant uint8
	Buffer       [3126]uint8
}

func (obj OperationCommandPod) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Discriminant` param:
	err = encoder.Encode(obj.Discriminant)
	if err != nil {
		return err
	}
	// Serialize `Buffer` param:
	err = encoder.Encode(obj.Buffer)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandPod) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Discriminant`:
	err = decoder.Decode(&obj.Discriminant)
	if err != nil {
		return err
	}
	// Deserialize `Buffer`:
	err = decoder.Decode(&obj.Buffer)
	if err != nil {
		return err
	}
	return nil
}

type OperationCommandResult struct {
	Value operationCommandResult
}

func (obj OperationCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	tmp := operationCommandResultContainer{}
	switch realvalue := obj.Value.(type) {
	case OperationCommandResultInitializeTuple:
		tmp.Enum = 0
		tmp.Initialize = realvalue
	case OperationCommandResultEnqueueWithdrawalBatchTuple:
		tmp.Enum = 1
		tmp.EnqueueWithdrawalBatch = realvalue
	case OperationCommandResultClaimUnrestakedVSTTuple:
		tmp.Enum = 2
		tmp.ClaimUnrestakedVST = realvalue
	case OperationCommandResultDenormalizeNTTuple:
		tmp.Enum = 3
		tmp.DenormalizeNT = realvalue
	case OperationCommandResultUndelegateVSTTuple:
		tmp.Enum = 4
		tmp.UndelegateVST = realvalue
	case OperationCommandResultUnrestakeVRTTuple:
		tmp.Enum = 5
		tmp.UnrestakeVRT = realvalue
	case OperationCommandResultClaimUnstakedSOLTuple:
		tmp.Enum = 6
		tmp.ClaimUnstakedSOL = realvalue
	case OperationCommandResultProcessWithdrawalBatchTuple:
		tmp.Enum = 7
		tmp.ProcessWithdrawalBatch = realvalue
	case OperationCommandResultUnstakeLSTTuple:
		tmp.Enum = 8
		tmp.UnstakeLST = realvalue
	case OperationCommandResultStakeSOLTuple:
		tmp.Enum = 9
		tmp.StakeSOL = realvalue
	case OperationCommandResultNormalizeSTTuple:
		tmp.Enum = 10
		tmp.NormalizeST = realvalue
	case OperationCommandResultRestakeVSTTuple:
		tmp.Enum = 11
		tmp.RestakeVST = realvalue
	case OperationCommandResultDelegateVSTTuple:
		tmp.Enum = 12
		tmp.DelegateVST = realvalue
	case OperationCommandResultHarvestRewardTuple:
		tmp.Enum = 13
		tmp.HarvestReward = realvalue
	}
	return encoder.Encode(tmp)
}

func (obj *OperationCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	tmp := new(operationCommandResultContainer)
	err = decoder.Decode(tmp)
	if err != nil {
		return err
	}
	switch tmp.Enum {
	case 0:
		obj.Value = tmp.Initialize
	case 1:
		obj.Value = tmp.EnqueueWithdrawalBatch
	case 2:
		obj.Value = tmp.ClaimUnrestakedVST
	case 3:
		obj.Value = tmp.DenormalizeNT
	case 4:
		obj.Value = tmp.UndelegateVST
	case 5:
		obj.Value = tmp.UnrestakeVRT
	case 6:
		obj.Value = tmp.ClaimUnstakedSOL
	case 7:
		obj.Value = tmp.ProcessWithdrawalBatch
	case 8:
		obj.Value = tmp.UnstakeLST
	case 9:
		obj.Value = tmp.StakeSOL
	case 10:
		obj.Value = tmp.NormalizeST
	case 11:
		obj.Value = tmp.RestakeVST
	case 12:
		obj.Value = tmp.DelegateVST
	case 13:
		obj.Value = tmp.HarvestReward
	default:
		return fmt.Errorf("unknown enum index: %v", tmp.Enum)
	}
	return nil
}

type operationCommandResult interface {
	isOperationCommandResult()
}

type operationCommandResultContainer struct {
	Enum                   ag_binary.BorshEnum `borsh_enum:"true"`
	Initialize             OperationCommandResultInitializeTuple
	EnqueueWithdrawalBatch OperationCommandResultEnqueueWithdrawalBatchTuple
	ClaimUnrestakedVST     OperationCommandResultClaimUnrestakedVSTTuple
	DenormalizeNT          OperationCommandResultDenormalizeNTTuple
	UndelegateVST          OperationCommandResultUndelegateVSTTuple
	UnrestakeVRT           OperationCommandResultUnrestakeVRTTuple
	ClaimUnstakedSOL       OperationCommandResultClaimUnstakedSOLTuple
	ProcessWithdrawalBatch OperationCommandResultProcessWithdrawalBatchTuple
	UnstakeLST             OperationCommandResultUnstakeLSTTuple
	StakeSOL               OperationCommandResultStakeSOLTuple
	NormalizeST            OperationCommandResultNormalizeSTTuple
	RestakeVST             OperationCommandResultRestakeVSTTuple
	DelegateVST            OperationCommandResultDelegateVSTTuple
	HarvestReward          OperationCommandResultHarvestRewardTuple
}

type OperationCommandResultInitializeTuple struct {
	Elem0 InitializeCommandResult
}

func (obj OperationCommandResultInitializeTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandResultInitializeTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandResultInitializeTuple) isOperationCommandResult() {}

type OperationCommandResultEnqueueWithdrawalBatchTuple struct {
	Elem0 EnqueueWithdrawalBatchCommandResult
}

func (obj OperationCommandResultEnqueueWithdrawalBatchTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandResultEnqueueWithdrawalBatchTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandResultEnqueueWithdrawalBatchTuple) isOperationCommandResult() {}

type OperationCommandResultClaimUnrestakedVSTTuple struct {
	Elem0 ClaimUnrestakedVSTCommandResult
}

func (obj OperationCommandResultClaimUnrestakedVSTTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandResultClaimUnrestakedVSTTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandResultClaimUnrestakedVSTTuple) isOperationCommandResult() {}

type OperationCommandResultDenormalizeNTTuple struct {
	Elem0 DenormalizeNTCommandResult
}

func (obj OperationCommandResultDenormalizeNTTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandResultDenormalizeNTTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandResultDenormalizeNTTuple) isOperationCommandResult() {}

type OperationCommandResultUndelegateVSTTuple struct {
	Elem0 UndelegateVSTCommandResult
}

func (obj OperationCommandResultUndelegateVSTTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandResultUndelegateVSTTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandResultUndelegateVSTTuple) isOperationCommandResult() {}

type OperationCommandResultUnrestakeVRTTuple struct {
	Elem0 UnrestakeVRTCommandResult
}

func (obj OperationCommandResultUnrestakeVRTTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandResultUnrestakeVRTTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandResultUnrestakeVRTTuple) isOperationCommandResult() {}

type OperationCommandResultClaimUnstakedSOLTuple struct {
	Elem0 ClaimUnstakedSOLCommandResult
}

func (obj OperationCommandResultClaimUnstakedSOLTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandResultClaimUnstakedSOLTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandResultClaimUnstakedSOLTuple) isOperationCommandResult() {}

type OperationCommandResultProcessWithdrawalBatchTuple struct {
	Elem0 ProcessWithdrawalBatchCommandResult
}

func (obj OperationCommandResultProcessWithdrawalBatchTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandResultProcessWithdrawalBatchTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandResultProcessWithdrawalBatchTuple) isOperationCommandResult() {}

type OperationCommandResultUnstakeLSTTuple struct {
	Elem0 UnstakeLSTCommandResult
}

func (obj OperationCommandResultUnstakeLSTTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandResultUnstakeLSTTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandResultUnstakeLSTTuple) isOperationCommandResult() {}

type OperationCommandResultStakeSOLTuple struct {
	Elem0 StakeSOLCommandResult
}

func (obj OperationCommandResultStakeSOLTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandResultStakeSOLTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandResultStakeSOLTuple) isOperationCommandResult() {}

type OperationCommandResultNormalizeSTTuple struct {
	Elem0 NormalizeSTCommandResult
}

func (obj OperationCommandResultNormalizeSTTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandResultNormalizeSTTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandResultNormalizeSTTuple) isOperationCommandResult() {}

type OperationCommandResultRestakeVSTTuple struct {
	Elem0 RestakeVSTCommandResult
}

func (obj OperationCommandResultRestakeVSTTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandResultRestakeVSTTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandResultRestakeVSTTuple) isOperationCommandResult() {}

type OperationCommandResultDelegateVSTTuple struct {
	Elem0 DelegateVSTCommandResult
}

func (obj OperationCommandResultDelegateVSTTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandResultDelegateVSTTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandResultDelegateVSTTuple) isOperationCommandResult() {}

type OperationCommandResultHarvestRewardTuple struct {
	Elem0 HarvestRewardCommandResult
}

func (obj OperationCommandResultHarvestRewardTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Elem0` param:
	err = encoder.Encode(obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandResultHarvestRewardTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Elem0`:
	err = decoder.Decode(&obj.Elem0)
	if err != nil {
		return err
	}
	return nil
}

func (_ OperationCommandResultHarvestRewardTuple) isOperationCommandResult() {}

type OperationState struct {
	UpdatedSlot uint64
	UpdatedAt   int64
	ExpiredAt   int64
	Padding     [5]uint8

	// when the no_transition flag turned on, current command should not be transitioned to other command.
	// the purpose of this flag is for internal testing by set boundary of the reset command operation.
	NoTransition uint8
	NextSequence uint16
	NumOperated  uint64
	NextCommand  OperationCommandEntryPod
	Reserved     [49]uint8
}

func (obj OperationState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `UpdatedSlot` param:
	err = encoder.Encode(obj.UpdatedSlot)
	if err != nil {
		return err
	}
	// Serialize `UpdatedAt` param:
	err = encoder.Encode(obj.UpdatedAt)
	if err != nil {
		return err
	}
	// Serialize `ExpiredAt` param:
	err = encoder.Encode(obj.ExpiredAt)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `NoTransition` param:
	err = encoder.Encode(obj.NoTransition)
	if err != nil {
		return err
	}
	// Serialize `NextSequence` param:
	err = encoder.Encode(obj.NextSequence)
	if err != nil {
		return err
	}
	// Serialize `NumOperated` param:
	err = encoder.Encode(obj.NumOperated)
	if err != nil {
		return err
	}
	// Serialize `NextCommand` param:
	err = encoder.Encode(obj.NextCommand)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `UpdatedSlot`:
	err = decoder.Decode(&obj.UpdatedSlot)
	if err != nil {
		return err
	}
	// Deserialize `UpdatedAt`:
	err = decoder.Decode(&obj.UpdatedAt)
	if err != nil {
		return err
	}
	// Deserialize `ExpiredAt`:
	err = decoder.Decode(&obj.ExpiredAt)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `NoTransition`:
	err = decoder.Decode(&obj.NoTransition)
	if err != nil {
		return err
	}
	// Deserialize `NextSequence`:
	err = decoder.Decode(&obj.NextSequence)
	if err != nil {
		return err
	}
	// Deserialize `NumOperated`:
	err = decoder.Decode(&obj.NumOperated)
	if err != nil {
		return err
	}
	// Deserialize `NextCommand`:
	err = decoder.Decode(&obj.NextCommand)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type OperatorDonatedToFund struct {
	ReceiptTokenMint          ag_solanago.PublicKey
	FundAccount               ag_solanago.PublicKey
	SupportedTokenMint        *ag_solanago.PublicKey `bin:"optional"`
	DonatedAmount             uint64
	DepositedAmount           uint64
	OffsettedReceivableAmount uint64
}

func (obj OperatorDonatedToFund) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FundAccount` param:
	err = encoder.Encode(obj.FundAccount)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenMint` param (optional):
	{
		if obj.SupportedTokenMint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `DonatedAmount` param:
	err = encoder.Encode(obj.DonatedAmount)
	if err != nil {
		return err
	}
	// Serialize `DepositedAmount` param:
	err = encoder.Encode(obj.DepositedAmount)
	if err != nil {
		return err
	}
	// Serialize `OffsettedReceivableAmount` param:
	err = encoder.Encode(obj.OffsettedReceivableAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperatorDonatedToFund) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FundAccount`:
	err = decoder.Decode(&obj.FundAccount)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenMint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `DonatedAmount`:
	err = decoder.Decode(&obj.DonatedAmount)
	if err != nil {
		return err
	}
	// Deserialize `DepositedAmount`:
	err = decoder.Decode(&obj.DepositedAmount)
	if err != nil {
		return err
	}
	// Deserialize `OffsettedReceivableAmount`:
	err = decoder.Decode(&obj.OffsettedReceivableAmount)
	if err != nil {
		return err
	}
	return nil
}

type OperatorRanFundCommand struct {
	ReceiptTokenMint ag_solanago.PublicKey
	FundAccount      ag_solanago.PublicKey
	NextSequence     uint16
	NumOperated      uint64
	Command          *OperationCommand
	Result           *OperationCommandResult `bin:"optional"`
}

func (obj OperatorRanFundCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FundAccount` param:
	err = encoder.Encode(obj.FundAccount)
	if err != nil {
		return err
	}
	// Serialize `NextSequence` param:
	err = encoder.Encode(obj.NextSequence)
	if err != nil {
		return err
	}
	// Serialize `NumOperated` param:
	err = encoder.Encode(obj.NumOperated)
	if err != nil {
		return err
	}
	// Serialize `Command` param:
	err = encoder.Encode(obj.Command)
	if err != nil {
		return err
	}
	// Serialize `Result` param (optional):
	{
		if obj.Result == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Result)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *OperatorRanFundCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FundAccount`:
	err = decoder.Decode(&obj.FundAccount)
	if err != nil {
		return err
	}
	// Deserialize `NextSequence`:
	err = decoder.Decode(&obj.NextSequence)
	if err != nil {
		return err
	}
	// Deserialize `NumOperated`:
	err = decoder.Decode(&obj.NumOperated)
	if err != nil {
		return err
	}
	// Deserialize `Command`:
	err = decoder.Decode(&obj.Command)
	if err != nil {
		return err
	}
	// Deserialize `Result` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Result)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type OperatorUpdatedFundPrices struct {
	ReceiptTokenMint ag_solanago.PublicKey
	FundAccount      ag_solanago.PublicKey
}

func (obj OperatorUpdatedFundPrices) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FundAccount` param:
	err = encoder.Encode(obj.FundAccount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperatorUpdatedFundPrices) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FundAccount`:
	err = decoder.Decode(&obj.FundAccount)
	if err != nil {
		return err
	}
	return nil
}

type OperatorUpdatedNormalizedTokenPoolPrices struct {
	NormalizedTokenMint        ag_solanago.PublicKey
	NormalizedTokenPoolAccount ag_solanago.PublicKey
}

func (obj OperatorUpdatedNormalizedTokenPoolPrices) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NormalizedTokenMint` param:
	err = encoder.Encode(obj.NormalizedTokenMint)
	if err != nil {
		return err
	}
	// Serialize `NormalizedTokenPoolAccount` param:
	err = encoder.Encode(obj.NormalizedTokenPoolAccount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperatorUpdatedNormalizedTokenPoolPrices) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NormalizedTokenMint`:
	err = decoder.Decode(&obj.NormalizedTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `NormalizedTokenPoolAccount`:
	err = decoder.Decode(&obj.NormalizedTokenPoolAccount)
	if err != nil {
		return err
	}
	return nil
}

type OperatorUpdatedRewardPools struct {
	ReceiptTokenMint ag_solanago.PublicKey
	RewardAccount    ag_solanago.PublicKey
}

func (obj OperatorUpdatedRewardPools) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `RewardAccount` param:
	err = encoder.Encode(obj.RewardAccount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperatorUpdatedRewardPools) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `RewardAccount`:
	err = decoder.Decode(&obj.RewardAccount)
	if err != nil {
		return err
	}
	return nil
}

type ProcessWithdrawalBatchCommand struct {
	State  *ProcessWithdrawalBatchCommandState
	Forced bool
}

func (obj ProcessWithdrawalBatchCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `State` param:
	err = encoder.Encode(obj.State)
	if err != nil {
		return err
	}
	// Serialize `Forced` param:
	err = encoder.Encode(obj.Forced)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProcessWithdrawalBatchCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `State`:
	err = decoder.Decode(&obj.State)
	if err != nil {
		return err
	}
	// Deserialize `Forced`:
	err = decoder.Decode(&obj.Forced)
	if err != nil {
		return err
	}
	return nil
}

type ProcessWithdrawalBatchCommandResult struct {
	RequestedReceiptTokenAmount   uint64
	ProcessedReceiptTokenAmount   uint64
	AssetTokenMint                *ag_solanago.PublicKey `bin:"optional"`
	RequiredAssetAmount           uint64
	ReservedAssetUserAmount       uint64
	DeductedAssetFeeAmount        uint64
	OffsettedAssetReceivables     []ProcessWithdrawalBatchCommandResultAssetReceivable
	TransferredAssetRevenueAmount uint64
	WithdrawalFeeRateBps          uint16
}

func (obj ProcessWithdrawalBatchCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RequestedReceiptTokenAmount` param:
	err = encoder.Encode(obj.RequestedReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `ProcessedReceiptTokenAmount` param:
	err = encoder.Encode(obj.ProcessedReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `AssetTokenMint` param (optional):
	{
		if obj.AssetTokenMint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.AssetTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `RequiredAssetAmount` param:
	err = encoder.Encode(obj.RequiredAssetAmount)
	if err != nil {
		return err
	}
	// Serialize `ReservedAssetUserAmount` param:
	err = encoder.Encode(obj.ReservedAssetUserAmount)
	if err != nil {
		return err
	}
	// Serialize `DeductedAssetFeeAmount` param:
	err = encoder.Encode(obj.DeductedAssetFeeAmount)
	if err != nil {
		return err
	}
	// Serialize `OffsettedAssetReceivables` param:
	err = encoder.Encode(obj.OffsettedAssetReceivables)
	if err != nil {
		return err
	}
	// Serialize `TransferredAssetRevenueAmount` param:
	err = encoder.Encode(obj.TransferredAssetRevenueAmount)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalFeeRateBps` param:
	err = encoder.Encode(obj.WithdrawalFeeRateBps)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProcessWithdrawalBatchCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RequestedReceiptTokenAmount`:
	err = decoder.Decode(&obj.RequestedReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `ProcessedReceiptTokenAmount`:
	err = decoder.Decode(&obj.ProcessedReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `AssetTokenMint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.AssetTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `RequiredAssetAmount`:
	err = decoder.Decode(&obj.RequiredAssetAmount)
	if err != nil {
		return err
	}
	// Deserialize `ReservedAssetUserAmount`:
	err = decoder.Decode(&obj.ReservedAssetUserAmount)
	if err != nil {
		return err
	}
	// Deserialize `DeductedAssetFeeAmount`:
	err = decoder.Decode(&obj.DeductedAssetFeeAmount)
	if err != nil {
		return err
	}
	// Deserialize `OffsettedAssetReceivables`:
	err = decoder.Decode(&obj.OffsettedAssetReceivables)
	if err != nil {
		return err
	}
	// Deserialize `TransferredAssetRevenueAmount`:
	err = decoder.Decode(&obj.TransferredAssetRevenueAmount)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalFeeRateBps`:
	err = decoder.Decode(&obj.WithdrawalFeeRateBps)
	if err != nil {
		return err
	}
	return nil
}

type ProcessWithdrawalBatchCommandResultAssetReceivable struct {
	AssetTokenMint *ag_solanago.PublicKey `bin:"optional"`
	AssetAmount    uint64
}

func (obj ProcessWithdrawalBatchCommandResultAssetReceivable) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AssetTokenMint` param (optional):
	{
		if obj.AssetTokenMint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.AssetTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `AssetAmount` param:
	err = encoder.Encode(obj.AssetAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProcessWithdrawalBatchCommandResultAssetReceivable) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AssetTokenMint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.AssetTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `AssetAmount`:
	err = decoder.Decode(&obj.AssetAmount)
	if err != nil {
		return err
	}
	return nil
}

type ProcessWithdrawalBatchCommandState struct {
	Value processWithdrawalBatchCommandState
}

func (obj ProcessWithdrawalBatchCommandState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	tmp := processWithdrawalBatchCommandStateContainer{}
	switch realvalue := obj.Value.(type) {
	case ProcessWithdrawalBatchCommandStateNewTuple:
		tmp.Enum = 0
		tmp.New = realvalue
	case ProcessWithdrawalBatchCommandStatePrepareTuple:
		tmp.Enum = 1
		tmp.Prepare = realvalue
	case ProcessWithdrawalBatchCommandStateExecuteTuple:
		tmp.Enum = 2
		tmp.Execute = realvalue
	}
	return encoder.Encode(tmp)
}

func (obj *ProcessWithdrawalBatchCommandState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	tmp := new(processWithdrawalBatchCommandStateContainer)
	err = decoder.Decode(tmp)
	if err != nil {
		return err
	}
	switch tmp.Enum {
	case 0:
		obj.Value = tmp.New
	case 1:
		obj.Value = tmp.Prepare
	case 2:
		obj.Value = tmp.Execute
	default:
		return fmt.Errorf("unknown enum index: %v", tmp.Enum)
	}
	return nil
}

type processWithdrawalBatchCommandState interface {
	isProcessWithdrawalBatchCommandState()
}

type processWithdrawalBatchCommandStateContainer struct {
	Enum    ag_binary.BorshEnum `borsh_enum:"true"`
	New     ProcessWithdrawalBatchCommandStateNewTuple
	Prepare ProcessWithdrawalBatchCommandStatePrepareTuple
	Execute ProcessWithdrawalBatchCommandStateExecuteTuple
}

type ProcessWithdrawalBatchCommandStateNewTuple uint8

func (obj ProcessWithdrawalBatchCommandStateNewTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *ProcessWithdrawalBatchCommandStateNewTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ ProcessWithdrawalBatchCommandStateNewTuple) isProcessWithdrawalBatchCommandState() {}

type ProcessWithdrawalBatchCommandStatePrepareTuple struct {
	AssetTokenMint *ag_solanago.PublicKey `bin:"optional"`
}

func (obj ProcessWithdrawalBatchCommandStatePrepareTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AssetTokenMint` param (optional):
	{
		if obj.AssetTokenMint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.AssetTokenMint)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *ProcessWithdrawalBatchCommandStatePrepareTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AssetTokenMint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.AssetTokenMint)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (_ ProcessWithdrawalBatchCommandStatePrepareTuple) isProcessWithdrawalBatchCommandState() {}

type ProcessWithdrawalBatchCommandStateExecuteTuple struct {
	AssetTokenMint       *ag_solanago.PublicKey `bin:"optional"`
	NumProcessingBatches uint8
	ReceiptTokenAmount   uint64
}

func (obj ProcessWithdrawalBatchCommandStateExecuteTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AssetTokenMint` param (optional):
	{
		if obj.AssetTokenMint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.AssetTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `NumProcessingBatches` param:
	err = encoder.Encode(obj.NumProcessingBatches)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenAmount` param:
	err = encoder.Encode(obj.ReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProcessWithdrawalBatchCommandStateExecuteTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AssetTokenMint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.AssetTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `NumProcessingBatches`:
	err = decoder.Decode(&obj.NumProcessingBatches)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenAmount`:
	err = decoder.Decode(&obj.ReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (_ ProcessWithdrawalBatchCommandStateExecuteTuple) isProcessWithdrawalBatchCommandState() {}

type RestakeVSTCommand struct {
	State *RestakeVSTCommandState
}

func (obj RestakeVSTCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `State` param:
	err = encoder.Encode(obj.State)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RestakeVSTCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `State`:
	err = decoder.Decode(&obj.State)
	if err != nil {
		return err
	}
	return nil
}

type RestakeVSTCommandItem struct {
	Vault                ag_solanago.PublicKey
	SupportedTokenMint   ag_solanago.PublicKey
	AllocatedTokenAmount uint64
}

func (obj RestakeVSTCommandItem) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Vault` param:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenMint` param:
	err = encoder.Encode(obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Serialize `AllocatedTokenAmount` param:
	err = encoder.Encode(obj.AllocatedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RestakeVSTCommandItem) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenMint`:
	err = decoder.Decode(&obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `AllocatedTokenAmount`:
	err = decoder.Decode(&obj.AllocatedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type RestakeVSTCommandResult struct {
	SupportedTokenMint              ag_solanago.PublicKey
	DepositedSupportedTokenAmount   uint64
	DeductedSupportedTokenFeeAmount uint64
	MintedTokenAmount               uint64
	OperationReservedTokenAmount    uint64
}

func (obj RestakeVSTCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SupportedTokenMint` param:
	err = encoder.Encode(obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Serialize `DepositedSupportedTokenAmount` param:
	err = encoder.Encode(obj.DepositedSupportedTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `DeductedSupportedTokenFeeAmount` param:
	err = encoder.Encode(obj.DeductedSupportedTokenFeeAmount)
	if err != nil {
		return err
	}
	// Serialize `MintedTokenAmount` param:
	err = encoder.Encode(obj.MintedTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `OperationReservedTokenAmount` param:
	err = encoder.Encode(obj.OperationReservedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RestakeVSTCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SupportedTokenMint`:
	err = decoder.Decode(&obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `DepositedSupportedTokenAmount`:
	err = decoder.Decode(&obj.DepositedSupportedTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `DeductedSupportedTokenFeeAmount`:
	err = decoder.Decode(&obj.DeductedSupportedTokenFeeAmount)
	if err != nil {
		return err
	}
	// Deserialize `MintedTokenAmount`:
	err = decoder.Decode(&obj.MintedTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `OperationReservedTokenAmount`:
	err = decoder.Decode(&obj.OperationReservedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type RestakeVSTCommandState struct {
	Value restakeVSTCommandState
}

func (obj RestakeVSTCommandState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	tmp := restakeVSTCommandStateContainer{}
	switch realvalue := obj.Value.(type) {
	case RestakeVSTCommandStateNewTuple:
		tmp.Enum = 0
		tmp.New = realvalue
	case RestakeVSTCommandStatePrepareTuple:
		tmp.Enum = 1
		tmp.Prepare = realvalue
	case RestakeVSTCommandStateExecuteTuple:
		tmp.Enum = 2
		tmp.Execute = realvalue
	}
	return encoder.Encode(tmp)
}

func (obj *RestakeVSTCommandState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	tmp := new(restakeVSTCommandStateContainer)
	err = decoder.Decode(tmp)
	if err != nil {
		return err
	}
	switch tmp.Enum {
	case 0:
		obj.Value = tmp.New
	case 1:
		obj.Value = tmp.Prepare
	case 2:
		obj.Value = tmp.Execute
	default:
		return fmt.Errorf("unknown enum index: %v", tmp.Enum)
	}
	return nil
}

type restakeVSTCommandState interface {
	isRestakeVSTCommandState()
}

type restakeVSTCommandStateContainer struct {
	Enum    ag_binary.BorshEnum `borsh_enum:"true"`
	New     RestakeVSTCommandStateNewTuple
	Prepare RestakeVSTCommandStatePrepareTuple
	Execute RestakeVSTCommandStateExecuteTuple
}

type RestakeVSTCommandStateNewTuple uint8

func (obj RestakeVSTCommandStateNewTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *RestakeVSTCommandStateNewTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ RestakeVSTCommandStateNewTuple) isRestakeVSTCommandState() {}

type RestakeVSTCommandStatePrepareTuple struct {
	Items []RestakeVSTCommandItem
}

func (obj RestakeVSTCommandStatePrepareTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RestakeVSTCommandStatePrepareTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ RestakeVSTCommandStatePrepareTuple) isRestakeVSTCommandState() {}

type RestakeVSTCommandStateExecuteTuple struct {
	Items []RestakeVSTCommandItem
}

func (obj RestakeVSTCommandStateExecuteTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RestakeVSTCommandStateExecuteTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ RestakeVSTCommandStateExecuteTuple) isRestakeVSTCommandState() {}

type RestakingVault struct {
	Vault                ag_solanago.PublicKey
	Program              ag_solanago.PublicKey
	SupportedTokenMint   ag_solanago.PublicKey
	ReceiptTokenMint     ag_solanago.PublicKey
	ReceiptTokenProgram  ag_solanago.PublicKey
	ReceiptTokenDecimals uint8
	Padding              [7]uint8

	// transient price
	OneReceiptTokenAsSol                uint64
	ReceiptTokenPricingSource           TokenPricingSourcePod
	ReceiptTokenOperationReservedAmount uint64

	// the amount of vrt being unrestaked
	ReceiptTokenOperationReceivableAmount uint64

	// configuration: used for restaking allocation strategy.
	SolAllocationWeight         uint64
	SolAllocationCapacityAmount uint64
	Padding2                    [7]uint8
	NumDelegations              uint8
	Delegations                 [30]RestakingVaultDelegation
	RewardCommissionRateBps     uint16

	// auto-compounding
	Padding3                    [5]uint8
	NumCompoundingRewardTokens  uint8
	CompoundingRewardTokenMints [10]ag_solanago.PublicKey

	// reward to distribute
	Padding4                     [7]uint8
	NumDistributingRewardTokens  uint8
	DistributingRewardTokenMints [30]ag_solanago.PublicKey
	Reserved                     [2296]uint8
}

func (obj RestakingVault) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Vault` param:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return err
	}
	// Serialize `Program` param:
	err = encoder.Encode(obj.Program)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenMint` param:
	err = encoder.Encode(obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenProgram` param:
	err = encoder.Encode(obj.ReceiptTokenProgram)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenDecimals` param:
	err = encoder.Encode(obj.ReceiptTokenDecimals)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `OneReceiptTokenAsSol` param:
	err = encoder.Encode(obj.OneReceiptTokenAsSol)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenPricingSource` param:
	err = encoder.Encode(obj.ReceiptTokenPricingSource)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenOperationReservedAmount` param:
	err = encoder.Encode(obj.ReceiptTokenOperationReservedAmount)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenOperationReceivableAmount` param:
	err = encoder.Encode(obj.ReceiptTokenOperationReceivableAmount)
	if err != nil {
		return err
	}
	// Serialize `SolAllocationWeight` param:
	err = encoder.Encode(obj.SolAllocationWeight)
	if err != nil {
		return err
	}
	// Serialize `SolAllocationCapacityAmount` param:
	err = encoder.Encode(obj.SolAllocationCapacityAmount)
	if err != nil {
		return err
	}
	// Serialize `Padding2` param:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return err
	}
	// Serialize `NumDelegations` param:
	err = encoder.Encode(obj.NumDelegations)
	if err != nil {
		return err
	}
	// Serialize `Delegations` param:
	err = encoder.Encode(obj.Delegations)
	if err != nil {
		return err
	}
	// Serialize `RewardCommissionRateBps` param:
	err = encoder.Encode(obj.RewardCommissionRateBps)
	if err != nil {
		return err
	}
	// Serialize `Padding3` param:
	err = encoder.Encode(obj.Padding3)
	if err != nil {
		return err
	}
	// Serialize `NumCompoundingRewardTokens` param:
	err = encoder.Encode(obj.NumCompoundingRewardTokens)
	if err != nil {
		return err
	}
	// Serialize `CompoundingRewardTokenMints` param:
	err = encoder.Encode(obj.CompoundingRewardTokenMints)
	if err != nil {
		return err
	}
	// Serialize `Padding4` param:
	err = encoder.Encode(obj.Padding4)
	if err != nil {
		return err
	}
	// Serialize `NumDistributingRewardTokens` param:
	err = encoder.Encode(obj.NumDistributingRewardTokens)
	if err != nil {
		return err
	}
	// Serialize `DistributingRewardTokenMints` param:
	err = encoder.Encode(obj.DistributingRewardTokenMints)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RestakingVault) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return err
	}
	// Deserialize `Program`:
	err = decoder.Decode(&obj.Program)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenMint`:
	err = decoder.Decode(&obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenProgram`:
	err = decoder.Decode(&obj.ReceiptTokenProgram)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenDecimals`:
	err = decoder.Decode(&obj.ReceiptTokenDecimals)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `OneReceiptTokenAsSol`:
	err = decoder.Decode(&obj.OneReceiptTokenAsSol)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenPricingSource`:
	err = decoder.Decode(&obj.ReceiptTokenPricingSource)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenOperationReservedAmount`:
	err = decoder.Decode(&obj.ReceiptTokenOperationReservedAmount)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenOperationReceivableAmount`:
	err = decoder.Decode(&obj.ReceiptTokenOperationReceivableAmount)
	if err != nil {
		return err
	}
	// Deserialize `SolAllocationWeight`:
	err = decoder.Decode(&obj.SolAllocationWeight)
	if err != nil {
		return err
	}
	// Deserialize `SolAllocationCapacityAmount`:
	err = decoder.Decode(&obj.SolAllocationCapacityAmount)
	if err != nil {
		return err
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return err
	}
	// Deserialize `NumDelegations`:
	err = decoder.Decode(&obj.NumDelegations)
	if err != nil {
		return err
	}
	// Deserialize `Delegations`:
	err = decoder.Decode(&obj.Delegations)
	if err != nil {
		return err
	}
	// Deserialize `RewardCommissionRateBps`:
	err = decoder.Decode(&obj.RewardCommissionRateBps)
	if err != nil {
		return err
	}
	// Deserialize `Padding3`:
	err = decoder.Decode(&obj.Padding3)
	if err != nil {
		return err
	}
	// Deserialize `NumCompoundingRewardTokens`:
	err = decoder.Decode(&obj.NumCompoundingRewardTokens)
	if err != nil {
		return err
	}
	// Deserialize `CompoundingRewardTokenMints`:
	err = decoder.Decode(&obj.CompoundingRewardTokenMints)
	if err != nil {
		return err
	}
	// Deserialize `Padding4`:
	err = decoder.Decode(&obj.Padding4)
	if err != nil {
		return err
	}
	// Deserialize `NumDistributingRewardTokens`:
	err = decoder.Decode(&obj.NumDistributingRewardTokens)
	if err != nil {
		return err
	}
	// Deserialize `DistributingRewardTokenMints`:
	err = decoder.Decode(&obj.DistributingRewardTokenMints)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type RestakingVaultDelegation struct {
	Operator ag_solanago.PublicKey

	// configuration: used for delegation strategy.
	SupportedTokenAllocationWeight         uint64
	SupportedTokenAllocationCapacityAmount uint64

	// informative field; these values shall be synced from remote state periodically.
	SupportedTokenDelegatedAmount    uint64
	SupportedTokenUndelegatingAmount uint64

	// configuration: the amount requested to be undelegated as soon as possible regardless of current state, this value should be decreased by each undelegation requested amount.
	SupportedTokenRedelegatingAmount uint64
	Reserved                         [24]uint8
}

func (obj RestakingVaultDelegation) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Operator` param:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenAllocationWeight` param:
	err = encoder.Encode(obj.SupportedTokenAllocationWeight)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenAllocationCapacityAmount` param:
	err = encoder.Encode(obj.SupportedTokenAllocationCapacityAmount)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenDelegatedAmount` param:
	err = encoder.Encode(obj.SupportedTokenDelegatedAmount)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenUndelegatingAmount` param:
	err = encoder.Encode(obj.SupportedTokenUndelegatingAmount)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenRedelegatingAmount` param:
	err = encoder.Encode(obj.SupportedTokenRedelegatingAmount)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RestakingVaultDelegation) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenAllocationWeight`:
	err = decoder.Decode(&obj.SupportedTokenAllocationWeight)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenAllocationCapacityAmount`:
	err = decoder.Decode(&obj.SupportedTokenAllocationCapacityAmount)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenDelegatedAmount`:
	err = decoder.Decode(&obj.SupportedTokenDelegatedAmount)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenUndelegatingAmount`:
	err = decoder.Decode(&obj.SupportedTokenUndelegatingAmount)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenRedelegatingAmount`:
	err = decoder.Decode(&obj.SupportedTokenRedelegatingAmount)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type Reward struct {
	// ID is determined by reward account.
	Id                     uint16
	Name                   [14]uint8
	Description            [128]uint8
	RewardTypeDiscriminant uint8
	TokenMint              ag_solanago.PublicKey
	TokenProgram           ag_solanago.PublicKey
	Decimals               uint8
	Padding                [14]uint8
	Reserved               [16]uint64
}

func (obj Reward) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Id` param:
	err = encoder.Encode(obj.Id)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Description` param:
	err = encoder.Encode(obj.Description)
	if err != nil {
		return err
	}
	// Serialize `RewardTypeDiscriminant` param:
	err = encoder.Encode(obj.RewardTypeDiscriminant)
	if err != nil {
		return err
	}
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	// Serialize `TokenProgram` param:
	err = encoder.Encode(obj.TokenProgram)
	if err != nil {
		return err
	}
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Reward) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Id`:
	err = decoder.Decode(&obj.Id)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Description`:
	err = decoder.Decode(&obj.Description)
	if err != nil {
		return err
	}
	// Deserialize `RewardTypeDiscriminant`:
	err = decoder.Decode(&obj.RewardTypeDiscriminant)
	if err != nil {
		return err
	}
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenProgram`:
	err = decoder.Decode(&obj.TokenProgram)
	if err != nil {
		return err
	}
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type RewardAccount struct {
	DataVersion      uint16
	Bump             uint8
	ReceiptTokenMint ag_solanago.PublicKey
	MaxHolders       uint8
	MaxRewards       uint16
	MaxRewardPools   uint8
	NumHolders       uint8
	NumRewards       uint16
	NumRewardPools   uint8
	Padding          [5]uint8
	Holders1         [4]RewardPoolHolder
	Rewards1         [16]Reward
	RewardPools1     [4]RewardPool
}

func (obj RewardAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DataVersion` param:
	err = encoder.Encode(obj.DataVersion)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `MaxHolders` param:
	err = encoder.Encode(obj.MaxHolders)
	if err != nil {
		return err
	}
	// Serialize `MaxRewards` param:
	err = encoder.Encode(obj.MaxRewards)
	if err != nil {
		return err
	}
	// Serialize `MaxRewardPools` param:
	err = encoder.Encode(obj.MaxRewardPools)
	if err != nil {
		return err
	}
	// Serialize `NumHolders` param:
	err = encoder.Encode(obj.NumHolders)
	if err != nil {
		return err
	}
	// Serialize `NumRewards` param:
	err = encoder.Encode(obj.NumRewards)
	if err != nil {
		return err
	}
	// Serialize `NumRewardPools` param:
	err = encoder.Encode(obj.NumRewardPools)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `Holders1` param:
	err = encoder.Encode(obj.Holders1)
	if err != nil {
		return err
	}
	// Serialize `Rewards1` param:
	err = encoder.Encode(obj.Rewards1)
	if err != nil {
		return err
	}
	// Serialize `RewardPools1` param:
	err = encoder.Encode(obj.RewardPools1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RewardAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DataVersion`:
	err = decoder.Decode(&obj.DataVersion)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `MaxHolders`:
	err = decoder.Decode(&obj.MaxHolders)
	if err != nil {
		return err
	}
	// Deserialize `MaxRewards`:
	err = decoder.Decode(&obj.MaxRewards)
	if err != nil {
		return err
	}
	// Deserialize `MaxRewardPools`:
	err = decoder.Decode(&obj.MaxRewardPools)
	if err != nil {
		return err
	}
	// Deserialize `NumHolders`:
	err = decoder.Decode(&obj.NumHolders)
	if err != nil {
		return err
	}
	// Deserialize `NumRewards`:
	err = decoder.Decode(&obj.NumRewards)
	if err != nil {
		return err
	}
	// Deserialize `NumRewardPools`:
	err = decoder.Decode(&obj.NumRewardPools)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `Holders1`:
	err = decoder.Decode(&obj.Holders1)
	if err != nil {
		return err
	}
	// Deserialize `Rewards1`:
	err = decoder.Decode(&obj.Rewards1)
	if err != nil {
		return err
	}
	// Deserialize `RewardPools1`:
	err = decoder.Decode(&obj.RewardPools1)
	if err != nil {
		return err
	}
	return nil
}

type RewardPool struct {
	// ID is determined by reward account.
	Id                   uint8
	Name                 [14]uint8
	RewardPoolBitmap     uint8
	TokenAllocatedAmount TokenAllocatedAmount
	Contribution         ag_binary.Uint128
	InitialSlot          uint64
	UpdatedSlot          uint64
	ClosedSlot           uint64
	HolderId             uint8
	NumRewardSettlements uint8
	Padding              [6]uint8
	Reserved             [32]uint64
	RewardSettlements1   [16]RewardSettlement
}

func (obj RewardPool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Id` param:
	err = encoder.Encode(obj.Id)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `RewardPoolBitmap` param:
	err = encoder.Encode(obj.RewardPoolBitmap)
	if err != nil {
		return err
	}
	// Serialize `TokenAllocatedAmount` param:
	err = encoder.Encode(obj.TokenAllocatedAmount)
	if err != nil {
		return err
	}
	// Serialize `Contribution` param:
	err = encoder.Encode(obj.Contribution)
	if err != nil {
		return err
	}
	// Serialize `InitialSlot` param:
	err = encoder.Encode(obj.InitialSlot)
	if err != nil {
		return err
	}
	// Serialize `UpdatedSlot` param:
	err = encoder.Encode(obj.UpdatedSlot)
	if err != nil {
		return err
	}
	// Serialize `ClosedSlot` param:
	err = encoder.Encode(obj.ClosedSlot)
	if err != nil {
		return err
	}
	// Serialize `HolderId` param:
	err = encoder.Encode(obj.HolderId)
	if err != nil {
		return err
	}
	// Serialize `NumRewardSettlements` param:
	err = encoder.Encode(obj.NumRewardSettlements)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	// Serialize `RewardSettlements1` param:
	err = encoder.Encode(obj.RewardSettlements1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RewardPool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Id`:
	err = decoder.Decode(&obj.Id)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `RewardPoolBitmap`:
	err = decoder.Decode(&obj.RewardPoolBitmap)
	if err != nil {
		return err
	}
	// Deserialize `TokenAllocatedAmount`:
	err = decoder.Decode(&obj.TokenAllocatedAmount)
	if err != nil {
		return err
	}
	// Deserialize `Contribution`:
	err = decoder.Decode(&obj.Contribution)
	if err != nil {
		return err
	}
	// Deserialize `InitialSlot`:
	err = decoder.Decode(&obj.InitialSlot)
	if err != nil {
		return err
	}
	// Deserialize `UpdatedSlot`:
	err = decoder.Decode(&obj.UpdatedSlot)
	if err != nil {
		return err
	}
	// Deserialize `ClosedSlot`:
	err = decoder.Decode(&obj.ClosedSlot)
	if err != nil {
		return err
	}
	// Deserialize `HolderId`:
	err = decoder.Decode(&obj.HolderId)
	if err != nil {
		return err
	}
	// Deserialize `NumRewardSettlements`:
	err = decoder.Decode(&obj.NumRewardSettlements)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	// Deserialize `RewardSettlements1`:
	err = decoder.Decode(&obj.RewardSettlements1)
	if err != nil {
		return err
	}
	return nil
}

type RewardPoolHolder struct {
	// ID is determined by reward account.
	Id          uint8
	Name        [14]uint8
	Description [128]uint8
	NumPubkeys  uint8
	Reserved    [32]uint64

	// List of allowed pubkeys for this holder.
	Pubkeys1 [8]ag_solanago.PublicKey
}

func (obj RewardPoolHolder) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Id` param:
	err = encoder.Encode(obj.Id)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Description` param:
	err = encoder.Encode(obj.Description)
	if err != nil {
		return err
	}
	// Serialize `NumPubkeys` param:
	err = encoder.Encode(obj.NumPubkeys)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	// Serialize `Pubkeys1` param:
	err = encoder.Encode(obj.Pubkeys1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RewardPoolHolder) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Id`:
	err = decoder.Decode(&obj.Id)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Description`:
	err = decoder.Decode(&obj.Description)
	if err != nil {
		return err
	}
	// Deserialize `NumPubkeys`:
	err = decoder.Decode(&obj.NumPubkeys)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	// Deserialize `Pubkeys1`:
	err = decoder.Decode(&obj.Pubkeys1)
	if err != nil {
		return err
	}
	return nil
}

type RewardSettlement struct {
	RewardId             uint16
	RewardPoolId         uint8
	NumSettlementBlocks  uint8
	SettlementBlocksHead uint8
	SettlementBlocksTail uint8
	Padding              [2]uint8

	// Leftovers from each settlement block when clearing
	RemainingAmount                            uint64
	ClaimedAmount                              uint64
	ClaimedAmountUpdatedSlot                   uint64
	SettledAmount                              uint64
	SettlementBlocksLastSlot                   uint64
	SettlementBlocksLastRewardPoolContribution ag_binary.Uint128
	SettlementBlocks                           [64]RewardSettlementBlock
}

func (obj RewardSettlement) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RewardId` param:
	err = encoder.Encode(obj.RewardId)
	if err != nil {
		return err
	}
	// Serialize `RewardPoolId` param:
	err = encoder.Encode(obj.RewardPoolId)
	if err != nil {
		return err
	}
	// Serialize `NumSettlementBlocks` param:
	err = encoder.Encode(obj.NumSettlementBlocks)
	if err != nil {
		return err
	}
	// Serialize `SettlementBlocksHead` param:
	err = encoder.Encode(obj.SettlementBlocksHead)
	if err != nil {
		return err
	}
	// Serialize `SettlementBlocksTail` param:
	err = encoder.Encode(obj.SettlementBlocksTail)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `RemainingAmount` param:
	err = encoder.Encode(obj.RemainingAmount)
	if err != nil {
		return err
	}
	// Serialize `ClaimedAmount` param:
	err = encoder.Encode(obj.ClaimedAmount)
	if err != nil {
		return err
	}
	// Serialize `ClaimedAmountUpdatedSlot` param:
	err = encoder.Encode(obj.ClaimedAmountUpdatedSlot)
	if err != nil {
		return err
	}
	// Serialize `SettledAmount` param:
	err = encoder.Encode(obj.SettledAmount)
	if err != nil {
		return err
	}
	// Serialize `SettlementBlocksLastSlot` param:
	err = encoder.Encode(obj.SettlementBlocksLastSlot)
	if err != nil {
		return err
	}
	// Serialize `SettlementBlocksLastRewardPoolContribution` param:
	err = encoder.Encode(obj.SettlementBlocksLastRewardPoolContribution)
	if err != nil {
		return err
	}
	// Serialize `SettlementBlocks` param:
	err = encoder.Encode(obj.SettlementBlocks)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RewardSettlement) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RewardId`:
	err = decoder.Decode(&obj.RewardId)
	if err != nil {
		return err
	}
	// Deserialize `RewardPoolId`:
	err = decoder.Decode(&obj.RewardPoolId)
	if err != nil {
		return err
	}
	// Deserialize `NumSettlementBlocks`:
	err = decoder.Decode(&obj.NumSettlementBlocks)
	if err != nil {
		return err
	}
	// Deserialize `SettlementBlocksHead`:
	err = decoder.Decode(&obj.SettlementBlocksHead)
	if err != nil {
		return err
	}
	// Deserialize `SettlementBlocksTail`:
	err = decoder.Decode(&obj.SettlementBlocksTail)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `RemainingAmount`:
	err = decoder.Decode(&obj.RemainingAmount)
	if err != nil {
		return err
	}
	// Deserialize `ClaimedAmount`:
	err = decoder.Decode(&obj.ClaimedAmount)
	if err != nil {
		return err
	}
	// Deserialize `ClaimedAmountUpdatedSlot`:
	err = decoder.Decode(&obj.ClaimedAmountUpdatedSlot)
	if err != nil {
		return err
	}
	// Deserialize `SettledAmount`:
	err = decoder.Decode(&obj.SettledAmount)
	if err != nil {
		return err
	}
	// Deserialize `SettlementBlocksLastSlot`:
	err = decoder.Decode(&obj.SettlementBlocksLastSlot)
	if err != nil {
		return err
	}
	// Deserialize `SettlementBlocksLastRewardPoolContribution`:
	err = decoder.Decode(&obj.SettlementBlocksLastRewardPoolContribution)
	if err != nil {
		return err
	}
	// Deserialize `SettlementBlocks`:
	err = decoder.Decode(&obj.SettlementBlocks)
	if err != nil {
		return err
	}
	return nil
}

type RewardSettlementBlock struct {
	Amount                         uint64
	StartingSlot                   uint64
	StartingRewardPoolContribution ag_binary.Uint128
	EndingRewardPoolContribution   ag_binary.Uint128
	EndingSlot                     uint64
	UserSettledAmount              uint64
	UserSettledContribution        ag_binary.Uint128
}

func (obj RewardSettlementBlock) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `StartingSlot` param:
	err = encoder.Encode(obj.StartingSlot)
	if err != nil {
		return err
	}
	// Serialize `StartingRewardPoolContribution` param:
	err = encoder.Encode(obj.StartingRewardPoolContribution)
	if err != nil {
		return err
	}
	// Serialize `EndingRewardPoolContribution` param:
	err = encoder.Encode(obj.EndingRewardPoolContribution)
	if err != nil {
		return err
	}
	// Serialize `EndingSlot` param:
	err = encoder.Encode(obj.EndingSlot)
	if err != nil {
		return err
	}
	// Serialize `UserSettledAmount` param:
	err = encoder.Encode(obj.UserSettledAmount)
	if err != nil {
		return err
	}
	// Serialize `UserSettledContribution` param:
	err = encoder.Encode(obj.UserSettledContribution)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RewardSettlementBlock) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `StartingSlot`:
	err = decoder.Decode(&obj.StartingSlot)
	if err != nil {
		return err
	}
	// Deserialize `StartingRewardPoolContribution`:
	err = decoder.Decode(&obj.StartingRewardPoolContribution)
	if err != nil {
		return err
	}
	// Deserialize `EndingRewardPoolContribution`:
	err = decoder.Decode(&obj.EndingRewardPoolContribution)
	if err != nil {
		return err
	}
	// Deserialize `EndingSlot`:
	err = decoder.Decode(&obj.EndingSlot)
	if err != nil {
		return err
	}
	// Deserialize `UserSettledAmount`:
	err = decoder.Decode(&obj.UserSettledAmount)
	if err != nil {
		return err
	}
	// Deserialize `UserSettledContribution`:
	err = decoder.Decode(&obj.UserSettledContribution)
	if err != nil {
		return err
	}
	return nil
}

type RewardType struct {
	Value rewardType
}

func (obj RewardType) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	tmp := rewardTypeContainer{}
	switch realvalue := obj.Value.(type) {
	case RewardTypePointTuple:
		tmp.Enum = 0
		tmp.Point = realvalue
	case RewardTypeTokenTuple:
		tmp.Enum = 1
		tmp.Token = realvalue
	case RewardTypeSOLTuple:
		tmp.Enum = 2
		tmp.SOL = realvalue
	}
	return encoder.Encode(tmp)
}

func (obj *RewardType) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	tmp := new(rewardTypeContainer)
	err = decoder.Decode(tmp)
	if err != nil {
		return err
	}
	switch tmp.Enum {
	case 0:
		obj.Value = tmp.Point
	case 1:
		obj.Value = tmp.Token
	case 2:
		obj.Value = tmp.SOL
	default:
		return fmt.Errorf("unknown enum index: %v", tmp.Enum)
	}
	return nil
}

type rewardType interface {
	isRewardType()
}

type rewardTypeContainer struct {
	Enum  ag_binary.BorshEnum `borsh_enum:"true"`
	Point RewardTypePointTuple
	Token RewardTypeTokenTuple
	SOL   RewardTypeSOLTuple
}

type RewardTypePointTuple struct {
	Decimals uint8
}

func (obj RewardTypePointTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RewardTypePointTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	return nil
}

func (_ RewardTypePointTuple) isRewardType() {}

type RewardTypeTokenTuple struct {
	Mint     ag_solanago.PublicKey
	Program  ag_solanago.PublicKey
	Decimals uint8
}

func (obj RewardTypeTokenTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Program` param:
	err = encoder.Encode(obj.Program)
	if err != nil {
		return err
	}
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RewardTypeTokenTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Program`:
	err = decoder.Decode(&obj.Program)
	if err != nil {
		return err
	}
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	return nil
}

func (_ RewardTypeTokenTuple) isRewardType() {}

type RewardTypeSOLTuple uint8

func (obj RewardTypeSOLTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *RewardTypeSOLTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ RewardTypeSOLTuple) isRewardType() {}

type StakeSOLCommand struct {
	State *StakeSOLCommandState
}

func (obj StakeSOLCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `State` param:
	err = encoder.Encode(obj.State)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StakeSOLCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `State`:
	err = decoder.Decode(&obj.State)
	if err != nil {
		return err
	}
	return nil
}

type StakeSOLCommandItem struct {
	TokenMint          ag_solanago.PublicKey
	AllocatedSolAmount uint64
}

func (obj StakeSOLCommandItem) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	// Serialize `AllocatedSolAmount` param:
	err = encoder.Encode(obj.AllocatedSolAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StakeSOLCommandItem) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	// Deserialize `AllocatedSolAmount`:
	err = decoder.Decode(&obj.AllocatedSolAmount)
	if err != nil {
		return err
	}
	return nil
}

type StakeSOLCommandResult struct {
	TokenMint                    ag_solanago.PublicKey
	StakedSolAmount              uint64
	DeductedSolFeeAmount         uint64
	MintedTokenAmount            uint64
	OperationReservedSolAmount   uint64
	OperationReceivableSolAmount uint64
	OperationReservedTokenAmount uint64
}

func (obj StakeSOLCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	// Serialize `StakedSolAmount` param:
	err = encoder.Encode(obj.StakedSolAmount)
	if err != nil {
		return err
	}
	// Serialize `DeductedSolFeeAmount` param:
	err = encoder.Encode(obj.DeductedSolFeeAmount)
	if err != nil {
		return err
	}
	// Serialize `MintedTokenAmount` param:
	err = encoder.Encode(obj.MintedTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `OperationReservedSolAmount` param:
	err = encoder.Encode(obj.OperationReservedSolAmount)
	if err != nil {
		return err
	}
	// Serialize `OperationReceivableSolAmount` param:
	err = encoder.Encode(obj.OperationReceivableSolAmount)
	if err != nil {
		return err
	}
	// Serialize `OperationReservedTokenAmount` param:
	err = encoder.Encode(obj.OperationReservedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StakeSOLCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	// Deserialize `StakedSolAmount`:
	err = decoder.Decode(&obj.StakedSolAmount)
	if err != nil {
		return err
	}
	// Deserialize `DeductedSolFeeAmount`:
	err = decoder.Decode(&obj.DeductedSolFeeAmount)
	if err != nil {
		return err
	}
	// Deserialize `MintedTokenAmount`:
	err = decoder.Decode(&obj.MintedTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `OperationReservedSolAmount`:
	err = decoder.Decode(&obj.OperationReservedSolAmount)
	if err != nil {
		return err
	}
	// Deserialize `OperationReceivableSolAmount`:
	err = decoder.Decode(&obj.OperationReceivableSolAmount)
	if err != nil {
		return err
	}
	// Deserialize `OperationReservedTokenAmount`:
	err = decoder.Decode(&obj.OperationReservedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type StakeSOLCommandState struct {
	Value stakeSOLCommandState
}

func (obj StakeSOLCommandState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	tmp := stakeSOLCommandStateContainer{}
	switch realvalue := obj.Value.(type) {
	case StakeSOLCommandStateNewTuple:
		tmp.Enum = 0
		tmp.New = realvalue
	case StakeSOLCommandStatePrepareTuple:
		tmp.Enum = 1
		tmp.Prepare = realvalue
	case StakeSOLCommandStateExecuteTuple:
		tmp.Enum = 2
		tmp.Execute = realvalue
	}
	return encoder.Encode(tmp)
}

func (obj *StakeSOLCommandState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	tmp := new(stakeSOLCommandStateContainer)
	err = decoder.Decode(tmp)
	if err != nil {
		return err
	}
	switch tmp.Enum {
	case 0:
		obj.Value = tmp.New
	case 1:
		obj.Value = tmp.Prepare
	case 2:
		obj.Value = tmp.Execute
	default:
		return fmt.Errorf("unknown enum index: %v", tmp.Enum)
	}
	return nil
}

type stakeSOLCommandState interface {
	isStakeSOLCommandState()
}

type stakeSOLCommandStateContainer struct {
	Enum    ag_binary.BorshEnum `borsh_enum:"true"`
	New     StakeSOLCommandStateNewTuple
	Prepare StakeSOLCommandStatePrepareTuple
	Execute StakeSOLCommandStateExecuteTuple
}

type StakeSOLCommandStateNewTuple uint8

func (obj StakeSOLCommandStateNewTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *StakeSOLCommandStateNewTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ StakeSOLCommandStateNewTuple) isStakeSOLCommandState() {}

type StakeSOLCommandStatePrepareTuple struct {
	Items []StakeSOLCommandItem
}

func (obj StakeSOLCommandStatePrepareTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StakeSOLCommandStatePrepareTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ StakeSOLCommandStatePrepareTuple) isStakeSOLCommandState() {}

type StakeSOLCommandStateExecuteTuple struct {
	Items []StakeSOLCommandItem
}

func (obj StakeSOLCommandStateExecuteTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StakeSOLCommandStateExecuteTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ StakeSOLCommandStateExecuteTuple) isStakeSOLCommandState() {}

type SupportedToken struct {
	Mint          ag_solanago.PublicKey
	Program       ag_solanago.PublicKey
	Decimals      uint8
	Padding       [7]uint8
	PricingSource TokenPricingSourcePod

	// informative
	OneTokenAsSol uint64

	// token deposit & withdrawal
	Token AssetState

	// configuration: the amount requested to be unstaked as soon as possible regardless of current state, this value should be decreased by each unstaking requested amount.
	RebalancingAmount uint64

	// configuration: used for staking allocation strategy.
	SolAllocationWeight         uint64
	SolAllocationCapacityAmount uint64
	PendingUnstakingAmountAsSol uint64

	// informative
	OneTokenAsReceiptToken uint64
	Reserved               [48]uint8
}

func (obj SupportedToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Program` param:
	err = encoder.Encode(obj.Program)
	if err != nil {
		return err
	}
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `PricingSource` param:
	err = encoder.Encode(obj.PricingSource)
	if err != nil {
		return err
	}
	// Serialize `OneTokenAsSol` param:
	err = encoder.Encode(obj.OneTokenAsSol)
	if err != nil {
		return err
	}
	// Serialize `Token` param:
	err = encoder.Encode(obj.Token)
	if err != nil {
		return err
	}
	// Serialize `RebalancingAmount` param:
	err = encoder.Encode(obj.RebalancingAmount)
	if err != nil {
		return err
	}
	// Serialize `SolAllocationWeight` param:
	err = encoder.Encode(obj.SolAllocationWeight)
	if err != nil {
		return err
	}
	// Serialize `SolAllocationCapacityAmount` param:
	err = encoder.Encode(obj.SolAllocationCapacityAmount)
	if err != nil {
		return err
	}
	// Serialize `PendingUnstakingAmountAsSol` param:
	err = encoder.Encode(obj.PendingUnstakingAmountAsSol)
	if err != nil {
		return err
	}
	// Serialize `OneTokenAsReceiptToken` param:
	err = encoder.Encode(obj.OneTokenAsReceiptToken)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SupportedToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Program`:
	err = decoder.Decode(&obj.Program)
	if err != nil {
		return err
	}
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `PricingSource`:
	err = decoder.Decode(&obj.PricingSource)
	if err != nil {
		return err
	}
	// Deserialize `OneTokenAsSol`:
	err = decoder.Decode(&obj.OneTokenAsSol)
	if err != nil {
		return err
	}
	// Deserialize `Token`:
	err = decoder.Decode(&obj.Token)
	if err != nil {
		return err
	}
	// Deserialize `RebalancingAmount`:
	err = decoder.Decode(&obj.RebalancingAmount)
	if err != nil {
		return err
	}
	// Deserialize `SolAllocationWeight`:
	err = decoder.Decode(&obj.SolAllocationWeight)
	if err != nil {
		return err
	}
	// Deserialize `SolAllocationCapacityAmount`:
	err = decoder.Decode(&obj.SolAllocationCapacityAmount)
	if err != nil {
		return err
	}
	// Deserialize `PendingUnstakingAmountAsSol`:
	err = decoder.Decode(&obj.PendingUnstakingAmountAsSol)
	if err != nil {
		return err
	}
	// Deserialize `OneTokenAsReceiptToken`:
	err = decoder.Decode(&obj.OneTokenAsReceiptToken)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type TokenAllocatedAmount struct {
	TotalAmount uint64
	NumRecords  uint8
	Padding     [7]uint8
	Records     [10]TokenAllocatedAmountRecord
}

func (obj TokenAllocatedAmount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TotalAmount` param:
	err = encoder.Encode(obj.TotalAmount)
	if err != nil {
		return err
	}
	// Serialize `NumRecords` param:
	err = encoder.Encode(obj.NumRecords)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `Records` param:
	err = encoder.Encode(obj.Records)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenAllocatedAmount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TotalAmount`:
	err = decoder.Decode(&obj.TotalAmount)
	if err != nil {
		return err
	}
	// Deserialize `NumRecords`:
	err = decoder.Decode(&obj.NumRecords)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `Records`:
	err = decoder.Decode(&obj.Records)
	if err != nil {
		return err
	}
	return nil
}

type TokenAllocatedAmountRecord struct {
	Amount uint64

	// Contribution accrual rate per 1 lamports (decimals = 2)
	// e.g., rate = 135 => actual rate = 1.35
	ContributionAccrualRate uint16
	Padding                 [6]uint8
}

func (obj TokenAllocatedAmountRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `ContributionAccrualRate` param:
	err = encoder.Encode(obj.ContributionAccrualRate)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenAllocatedAmountRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `ContributionAccrualRate`:
	err = decoder.Decode(&obj.ContributionAccrualRate)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type TokenPricingSource struct {
	Value tokenPricingSource
}

func (obj TokenPricingSource) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	tmp := tokenPricingSourceContainer{}
	switch realvalue := obj.Value.(type) {
	case TokenPricingSourceSPLStakePoolTuple:
		tmp.Enum = 0
		tmp.SPLStakePool = realvalue
	case TokenPricingSourceMarinadeStakePoolTuple:
		tmp.Enum = 1
		tmp.MarinadeStakePool = realvalue
	case TokenPricingSourceJitoRestakingVaultTuple:
		tmp.Enum = 2
		tmp.JitoRestakingVault = realvalue
	case TokenPricingSourceFragmetricNormalizedTokenPoolTuple:
		tmp.Enum = 3
		tmp.FragmetricNormalizedTokenPool = realvalue
	case TokenPricingSourceFragmetricRestakingFundTuple:
		tmp.Enum = 4
		tmp.FragmetricRestakingFund = realvalue
	case TokenPricingSourceOrcaDEXLiquidityPoolTuple:
		tmp.Enum = 5
		tmp.OrcaDEXLiquidityPool = realvalue
	case TokenPricingSourceSanctumSingleValidatorSPLStakePoolTuple:
		tmp.Enum = 6
		tmp.SanctumSingleValidatorSPLStakePool = realvalue
	}
	return encoder.Encode(tmp)
}

func (obj *TokenPricingSource) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	tmp := new(tokenPricingSourceContainer)
	err = decoder.Decode(tmp)
	if err != nil {
		return err
	}
	switch tmp.Enum {
	case 0:
		obj.Value = tmp.SPLStakePool
	case 1:
		obj.Value = tmp.MarinadeStakePool
	case 2:
		obj.Value = tmp.JitoRestakingVault
	case 3:
		obj.Value = tmp.FragmetricNormalizedTokenPool
	case 4:
		obj.Value = tmp.FragmetricRestakingFund
	case 5:
		obj.Value = tmp.OrcaDEXLiquidityPool
	case 6:
		obj.Value = tmp.SanctumSingleValidatorSPLStakePool
	default:
		return fmt.Errorf("unknown enum index: %v", tmp.Enum)
	}
	return nil
}

type tokenPricingSource interface {
	isTokenPricingSource()
}

type tokenPricingSourceContainer struct {
	Enum                               ag_binary.BorshEnum `borsh_enum:"true"`
	SPLStakePool                       TokenPricingSourceSPLStakePoolTuple
	MarinadeStakePool                  TokenPricingSourceMarinadeStakePoolTuple
	JitoRestakingVault                 TokenPricingSourceJitoRestakingVaultTuple
	FragmetricNormalizedTokenPool      TokenPricingSourceFragmetricNormalizedTokenPoolTuple
	FragmetricRestakingFund            TokenPricingSourceFragmetricRestakingFundTuple
	OrcaDEXLiquidityPool               TokenPricingSourceOrcaDEXLiquidityPoolTuple
	SanctumSingleValidatorSPLStakePool TokenPricingSourceSanctumSingleValidatorSPLStakePoolTuple
}

type TokenPricingSourceSPLStakePoolTuple struct {
	Address ag_solanago.PublicKey
}

func (obj TokenPricingSourceSPLStakePoolTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Address` param:
	err = encoder.Encode(obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenPricingSourceSPLStakePoolTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Address`:
	err = decoder.Decode(&obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (_ TokenPricingSourceSPLStakePoolTuple) isTokenPricingSource() {}

type TokenPricingSourceMarinadeStakePoolTuple struct {
	Address ag_solanago.PublicKey
}

func (obj TokenPricingSourceMarinadeStakePoolTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Address` param:
	err = encoder.Encode(obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenPricingSourceMarinadeStakePoolTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Address`:
	err = decoder.Decode(&obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (_ TokenPricingSourceMarinadeStakePoolTuple) isTokenPricingSource() {}

type TokenPricingSourceJitoRestakingVaultTuple struct {
	Address ag_solanago.PublicKey
}

func (obj TokenPricingSourceJitoRestakingVaultTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Address` param:
	err = encoder.Encode(obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenPricingSourceJitoRestakingVaultTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Address`:
	err = decoder.Decode(&obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (_ TokenPricingSourceJitoRestakingVaultTuple) isTokenPricingSource() {}

type TokenPricingSourceFragmetricNormalizedTokenPoolTuple struct {
	Address ag_solanago.PublicKey
}

func (obj TokenPricingSourceFragmetricNormalizedTokenPoolTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Address` param:
	err = encoder.Encode(obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenPricingSourceFragmetricNormalizedTokenPoolTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Address`:
	err = decoder.Decode(&obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (_ TokenPricingSourceFragmetricNormalizedTokenPoolTuple) isTokenPricingSource() {}

type TokenPricingSourceFragmetricRestakingFundTuple struct {
	Address ag_solanago.PublicKey
}

func (obj TokenPricingSourceFragmetricRestakingFundTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Address` param:
	err = encoder.Encode(obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenPricingSourceFragmetricRestakingFundTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Address`:
	err = decoder.Decode(&obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (_ TokenPricingSourceFragmetricRestakingFundTuple) isTokenPricingSource() {}

type TokenPricingSourceOrcaDEXLiquidityPoolTuple struct {
	Address ag_solanago.PublicKey
}

func (obj TokenPricingSourceOrcaDEXLiquidityPoolTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Address` param:
	err = encoder.Encode(obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenPricingSourceOrcaDEXLiquidityPoolTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Address`:
	err = decoder.Decode(&obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (_ TokenPricingSourceOrcaDEXLiquidityPoolTuple) isTokenPricingSource() {}

type TokenPricingSourceSanctumSingleValidatorSPLStakePoolTuple struct {
	Address ag_solanago.PublicKey
}

func (obj TokenPricingSourceSanctumSingleValidatorSPLStakePoolTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Address` param:
	err = encoder.Encode(obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenPricingSourceSanctumSingleValidatorSPLStakePoolTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Address`:
	err = decoder.Decode(&obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (_ TokenPricingSourceSanctumSingleValidatorSPLStakePoolTuple) isTokenPricingSource() {}

type TokenPricingSourcePod struct {
	Discriminant uint8
	Padding      [7]uint8
	Address      ag_solanago.PublicKey
}

func (obj TokenPricingSourcePod) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Discriminant` param:
	err = encoder.Encode(obj.Discriminant)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `Address` param:
	err = encoder.Encode(obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenPricingSourcePod) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Discriminant`:
	err = decoder.Decode(&obj.Discriminant)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `Address`:
	err = decoder.Decode(&obj.Address)
	if err != nil {
		return err
	}
	return nil
}

type TokenSwapSource struct {
	Value tokenSwapSource
}

func (obj TokenSwapSource) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	tmp := tokenSwapSourceContainer{}
	switch realvalue := obj.Value.(type) {
	case TokenSwapSourceOrcaDEXLiquidityPoolTuple:
		tmp.Enum = 0
		tmp.OrcaDEXLiquidityPool = realvalue
	}
	return encoder.Encode(tmp)
}

func (obj *TokenSwapSource) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	tmp := new(tokenSwapSourceContainer)
	err = decoder.Decode(tmp)
	if err != nil {
		return err
	}
	switch tmp.Enum {
	case 0:
		obj.Value = tmp.OrcaDEXLiquidityPool
	default:
		return fmt.Errorf("unknown enum index: %v", tmp.Enum)
	}
	return nil
}

type tokenSwapSource interface {
	isTokenSwapSource()
}

type tokenSwapSourceContainer struct {
	Enum                 ag_binary.BorshEnum `borsh_enum:"true"`
	OrcaDEXLiquidityPool TokenSwapSourceOrcaDEXLiquidityPoolTuple
}

type TokenSwapSourceOrcaDEXLiquidityPoolTuple struct {
	Address ag_solanago.PublicKey
}

func (obj TokenSwapSourceOrcaDEXLiquidityPoolTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Address` param:
	err = encoder.Encode(obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenSwapSourceOrcaDEXLiquidityPoolTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Address`:
	err = decoder.Decode(&obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (_ TokenSwapSourceOrcaDEXLiquidityPoolTuple) isTokenSwapSource() {}

type TokenSwapSourcePod struct {
	Discriminant uint8
	Padding      [7]uint8
	Address      ag_solanago.PublicKey
}

func (obj TokenSwapSourcePod) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Discriminant` param:
	err = encoder.Encode(obj.Discriminant)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `Address` param:
	err = encoder.Encode(obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenSwapSourcePod) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Discriminant`:
	err = decoder.Decode(&obj.Discriminant)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `Address`:
	err = decoder.Decode(&obj.Address)
	if err != nil {
		return err
	}
	return nil
}

type TokenSwapStrategy struct {
	FromTokenMint ag_solanago.PublicKey
	ToTokenMint   ag_solanago.PublicKey
	SwapSource    TokenSwapSourcePod
	Reserved      [128]uint8
}

func (obj TokenSwapStrategy) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FromTokenMint` param:
	err = encoder.Encode(obj.FromTokenMint)
	if err != nil {
		return err
	}
	// Serialize `ToTokenMint` param:
	err = encoder.Encode(obj.ToTokenMint)
	if err != nil {
		return err
	}
	// Serialize `SwapSource` param:
	err = encoder.Encode(obj.SwapSource)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenSwapStrategy) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FromTokenMint`:
	err = decoder.Decode(&obj.FromTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `ToTokenMint`:
	err = decoder.Decode(&obj.ToTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `SwapSource`:
	err = decoder.Decode(&obj.SwapSource)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type TokenValue struct {
	Numerator   []Asset
	Denominator uint64
}

func (obj TokenValue) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Numerator` param:
	err = encoder.Encode(obj.Numerator)
	if err != nil {
		return err
	}
	// Serialize `Denominator` param:
	err = encoder.Encode(obj.Denominator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenValue) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Numerator`:
	err = decoder.Decode(&obj.Numerator)
	if err != nil {
		return err
	}
	// Deserialize `Denominator`:
	err = decoder.Decode(&obj.Denominator)
	if err != nil {
		return err
	}
	return nil
}

type TokenValuePod struct {
	Numerator    [33]AssetPod
	NumNumerator uint64
	Denominator  uint64
}

func (obj TokenValuePod) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Numerator` param:
	err = encoder.Encode(obj.Numerator)
	if err != nil {
		return err
	}
	// Serialize `NumNumerator` param:
	err = encoder.Encode(obj.NumNumerator)
	if err != nil {
		return err
	}
	// Serialize `Denominator` param:
	err = encoder.Encode(obj.Denominator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenValuePod) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Numerator`:
	err = decoder.Decode(&obj.Numerator)
	if err != nil {
		return err
	}
	// Deserialize `NumNumerator`:
	err = decoder.Decode(&obj.NumNumerator)
	if err != nil {
		return err
	}
	// Deserialize `Denominator`:
	err = decoder.Decode(&obj.Denominator)
	if err != nil {
		return err
	}
	return nil
}

type UndelegateVSTCommand struct {
	State *UndelegateVSTCommandState
}

func (obj UndelegateVSTCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `State` param:
	err = encoder.Encode(obj.State)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UndelegateVSTCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `State`:
	err = decoder.Decode(&obj.State)
	if err != nil {
		return err
	}
	return nil
}

type UndelegateVSTCommandItem struct {
	Operator                      ag_solanago.PublicKey
	AllocatedSupportedTokenAmount uint64
}

func (obj UndelegateVSTCommandItem) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Operator` param:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return err
	}
	// Serialize `AllocatedSupportedTokenAmount` param:
	err = encoder.Encode(obj.AllocatedSupportedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UndelegateVSTCommandItem) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return err
	}
	// Deserialize `AllocatedSupportedTokenAmount`:
	err = decoder.Decode(&obj.AllocatedSupportedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type UndelegateVSTCommandResult struct {
	Vault         ag_solanago.PublicKey
	Undelegations []UndelegateVSTCommandResultUndelegated
}

func (obj UndelegateVSTCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Vault` param:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return err
	}
	// Serialize `Undelegations` param:
	err = encoder.Encode(obj.Undelegations)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UndelegateVSTCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return err
	}
	// Deserialize `Undelegations`:
	err = decoder.Decode(&obj.Undelegations)
	if err != nil {
		return err
	}
	return nil
}

type UndelegateVSTCommandResultUndelegated struct {
	Operator                         ag_solanago.PublicKey
	UndelegationRequestedTokenAmount uint64
	TotalDelegatedTokenAmount        uint64
	TotalUndelegatingTokenAmount     uint64
}

func (obj UndelegateVSTCommandResultUndelegated) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Operator` param:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return err
	}
	// Serialize `UndelegationRequestedTokenAmount` param:
	err = encoder.Encode(obj.UndelegationRequestedTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `TotalDelegatedTokenAmount` param:
	err = encoder.Encode(obj.TotalDelegatedTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `TotalUndelegatingTokenAmount` param:
	err = encoder.Encode(obj.TotalUndelegatingTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UndelegateVSTCommandResultUndelegated) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return err
	}
	// Deserialize `UndelegationRequestedTokenAmount`:
	err = decoder.Decode(&obj.UndelegationRequestedTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `TotalDelegatedTokenAmount`:
	err = decoder.Decode(&obj.TotalDelegatedTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `TotalUndelegatingTokenAmount`:
	err = decoder.Decode(&obj.TotalUndelegatingTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type UndelegateVSTCommandState struct {
	Value undelegateVSTCommandState
}

func (obj UndelegateVSTCommandState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	tmp := undelegateVSTCommandStateContainer{}
	switch realvalue := obj.Value.(type) {
	case UndelegateVSTCommandStateNewTuple:
		tmp.Enum = 0
		tmp.New = realvalue
	case UndelegateVSTCommandStatePrepareTuple:
		tmp.Enum = 1
		tmp.Prepare = realvalue
	case UndelegateVSTCommandStateExecuteTuple:
		tmp.Enum = 2
		tmp.Execute = realvalue
	}
	return encoder.Encode(tmp)
}

func (obj *UndelegateVSTCommandState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	tmp := new(undelegateVSTCommandStateContainer)
	err = decoder.Decode(tmp)
	if err != nil {
		return err
	}
	switch tmp.Enum {
	case 0:
		obj.Value = tmp.New
	case 1:
		obj.Value = tmp.Prepare
	case 2:
		obj.Value = tmp.Execute
	default:
		return fmt.Errorf("unknown enum index: %v", tmp.Enum)
	}
	return nil
}

type undelegateVSTCommandState interface {
	isUndelegateVSTCommandState()
}

type undelegateVSTCommandStateContainer struct {
	Enum    ag_binary.BorshEnum `borsh_enum:"true"`
	New     UndelegateVSTCommandStateNewTuple
	Prepare UndelegateVSTCommandStatePrepareTuple
	Execute UndelegateVSTCommandStateExecuteTuple
}

type UndelegateVSTCommandStateNewTuple uint8

func (obj UndelegateVSTCommandStateNewTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *UndelegateVSTCommandStateNewTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ UndelegateVSTCommandStateNewTuple) isUndelegateVSTCommandState() {}

type UndelegateVSTCommandStatePrepareTuple struct {
	Vaults []ag_solanago.PublicKey
}

func (obj UndelegateVSTCommandStatePrepareTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Vaults` param:
	err = encoder.Encode(obj.Vaults)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UndelegateVSTCommandStatePrepareTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Vaults`:
	err = decoder.Decode(&obj.Vaults)
	if err != nil {
		return err
	}
	return nil
}

func (_ UndelegateVSTCommandStatePrepareTuple) isUndelegateVSTCommandState() {}

type UndelegateVSTCommandStateExecuteTuple struct {
	Vaults []ag_solanago.PublicKey
	Items  []UndelegateVSTCommandItem
}

func (obj UndelegateVSTCommandStateExecuteTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Vaults` param:
	err = encoder.Encode(obj.Vaults)
	if err != nil {
		return err
	}
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UndelegateVSTCommandStateExecuteTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Vaults`:
	err = decoder.Decode(&obj.Vaults)
	if err != nil {
		return err
	}
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ UndelegateVSTCommandStateExecuteTuple) isUndelegateVSTCommandState() {}

type UnrestakeVRTCommand struct {
	State *UnrestakeVRTCommandState
}

func (obj UnrestakeVRTCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `State` param:
	err = encoder.Encode(obj.State)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UnrestakeVRTCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `State`:
	err = decoder.Decode(&obj.State)
	if err != nil {
		return err
	}
	return nil
}

type UnrestakeVRTCommandResult struct {
	Vault                        ag_solanago.PublicKey
	TokenMint                    ag_solanago.PublicKey
	UnrestakingTokenAmount       uint64
	TotalUnrestakingTokenAmount  uint64
	OperationReservedTokenAmount uint64
}

func (obj UnrestakeVRTCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Vault` param:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return err
	}
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	// Serialize `UnrestakingTokenAmount` param:
	err = encoder.Encode(obj.UnrestakingTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `TotalUnrestakingTokenAmount` param:
	err = encoder.Encode(obj.TotalUnrestakingTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `OperationReservedTokenAmount` param:
	err = encoder.Encode(obj.OperationReservedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UnrestakeVRTCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return err
	}
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	// Deserialize `UnrestakingTokenAmount`:
	err = decoder.Decode(&obj.UnrestakingTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `TotalUnrestakingTokenAmount`:
	err = decoder.Decode(&obj.TotalUnrestakingTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `OperationReservedTokenAmount`:
	err = decoder.Decode(&obj.OperationReservedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type UnrestakeVRTCommandState struct {
	Value unrestakeVRTCommandState
}

func (obj UnrestakeVRTCommandState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	tmp := unrestakeVRTCommandStateContainer{}
	switch realvalue := obj.Value.(type) {
	case UnrestakeVRTCommandStateNewTuple:
		tmp.Enum = 0
		tmp.New = realvalue
	case UnrestakeVRTCommandStatePrepareTuple:
		tmp.Enum = 1
		tmp.Prepare = realvalue
	case UnrestakeVRTCommandStateExecuteTuple:
		tmp.Enum = 2
		tmp.Execute = realvalue
	}
	return encoder.Encode(tmp)
}

func (obj *UnrestakeVRTCommandState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	tmp := new(unrestakeVRTCommandStateContainer)
	err = decoder.Decode(tmp)
	if err != nil {
		return err
	}
	switch tmp.Enum {
	case 0:
		obj.Value = tmp.New
	case 1:
		obj.Value = tmp.Prepare
	case 2:
		obj.Value = tmp.Execute
	default:
		return fmt.Errorf("unknown enum index: %v", tmp.Enum)
	}
	return nil
}

type unrestakeVRTCommandState interface {
	isUnrestakeVRTCommandState()
}

type unrestakeVRTCommandStateContainer struct {
	Enum    ag_binary.BorshEnum `borsh_enum:"true"`
	New     UnrestakeVRTCommandStateNewTuple
	Prepare UnrestakeVRTCommandStatePrepareTuple
	Execute UnrestakeVRTCommandStateExecuteTuple
}

type UnrestakeVRTCommandStateNewTuple uint8

func (obj UnrestakeVRTCommandStateNewTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *UnrestakeVRTCommandStateNewTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ UnrestakeVRTCommandStateNewTuple) isUnrestakeVRTCommandState() {}

type UnrestakeVRTCommandStatePrepareTuple struct {
	Items []UnrestakeVSTCommandItem
}

func (obj UnrestakeVRTCommandStatePrepareTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UnrestakeVRTCommandStatePrepareTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ UnrestakeVRTCommandStatePrepareTuple) isUnrestakeVRTCommandState() {}

type UnrestakeVRTCommandStateExecuteTuple struct {
	Items []UnrestakeVSTCommandItem
}

func (obj UnrestakeVRTCommandStateExecuteTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UnrestakeVRTCommandStateExecuteTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ UnrestakeVRTCommandStateExecuteTuple) isUnrestakeVRTCommandState() {}

type UnrestakeVSTCommandItem struct {
	Vault                       ag_solanago.PublicKey
	ReceiptTokenMint            ag_solanago.PublicKey
	SupportedTokenMint          ag_solanago.PublicKey
	AllocatedReceiptTokenAmount uint64
}

func (obj UnrestakeVSTCommandItem) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Vault` param:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenMint` param:
	err = encoder.Encode(obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Serialize `AllocatedReceiptTokenAmount` param:
	err = encoder.Encode(obj.AllocatedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UnrestakeVSTCommandItem) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenMint`:
	err = decoder.Decode(&obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `AllocatedReceiptTokenAmount`:
	err = decoder.Decode(&obj.AllocatedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type UnstakeLSTCommand struct {
	State *UnstakeLSTCommandState
}

func (obj UnstakeLSTCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `State` param:
	err = encoder.Encode(obj.State)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UnstakeLSTCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `State`:
	err = decoder.Decode(&obj.State)
	if err != nil {
		return err
	}
	return nil
}

type UnstakeLSTCommandItem struct {
	TokenMint            ag_solanago.PublicKey
	AllocatedTokenAmount uint64
}

func (obj UnstakeLSTCommandItem) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	// Serialize `AllocatedTokenAmount` param:
	err = encoder.Encode(obj.AllocatedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UnstakeLSTCommandItem) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	// Deserialize `AllocatedTokenAmount`:
	err = decoder.Decode(&obj.AllocatedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type UnstakeLSTCommandResult struct {
	TokenMint                    ag_solanago.PublicKey
	BurntTokenAmount             uint64
	DeductedSolFeeAmount         uint64
	UnstakedSolAmount            uint64
	UnstakingSolAmount           uint64
	TotalUnstakingSolAmount      uint64
	OperationReservedSolAmount   uint64
	OperationReceivableSolAmount uint64
	OperationReservedTokenAmount uint64
}

func (obj UnstakeLSTCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	// Serialize `BurntTokenAmount` param:
	err = encoder.Encode(obj.BurntTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `DeductedSolFeeAmount` param:
	err = encoder.Encode(obj.DeductedSolFeeAmount)
	if err != nil {
		return err
	}
	// Serialize `UnstakedSolAmount` param:
	err = encoder.Encode(obj.UnstakedSolAmount)
	if err != nil {
		return err
	}
	// Serialize `UnstakingSolAmount` param:
	err = encoder.Encode(obj.UnstakingSolAmount)
	if err != nil {
		return err
	}
	// Serialize `TotalUnstakingSolAmount` param:
	err = encoder.Encode(obj.TotalUnstakingSolAmount)
	if err != nil {
		return err
	}
	// Serialize `OperationReservedSolAmount` param:
	err = encoder.Encode(obj.OperationReservedSolAmount)
	if err != nil {
		return err
	}
	// Serialize `OperationReceivableSolAmount` param:
	err = encoder.Encode(obj.OperationReceivableSolAmount)
	if err != nil {
		return err
	}
	// Serialize `OperationReservedTokenAmount` param:
	err = encoder.Encode(obj.OperationReservedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UnstakeLSTCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	// Deserialize `BurntTokenAmount`:
	err = decoder.Decode(&obj.BurntTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `DeductedSolFeeAmount`:
	err = decoder.Decode(&obj.DeductedSolFeeAmount)
	if err != nil {
		return err
	}
	// Deserialize `UnstakedSolAmount`:
	err = decoder.Decode(&obj.UnstakedSolAmount)
	if err != nil {
		return err
	}
	// Deserialize `UnstakingSolAmount`:
	err = decoder.Decode(&obj.UnstakingSolAmount)
	if err != nil {
		return err
	}
	// Deserialize `TotalUnstakingSolAmount`:
	err = decoder.Decode(&obj.TotalUnstakingSolAmount)
	if err != nil {
		return err
	}
	// Deserialize `OperationReservedSolAmount`:
	err = decoder.Decode(&obj.OperationReservedSolAmount)
	if err != nil {
		return err
	}
	// Deserialize `OperationReceivableSolAmount`:
	err = decoder.Decode(&obj.OperationReceivableSolAmount)
	if err != nil {
		return err
	}
	// Deserialize `OperationReservedTokenAmount`:
	err = decoder.Decode(&obj.OperationReservedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type UnstakeLSTCommandState struct {
	Value unstakeLSTCommandState
}

func (obj UnstakeLSTCommandState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	tmp := unstakeLSTCommandStateContainer{}
	switch realvalue := obj.Value.(type) {
	case UnstakeLSTCommandStateNewTuple:
		tmp.Enum = 0
		tmp.New = realvalue
	case UnstakeLSTCommandStatePrepareTuple:
		tmp.Enum = 1
		tmp.Prepare = realvalue
	case UnstakeLSTCommandStateGetWithdrawStakeItemsTuple:
		tmp.Enum = 2
		tmp.GetWithdrawStakeItems = realvalue
	case UnstakeLSTCommandStateExecuteTuple:
		tmp.Enum = 3
		tmp.Execute = realvalue
	}
	return encoder.Encode(tmp)
}

func (obj *UnstakeLSTCommandState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	tmp := new(unstakeLSTCommandStateContainer)
	err = decoder.Decode(tmp)
	if err != nil {
		return err
	}
	switch tmp.Enum {
	case 0:
		obj.Value = tmp.New
	case 1:
		obj.Value = tmp.Prepare
	case 2:
		obj.Value = tmp.GetWithdrawStakeItems
	case 3:
		obj.Value = tmp.Execute
	default:
		return fmt.Errorf("unknown enum index: %v", tmp.Enum)
	}
	return nil
}

type unstakeLSTCommandState interface {
	isUnstakeLSTCommandState()
}

type unstakeLSTCommandStateContainer struct {
	Enum                  ag_binary.BorshEnum `borsh_enum:"true"`
	New                   UnstakeLSTCommandStateNewTuple
	Prepare               UnstakeLSTCommandStatePrepareTuple
	GetWithdrawStakeItems UnstakeLSTCommandStateGetWithdrawStakeItemsTuple
	Execute               UnstakeLSTCommandStateExecuteTuple
}

type UnstakeLSTCommandStateNewTuple uint8

func (obj UnstakeLSTCommandStateNewTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *UnstakeLSTCommandStateNewTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ UnstakeLSTCommandStateNewTuple) isUnstakeLSTCommandState() {}

type UnstakeLSTCommandStatePrepareTuple struct {
	Items []UnstakeLSTCommandItem
}

func (obj UnstakeLSTCommandStatePrepareTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UnstakeLSTCommandStatePrepareTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ UnstakeLSTCommandStatePrepareTuple) isUnstakeLSTCommandState() {}

type UnstakeLSTCommandStateGetWithdrawStakeItemsTuple struct {
	Items []UnstakeLSTCommandItem
}

func (obj UnstakeLSTCommandStateGetWithdrawStakeItemsTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UnstakeLSTCommandStateGetWithdrawStakeItemsTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ UnstakeLSTCommandStateGetWithdrawStakeItemsTuple) isUnstakeLSTCommandState() {}

type UnstakeLSTCommandStateExecuteTuple struct {
	Items              []UnstakeLSTCommandItem
	WithdrawSol        bool
	WithdrawStakeItems []WithdrawStakeItem
}

func (obj UnstakeLSTCommandStateExecuteTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	// Serialize `WithdrawSol` param:
	err = encoder.Encode(obj.WithdrawSol)
	if err != nil {
		return err
	}
	// Serialize `WithdrawStakeItems` param:
	err = encoder.Encode(obj.WithdrawStakeItems)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UnstakeLSTCommandStateExecuteTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawSol`:
	err = decoder.Decode(&obj.WithdrawSol)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawStakeItems`:
	err = decoder.Decode(&obj.WithdrawStakeItems)
	if err != nil {
		return err
	}
	return nil
}

func (_ UnstakeLSTCommandStateExecuteTuple) isUnstakeLSTCommandState() {}

type UserCanceledWithdrawalRequestFromFund struct {
	ReceiptTokenMint            ag_solanago.PublicKey
	FundAccount                 ag_solanago.PublicKey
	SupportedTokenMint          *ag_solanago.PublicKey `bin:"optional"`
	UpdatedUserRewardAccounts   []ag_solanago.PublicKey
	User                        ag_solanago.PublicKey
	UserReceiptTokenAccount     ag_solanago.PublicKey
	UserFundAccount             ag_solanago.PublicKey
	BatchId                     uint64
	RequestId                   uint64
	RequestedReceiptTokenAmount uint64
}

func (obj UserCanceledWithdrawalRequestFromFund) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FundAccount` param:
	err = encoder.Encode(obj.FundAccount)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenMint` param (optional):
	{
		if obj.SupportedTokenMint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `UpdatedUserRewardAccounts` param:
	err = encoder.Encode(obj.UpdatedUserRewardAccounts)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `UserReceiptTokenAccount` param:
	err = encoder.Encode(obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `UserFundAccount` param:
	err = encoder.Encode(obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Serialize `BatchId` param:
	err = encoder.Encode(obj.BatchId)
	if err != nil {
		return err
	}
	// Serialize `RequestId` param:
	err = encoder.Encode(obj.RequestId)
	if err != nil {
		return err
	}
	// Serialize `RequestedReceiptTokenAmount` param:
	err = encoder.Encode(obj.RequestedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserCanceledWithdrawalRequestFromFund) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FundAccount`:
	err = decoder.Decode(&obj.FundAccount)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenMint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `UpdatedUserRewardAccounts`:
	err = decoder.Decode(&obj.UpdatedUserRewardAccounts)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `UserReceiptTokenAccount`:
	err = decoder.Decode(&obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserFundAccount`:
	err = decoder.Decode(&obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Deserialize `BatchId`:
	err = decoder.Decode(&obj.BatchId)
	if err != nil {
		return err
	}
	// Deserialize `RequestId`:
	err = decoder.Decode(&obj.RequestId)
	if err != nil {
		return err
	}
	// Deserialize `RequestedReceiptTokenAmount`:
	err = decoder.Decode(&obj.RequestedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type UserCreatedOrUpdatedFundAccount struct {
	ReceiptTokenMint   ag_solanago.PublicKey
	UserFundAccount    ag_solanago.PublicKey
	ReceiptTokenAmount uint64
	Created            bool
}

func (obj UserCreatedOrUpdatedFundAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `UserFundAccount` param:
	err = encoder.Encode(obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenAmount` param:
	err = encoder.Encode(obj.ReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `Created` param:
	err = encoder.Encode(obj.Created)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserCreatedOrUpdatedFundAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `UserFundAccount`:
	err = decoder.Decode(&obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenAmount`:
	err = decoder.Decode(&obj.ReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `Created`:
	err = decoder.Decode(&obj.Created)
	if err != nil {
		return err
	}
	return nil
}

type UserCreatedOrUpdatedRewardAccount struct {
	ReceiptTokenMint   ag_solanago.PublicKey
	UserRewardAccount  ag_solanago.PublicKey
	ReceiptTokenAmount uint64
	Created            bool
}

func (obj UserCreatedOrUpdatedRewardAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `UserRewardAccount` param:
	err = encoder.Encode(obj.UserRewardAccount)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenAmount` param:
	err = encoder.Encode(obj.ReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `Created` param:
	err = encoder.Encode(obj.Created)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserCreatedOrUpdatedRewardAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `UserRewardAccount`:
	err = decoder.Decode(&obj.UserRewardAccount)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenAmount`:
	err = decoder.Decode(&obj.ReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `Created`:
	err = decoder.Decode(&obj.Created)
	if err != nil {
		return err
	}
	return nil
}

type UserDepositedToFund struct {
	ReceiptTokenMint          ag_solanago.PublicKey
	FundAccount               ag_solanago.PublicKey
	SupportedTokenMint        *ag_solanago.PublicKey `bin:"optional"`
	UpdatedUserRewardAccounts []ag_solanago.PublicKey
	User                      ag_solanago.PublicKey
	UserReceiptTokenAccount   ag_solanago.PublicKey
	UserFundAccount           ag_solanago.PublicKey
	UserSupportedTokenAccount *ag_solanago.PublicKey `bin:"optional"`
	WalletProvider            *string                `bin:"optional"`
	ContributionAccrualRate   *uint16                `bin:"optional"`
	DepositedAmount           uint64
	MintedReceiptTokenAmount  uint64
}

func (obj UserDepositedToFund) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FundAccount` param:
	err = encoder.Encode(obj.FundAccount)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenMint` param (optional):
	{
		if obj.SupportedTokenMint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `UpdatedUserRewardAccounts` param:
	err = encoder.Encode(obj.UpdatedUserRewardAccounts)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `UserReceiptTokenAccount` param:
	err = encoder.Encode(obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `UserFundAccount` param:
	err = encoder.Encode(obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Serialize `UserSupportedTokenAccount` param (optional):
	{
		if obj.UserSupportedTokenAccount == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.UserSupportedTokenAccount)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `WalletProvider` param (optional):
	{
		if obj.WalletProvider == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.WalletProvider)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `ContributionAccrualRate` param (optional):
	{
		if obj.ContributionAccrualRate == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ContributionAccrualRate)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `DepositedAmount` param:
	err = encoder.Encode(obj.DepositedAmount)
	if err != nil {
		return err
	}
	// Serialize `MintedReceiptTokenAmount` param:
	err = encoder.Encode(obj.MintedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserDepositedToFund) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FundAccount`:
	err = decoder.Decode(&obj.FundAccount)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenMint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `UpdatedUserRewardAccounts`:
	err = decoder.Decode(&obj.UpdatedUserRewardAccounts)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `UserReceiptTokenAccount`:
	err = decoder.Decode(&obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserFundAccount`:
	err = decoder.Decode(&obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserSupportedTokenAccount` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.UserSupportedTokenAccount)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `WalletProvider` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.WalletProvider)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `ContributionAccrualRate` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ContributionAccrualRate)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `DepositedAmount`:
	err = decoder.Decode(&obj.DepositedAmount)
	if err != nil {
		return err
	}
	// Deserialize `MintedReceiptTokenAmount`:
	err = decoder.Decode(&obj.MintedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type UserFundAccount struct {
	DataVersion        uint16
	Bump               uint8
	ReceiptTokenMint   ag_solanago.PublicKey
	User               ag_solanago.PublicKey
	ReceiptTokenAmount uint64
	Reserved           [32]uint8
	WithdrawalRequests []WithdrawalRequest
}

func (obj UserFundAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DataVersion` param:
	err = encoder.Encode(obj.DataVersion)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenAmount` param:
	err = encoder.Encode(obj.ReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalRequests` param:
	err = encoder.Encode(obj.WithdrawalRequests)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserFundAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DataVersion`:
	err = decoder.Decode(&obj.DataVersion)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenAmount`:
	err = decoder.Decode(&obj.ReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalRequests`:
	err = decoder.Decode(&obj.WithdrawalRequests)
	if err != nil {
		return err
	}
	return nil
}

type UserRequestedWithdrawalFromFund struct {
	ReceiptTokenMint            ag_solanago.PublicKey
	FundAccount                 ag_solanago.PublicKey
	SupportedTokenMint          *ag_solanago.PublicKey `bin:"optional"`
	UpdatedUserRewardAccounts   []ag_solanago.PublicKey
	User                        ag_solanago.PublicKey
	UserReceiptTokenAccount     ag_solanago.PublicKey
	UserFundAccount             ag_solanago.PublicKey
	BatchId                     uint64
	RequestId                   uint64
	RequestedReceiptTokenAmount uint64
}

func (obj UserRequestedWithdrawalFromFund) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FundAccount` param:
	err = encoder.Encode(obj.FundAccount)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenMint` param (optional):
	{
		if obj.SupportedTokenMint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `UpdatedUserRewardAccounts` param:
	err = encoder.Encode(obj.UpdatedUserRewardAccounts)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `UserReceiptTokenAccount` param:
	err = encoder.Encode(obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `UserFundAccount` param:
	err = encoder.Encode(obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Serialize `BatchId` param:
	err = encoder.Encode(obj.BatchId)
	if err != nil {
		return err
	}
	// Serialize `RequestId` param:
	err = encoder.Encode(obj.RequestId)
	if err != nil {
		return err
	}
	// Serialize `RequestedReceiptTokenAmount` param:
	err = encoder.Encode(obj.RequestedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserRequestedWithdrawalFromFund) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FundAccount`:
	err = decoder.Decode(&obj.FundAccount)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenMint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `UpdatedUserRewardAccounts`:
	err = decoder.Decode(&obj.UpdatedUserRewardAccounts)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `UserReceiptTokenAccount`:
	err = decoder.Decode(&obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserFundAccount`:
	err = decoder.Decode(&obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Deserialize `BatchId`:
	err = decoder.Decode(&obj.BatchId)
	if err != nil {
		return err
	}
	// Deserialize `RequestId`:
	err = decoder.Decode(&obj.RequestId)
	if err != nil {
		return err
	}
	// Deserialize `RequestedReceiptTokenAmount`:
	err = decoder.Decode(&obj.RequestedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type UserRewardAccount struct {
	DataVersion        uint16
	Bump               uint8
	ReceiptTokenMint   ag_solanago.PublicKey
	User               ag_solanago.PublicKey
	NumUserRewardPools uint8
	MaxUserRewardPools uint8
	Padding            [11]uint8
	UserRewardPools1   [4]UserRewardPool
}

func (obj UserRewardAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DataVersion` param:
	err = encoder.Encode(obj.DataVersion)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `NumUserRewardPools` param:
	err = encoder.Encode(obj.NumUserRewardPools)
	if err != nil {
		return err
	}
	// Serialize `MaxUserRewardPools` param:
	err = encoder.Encode(obj.MaxUserRewardPools)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `UserRewardPools1` param:
	err = encoder.Encode(obj.UserRewardPools1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserRewardAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DataVersion`:
	err = decoder.Decode(&obj.DataVersion)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `NumUserRewardPools`:
	err = decoder.Decode(&obj.NumUserRewardPools)
	if err != nil {
		return err
	}
	// Deserialize `MaxUserRewardPools`:
	err = decoder.Decode(&obj.MaxUserRewardPools)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `UserRewardPools1`:
	err = decoder.Decode(&obj.UserRewardPools1)
	if err != nil {
		return err
	}
	return nil
}

type UserRewardPool struct {
	TokenAllocatedAmount TokenAllocatedAmount
	Contribution         ag_binary.Uint128
	UpdatedSlot          uint64
	RewardPoolId         uint8
	NumRewardSettlements uint8
	Padding              [6]uint8
	Reserved             [8]uint64
	RewardSettlements1   [16]UserRewardSettlement
}

func (obj UserRewardPool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenAllocatedAmount` param:
	err = encoder.Encode(obj.TokenAllocatedAmount)
	if err != nil {
		return err
	}
	// Serialize `Contribution` param:
	err = encoder.Encode(obj.Contribution)
	if err != nil {
		return err
	}
	// Serialize `UpdatedSlot` param:
	err = encoder.Encode(obj.UpdatedSlot)
	if err != nil {
		return err
	}
	// Serialize `RewardPoolId` param:
	err = encoder.Encode(obj.RewardPoolId)
	if err != nil {
		return err
	}
	// Serialize `NumRewardSettlements` param:
	err = encoder.Encode(obj.NumRewardSettlements)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	// Serialize `RewardSettlements1` param:
	err = encoder.Encode(obj.RewardSettlements1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserRewardPool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenAllocatedAmount`:
	err = decoder.Decode(&obj.TokenAllocatedAmount)
	if err != nil {
		return err
	}
	// Deserialize `Contribution`:
	err = decoder.Decode(&obj.Contribution)
	if err != nil {
		return err
	}
	// Deserialize `UpdatedSlot`:
	err = decoder.Decode(&obj.UpdatedSlot)
	if err != nil {
		return err
	}
	// Deserialize `RewardPoolId`:
	err = decoder.Decode(&obj.RewardPoolId)
	if err != nil {
		return err
	}
	// Deserialize `NumRewardSettlements`:
	err = decoder.Decode(&obj.NumRewardSettlements)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	// Deserialize `RewardSettlements1`:
	err = decoder.Decode(&obj.RewardSettlements1)
	if err != nil {
		return err
	}
	return nil
}

type UserRewardSettlement struct {
	RewardId            uint16
	Padding             [6]uint8
	SettledAmount       uint64
	SettledContribution ag_binary.Uint128
	SettledSlot         uint64
	ClaimedAmount       uint64
}

func (obj UserRewardSettlement) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RewardId` param:
	err = encoder.Encode(obj.RewardId)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `SettledAmount` param:
	err = encoder.Encode(obj.SettledAmount)
	if err != nil {
		return err
	}
	// Serialize `SettledContribution` param:
	err = encoder.Encode(obj.SettledContribution)
	if err != nil {
		return err
	}
	// Serialize `SettledSlot` param:
	err = encoder.Encode(obj.SettledSlot)
	if err != nil {
		return err
	}
	// Serialize `ClaimedAmount` param:
	err = encoder.Encode(obj.ClaimedAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserRewardSettlement) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RewardId`:
	err = decoder.Decode(&obj.RewardId)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `SettledAmount`:
	err = decoder.Decode(&obj.SettledAmount)
	if err != nil {
		return err
	}
	// Deserialize `SettledContribution`:
	err = decoder.Decode(&obj.SettledContribution)
	if err != nil {
		return err
	}
	// Deserialize `SettledSlot`:
	err = decoder.Decode(&obj.SettledSlot)
	if err != nil {
		return err
	}
	// Deserialize `ClaimedAmount`:
	err = decoder.Decode(&obj.ClaimedAmount)
	if err != nil {
		return err
	}
	return nil
}

type UserTransferredReceiptToken struct {
	ReceiptTokenMint               ag_solanago.PublicKey
	FundAccount                    ag_solanago.PublicKey
	UpdatedUserRewardAccounts      []ag_solanago.PublicKey
	Source                         ag_solanago.PublicKey
	SourceReceiptTokenAccount      ag_solanago.PublicKey
	SourceFundAccount              *ag_solanago.PublicKey `bin:"optional"`
	Destination                    ag_solanago.PublicKey
	DestinationReceiptTokenAccount ag_solanago.PublicKey
	DestinationFundAccount         *ag_solanago.PublicKey `bin:"optional"`
	TransferredReceiptTokenAmount  uint64
}

func (obj UserTransferredReceiptToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FundAccount` param:
	err = encoder.Encode(obj.FundAccount)
	if err != nil {
		return err
	}
	// Serialize `UpdatedUserRewardAccounts` param:
	err = encoder.Encode(obj.UpdatedUserRewardAccounts)
	if err != nil {
		return err
	}
	// Serialize `Source` param:
	err = encoder.Encode(obj.Source)
	if err != nil {
		return err
	}
	// Serialize `SourceReceiptTokenAccount` param:
	err = encoder.Encode(obj.SourceReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `SourceFundAccount` param (optional):
	{
		if obj.SourceFundAccount == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SourceFundAccount)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Destination` param:
	err = encoder.Encode(obj.Destination)
	if err != nil {
		return err
	}
	// Serialize `DestinationReceiptTokenAccount` param:
	err = encoder.Encode(obj.DestinationReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `DestinationFundAccount` param (optional):
	{
		if obj.DestinationFundAccount == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.DestinationFundAccount)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `TransferredReceiptTokenAmount` param:
	err = encoder.Encode(obj.TransferredReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserTransferredReceiptToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FundAccount`:
	err = decoder.Decode(&obj.FundAccount)
	if err != nil {
		return err
	}
	// Deserialize `UpdatedUserRewardAccounts`:
	err = decoder.Decode(&obj.UpdatedUserRewardAccounts)
	if err != nil {
		return err
	}
	// Deserialize `Source`:
	err = decoder.Decode(&obj.Source)
	if err != nil {
		return err
	}
	// Deserialize `SourceReceiptTokenAccount`:
	err = decoder.Decode(&obj.SourceReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `SourceFundAccount` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SourceFundAccount)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Destination`:
	err = decoder.Decode(&obj.Destination)
	if err != nil {
		return err
	}
	// Deserialize `DestinationReceiptTokenAccount`:
	err = decoder.Decode(&obj.DestinationReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `DestinationFundAccount` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.DestinationFundAccount)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `TransferredReceiptTokenAmount`:
	err = decoder.Decode(&obj.TransferredReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type UserUnwrappedReceiptToken struct {
	ReceiptTokenMint                    ag_solanago.PublicKey
	WrappedTokenMint                    ag_solanago.PublicKey
	FundAccount                         ag_solanago.PublicKey
	User                                ag_solanago.PublicKey
	UserReceiptTokenAccount             ag_solanago.PublicKey
	UserWrappedTokenAccount             ag_solanago.PublicKey
	UpdatedUserFundAccount              *ag_solanago.PublicKey `bin:"optional"`
	UpdatedUserRewardAccount            *ag_solanago.PublicKey `bin:"optional"`
	UpdatedFundWrapAccountRewardAccount ag_solanago.PublicKey
	UnwrappedReceiptTokenAmount         uint64
}

func (obj UserUnwrappedReceiptToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `WrappedTokenMint` param:
	err = encoder.Encode(obj.WrappedTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FundAccount` param:
	err = encoder.Encode(obj.FundAccount)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `UserReceiptTokenAccount` param:
	err = encoder.Encode(obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `UserWrappedTokenAccount` param:
	err = encoder.Encode(obj.UserWrappedTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `UpdatedUserFundAccount` param (optional):
	{
		if obj.UpdatedUserFundAccount == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.UpdatedUserFundAccount)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `UpdatedUserRewardAccount` param (optional):
	{
		if obj.UpdatedUserRewardAccount == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.UpdatedUserRewardAccount)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `UpdatedFundWrapAccountRewardAccount` param:
	err = encoder.Encode(obj.UpdatedFundWrapAccountRewardAccount)
	if err != nil {
		return err
	}
	// Serialize `UnwrappedReceiptTokenAmount` param:
	err = encoder.Encode(obj.UnwrappedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserUnwrappedReceiptToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `WrappedTokenMint`:
	err = decoder.Decode(&obj.WrappedTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FundAccount`:
	err = decoder.Decode(&obj.FundAccount)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `UserReceiptTokenAccount`:
	err = decoder.Decode(&obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserWrappedTokenAccount`:
	err = decoder.Decode(&obj.UserWrappedTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `UpdatedUserFundAccount` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.UpdatedUserFundAccount)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `UpdatedUserRewardAccount` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.UpdatedUserRewardAccount)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `UpdatedFundWrapAccountRewardAccount`:
	err = decoder.Decode(&obj.UpdatedFundWrapAccountRewardAccount)
	if err != nil {
		return err
	}
	// Deserialize `UnwrappedReceiptTokenAmount`:
	err = decoder.Decode(&obj.UnwrappedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type UserUpdatedRewardPool struct {
	ReceiptTokenMint          ag_solanago.PublicKey
	UpdatedUserRewardAccounts []ag_solanago.PublicKey
}

func (obj UserUpdatedRewardPool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `UpdatedUserRewardAccounts` param:
	err = encoder.Encode(obj.UpdatedUserRewardAccounts)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserUpdatedRewardPool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `UpdatedUserRewardAccounts`:
	err = decoder.Decode(&obj.UpdatedUserRewardAccounts)
	if err != nil {
		return err
	}
	return nil
}

type UserWithdrewFromFund struct {
	ReceiptTokenMint           ag_solanago.PublicKey
	FundAccount                ag_solanago.PublicKey
	SupportedTokenMint         *ag_solanago.PublicKey `bin:"optional"`
	User                       ag_solanago.PublicKey
	UserReceiptTokenAccount    ag_solanago.PublicKey
	UserFundAccount            ag_solanago.PublicKey
	UserSupportedTokenAccount  *ag_solanago.PublicKey `bin:"optional"`
	FundWithdrawalBatchAccount ag_solanago.PublicKey
	BatchId                    uint64
	RequestId                  uint64
	BurntReceiptTokenAmount    uint64
	ReturnedReceiptTokenAmount uint64
	WithdrawnAmount            uint64
	DeductedFeeAmount          uint64
}

func (obj UserWithdrewFromFund) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FundAccount` param:
	err = encoder.Encode(obj.FundAccount)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenMint` param (optional):
	{
		if obj.SupportedTokenMint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `UserReceiptTokenAccount` param:
	err = encoder.Encode(obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `UserFundAccount` param:
	err = encoder.Encode(obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Serialize `UserSupportedTokenAccount` param (optional):
	{
		if obj.UserSupportedTokenAccount == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.UserSupportedTokenAccount)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `FundWithdrawalBatchAccount` param:
	err = encoder.Encode(obj.FundWithdrawalBatchAccount)
	if err != nil {
		return err
	}
	// Serialize `BatchId` param:
	err = encoder.Encode(obj.BatchId)
	if err != nil {
		return err
	}
	// Serialize `RequestId` param:
	err = encoder.Encode(obj.RequestId)
	if err != nil {
		return err
	}
	// Serialize `BurntReceiptTokenAmount` param:
	err = encoder.Encode(obj.BurntReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `ReturnedReceiptTokenAmount` param:
	err = encoder.Encode(obj.ReturnedReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `WithdrawnAmount` param:
	err = encoder.Encode(obj.WithdrawnAmount)
	if err != nil {
		return err
	}
	// Serialize `DeductedFeeAmount` param:
	err = encoder.Encode(obj.DeductedFeeAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserWithdrewFromFund) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FundAccount`:
	err = decoder.Decode(&obj.FundAccount)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenMint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `UserReceiptTokenAccount`:
	err = decoder.Decode(&obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserFundAccount`:
	err = decoder.Decode(&obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserSupportedTokenAccount` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.UserSupportedTokenAccount)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `FundWithdrawalBatchAccount`:
	err = decoder.Decode(&obj.FundWithdrawalBatchAccount)
	if err != nil {
		return err
	}
	// Deserialize `BatchId`:
	err = decoder.Decode(&obj.BatchId)
	if err != nil {
		return err
	}
	// Deserialize `RequestId`:
	err = decoder.Decode(&obj.RequestId)
	if err != nil {
		return err
	}
	// Deserialize `BurntReceiptTokenAmount`:
	err = decoder.Decode(&obj.BurntReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `ReturnedReceiptTokenAmount`:
	err = decoder.Decode(&obj.ReturnedReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawnAmount`:
	err = decoder.Decode(&obj.WithdrawnAmount)
	if err != nil {
		return err
	}
	// Deserialize `DeductedFeeAmount`:
	err = decoder.Decode(&obj.DeductedFeeAmount)
	if err != nil {
		return err
	}
	return nil
}

type UserWrappedReceiptToken struct {
	ReceiptTokenMint                    ag_solanago.PublicKey
	WrappedTokenMint                    ag_solanago.PublicKey
	FundAccount                         ag_solanago.PublicKey
	User                                ag_solanago.PublicKey
	UserReceiptTokenAccount             ag_solanago.PublicKey
	UserWrappedTokenAccount             ag_solanago.PublicKey
	UpdatedUserFundAccount              *ag_solanago.PublicKey `bin:"optional"`
	UpdatedUserRewardAccount            *ag_solanago.PublicKey `bin:"optional"`
	UpdatedFundWrapAccountRewardAccount ag_solanago.PublicKey
	WrappedReceiptTokenAmount           uint64
}

func (obj UserWrappedReceiptToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `WrappedTokenMint` param:
	err = encoder.Encode(obj.WrappedTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FundAccount` param:
	err = encoder.Encode(obj.FundAccount)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `UserReceiptTokenAccount` param:
	err = encoder.Encode(obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `UserWrappedTokenAccount` param:
	err = encoder.Encode(obj.UserWrappedTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `UpdatedUserFundAccount` param (optional):
	{
		if obj.UpdatedUserFundAccount == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.UpdatedUserFundAccount)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `UpdatedUserRewardAccount` param (optional):
	{
		if obj.UpdatedUserRewardAccount == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.UpdatedUserRewardAccount)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `UpdatedFundWrapAccountRewardAccount` param:
	err = encoder.Encode(obj.UpdatedFundWrapAccountRewardAccount)
	if err != nil {
		return err
	}
	// Serialize `WrappedReceiptTokenAmount` param:
	err = encoder.Encode(obj.WrappedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserWrappedReceiptToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `WrappedTokenMint`:
	err = decoder.Decode(&obj.WrappedTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FundAccount`:
	err = decoder.Decode(&obj.FundAccount)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `UserReceiptTokenAccount`:
	err = decoder.Decode(&obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserWrappedTokenAccount`:
	err = decoder.Decode(&obj.UserWrappedTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `UpdatedUserFundAccount` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.UpdatedUserFundAccount)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `UpdatedUserRewardAccount` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.UpdatedUserRewardAccount)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `UpdatedFundWrapAccountRewardAccount`:
	err = decoder.Decode(&obj.UpdatedFundWrapAccountRewardAccount)
	if err != nil {
		return err
	}
	// Deserialize `WrappedReceiptTokenAmount`:
	err = decoder.Decode(&obj.WrappedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type WithdrawStakeItem struct {
	ValidatorStakeAccount ag_solanago.PublicKey
	FundStakeAccount      ag_solanago.PublicKey
	FundStakeAccountIndex uint8
}

func (obj WithdrawStakeItem) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ValidatorStakeAccount` param:
	err = encoder.Encode(obj.ValidatorStakeAccount)
	if err != nil {
		return err
	}
	// Serialize `FundStakeAccount` param:
	err = encoder.Encode(obj.FundStakeAccount)
	if err != nil {
		return err
	}
	// Serialize `FundStakeAccountIndex` param:
	err = encoder.Encode(obj.FundStakeAccountIndex)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WithdrawStakeItem) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ValidatorStakeAccount`:
	err = decoder.Decode(&obj.ValidatorStakeAccount)
	if err != nil {
		return err
	}
	// Deserialize `FundStakeAccount`:
	err = decoder.Decode(&obj.FundStakeAccount)
	if err != nil {
		return err
	}
	// Deserialize `FundStakeAccountIndex`:
	err = decoder.Decode(&obj.FundStakeAccountIndex)
	if err != nil {
		return err
	}
	return nil
}

type WithdrawalBatch struct {
	BatchId            uint64
	NumRequests        uint64
	ReceiptTokenAmount uint64
	EnqueuedAt         int64
	Reserved           [32]uint8
}

func (obj WithdrawalBatch) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BatchId` param:
	err = encoder.Encode(obj.BatchId)
	if err != nil {
		return err
	}
	// Serialize `NumRequests` param:
	err = encoder.Encode(obj.NumRequests)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenAmount` param:
	err = encoder.Encode(obj.ReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `EnqueuedAt` param:
	err = encoder.Encode(obj.EnqueuedAt)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WithdrawalBatch) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BatchId`:
	err = decoder.Decode(&obj.BatchId)
	if err != nil {
		return err
	}
	// Deserialize `NumRequests`:
	err = decoder.Decode(&obj.NumRequests)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenAmount`:
	err = decoder.Decode(&obj.ReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `EnqueuedAt`:
	err = decoder.Decode(&obj.EnqueuedAt)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type WithdrawalRequest struct {
	BatchId               uint64
	RequestId             uint64
	ReceiptTokenAmount    uint64
	CreatedAt             int64
	SupportedTokenMint    *ag_solanago.PublicKey `bin:"optional"`
	SupportedTokenProgram *ag_solanago.PublicKey `bin:"optional"`
	Reserved              [14]uint8
}

func (obj WithdrawalRequest) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BatchId` param:
	err = encoder.Encode(obj.BatchId)
	if err != nil {
		return err
	}
	// Serialize `RequestId` param:
	err = encoder.Encode(obj.RequestId)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenAmount` param:
	err = encoder.Encode(obj.ReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `CreatedAt` param:
	err = encoder.Encode(obj.CreatedAt)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenMint` param (optional):
	{
		if obj.SupportedTokenMint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `SupportedTokenProgram` param (optional):
	{
		if obj.SupportedTokenProgram == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SupportedTokenProgram)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WithdrawalRequest) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BatchId`:
	err = decoder.Decode(&obj.BatchId)
	if err != nil {
		return err
	}
	// Deserialize `RequestId`:
	err = decoder.Decode(&obj.RequestId)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenAmount`:
	err = decoder.Decode(&obj.ReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `CreatedAt`:
	err = decoder.Decode(&obj.CreatedAt)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenMint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `SupportedTokenProgram` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SupportedTokenProgram)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type WrappedToken struct {
	Mint     ag_solanago.PublicKey
	Program  ag_solanago.PublicKey
	Decimals uint8
	Enabled  uint8
	Padding  [6]uint8
	Supply   uint64
	Reserved [1984]uint8
}

func (obj WrappedToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Program` param:
	err = encoder.Encode(obj.Program)
	if err != nil {
		return err
	}
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	// Serialize `Enabled` param:
	err = encoder.Encode(obj.Enabled)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `Supply` param:
	err = encoder.Encode(obj.Supply)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WrappedToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Program`:
	err = decoder.Decode(&obj.Program)
	if err != nil {
		return err
	}
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	// Deserialize `Enabled`:
	err = decoder.Decode(&obj.Enabled)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `Supply`:
	err = decoder.Decode(&obj.Supply)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}
