// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package restaking

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// FundManagerInitializeFundNormalizedToken is the `fund_manager_initialize_fund_normalized_token` instruction.
type FundManagerInitializeFundNormalizedToken struct {

	// [0] = [SIGNER] fund_manager
	//
	// [1] = [] system_program
	//
	// [2] = [WRITE] fund_account
	//
	// [3] = [] fund_reserve_account
	//
	// [4] = [] receipt_token_mint
	//
	// [5] = [] normalized_token_mint
	//
	// [6] = [] normalized_token_program
	//
	// [7] = [] fund_normalized_token_reserve_account
	//
	// [8] = [] normalized_token_pool_account
	//
	// [9] = [] event_authority
	//
	// [10] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewFundManagerInitializeFundNormalizedTokenInstructionBuilder creates a new `FundManagerInitializeFundNormalizedToken` instruction builder.
func NewFundManagerInitializeFundNormalizedTokenInstructionBuilder() *FundManagerInitializeFundNormalizedToken {
	nd := &FundManagerInitializeFundNormalizedToken{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 11),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(Addresses["5UpLTLA7Wjqp7qdfjuTtPcUw3aVtbqFA5Mgm34mxPNg2"]).SIGNER()
	nd.AccountMetaSlice[1] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	nd.AccountMetaSlice[6] = ag_solanago.Meta(Addresses["TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"])
	return nd
}

// SetFundManagerAccount sets the "fund_manager" account.
func (inst *FundManagerInitializeFundNormalizedToken) SetFundManagerAccount(fundManager ag_solanago.PublicKey) *FundManagerInitializeFundNormalizedToken {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(fundManager).SIGNER()
	return inst
}

// GetFundManagerAccount gets the "fund_manager" account.
func (inst *FundManagerInitializeFundNormalizedToken) GetFundManagerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *FundManagerInitializeFundNormalizedToken) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *FundManagerInitializeFundNormalizedToken {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *FundManagerInitializeFundNormalizedToken) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetFundAccountAccount sets the "fund_account" account.
func (inst *FundManagerInitializeFundNormalizedToken) SetFundAccountAccount(fundAccount ag_solanago.PublicKey) *FundManagerInitializeFundNormalizedToken {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(fundAccount).WRITE()
	return inst
}

func (inst *FundManagerInitializeFundNormalizedToken) findFindFundAccountAddress(receiptTokenMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: fund
	seeds = append(seeds, []byte{byte(0x66), byte(0x75), byte(0x6e), byte(0x64)})
	// path: receiptTokenMint
	seeds = append(seeds, receiptTokenMint.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindFundAccountAddressWithBumpSeed calculates FundAccount account address with given seeds and a known bump seed.
func (inst *FundManagerInitializeFundNormalizedToken) FindFundAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindFundAccountAddress(receiptTokenMint, bumpSeed)
	return
}

func (inst *FundManagerInitializeFundNormalizedToken) MustFindFundAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundAccountAddress(receiptTokenMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindFundAccountAddress finds FundAccount account address with given seeds.
func (inst *FundManagerInitializeFundNormalizedToken) FindFundAccountAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindFundAccountAddress(receiptTokenMint, 0)
	return
}

func (inst *FundManagerInitializeFundNormalizedToken) MustFindFundAccountAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundAccountAddress(receiptTokenMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetFundAccountAccount gets the "fund_account" account.
func (inst *FundManagerInitializeFundNormalizedToken) GetFundAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetFundReserveAccountAccount sets the "fund_reserve_account" account.
func (inst *FundManagerInitializeFundNormalizedToken) SetFundReserveAccountAccount(fundReserveAccount ag_solanago.PublicKey) *FundManagerInitializeFundNormalizedToken {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(fundReserveAccount)
	return inst
}

func (inst *FundManagerInitializeFundNormalizedToken) findFindFundReserveAccountAddress(receiptTokenMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: fund_reserve
	seeds = append(seeds, []byte{byte(0x66), byte(0x75), byte(0x6e), byte(0x64), byte(0x5f), byte(0x72), byte(0x65), byte(0x73), byte(0x65), byte(0x72), byte(0x76), byte(0x65)})
	// path: receiptTokenMint
	seeds = append(seeds, receiptTokenMint.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindFundReserveAccountAddressWithBumpSeed calculates FundReserveAccount account address with given seeds and a known bump seed.
func (inst *FundManagerInitializeFundNormalizedToken) FindFundReserveAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindFundReserveAccountAddress(receiptTokenMint, bumpSeed)
	return
}

func (inst *FundManagerInitializeFundNormalizedToken) MustFindFundReserveAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundReserveAccountAddress(receiptTokenMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindFundReserveAccountAddress finds FundReserveAccount account address with given seeds.
func (inst *FundManagerInitializeFundNormalizedToken) FindFundReserveAccountAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindFundReserveAccountAddress(receiptTokenMint, 0)
	return
}

func (inst *FundManagerInitializeFundNormalizedToken) MustFindFundReserveAccountAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundReserveAccountAddress(receiptTokenMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetFundReserveAccountAccount gets the "fund_reserve_account" account.
func (inst *FundManagerInitializeFundNormalizedToken) GetFundReserveAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetReceiptTokenMintAccount sets the "receipt_token_mint" account.
func (inst *FundManagerInitializeFundNormalizedToken) SetReceiptTokenMintAccount(receiptTokenMint ag_solanago.PublicKey) *FundManagerInitializeFundNormalizedToken {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(receiptTokenMint)
	return inst
}

// GetReceiptTokenMintAccount gets the "receipt_token_mint" account.
func (inst *FundManagerInitializeFundNormalizedToken) GetReceiptTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetNormalizedTokenMintAccount sets the "normalized_token_mint" account.
func (inst *FundManagerInitializeFundNormalizedToken) SetNormalizedTokenMintAccount(normalizedTokenMint ag_solanago.PublicKey) *FundManagerInitializeFundNormalizedToken {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(normalizedTokenMint)
	return inst
}

// GetNormalizedTokenMintAccount gets the "normalized_token_mint" account.
func (inst *FundManagerInitializeFundNormalizedToken) GetNormalizedTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetNormalizedTokenProgramAccount sets the "normalized_token_program" account.
func (inst *FundManagerInitializeFundNormalizedToken) SetNormalizedTokenProgramAccount(normalizedTokenProgram ag_solanago.PublicKey) *FundManagerInitializeFundNormalizedToken {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(normalizedTokenProgram)
	return inst
}

// GetNormalizedTokenProgramAccount gets the "normalized_token_program" account.
func (inst *FundManagerInitializeFundNormalizedToken) GetNormalizedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetFundNormalizedTokenReserveAccountAccount sets the "fund_normalized_token_reserve_account" account.
func (inst *FundManagerInitializeFundNormalizedToken) SetFundNormalizedTokenReserveAccountAccount(fundNormalizedTokenReserveAccount ag_solanago.PublicKey) *FundManagerInitializeFundNormalizedToken {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(fundNormalizedTokenReserveAccount)
	return inst
}

func (inst *FundManagerInitializeFundNormalizedToken) findFindFundNormalizedTokenReserveAccountAddress(fundReserveAccount ag_solanago.PublicKey, normalizedTokenProgram ag_solanago.PublicKey, normalizedTokenMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// path: fundReserveAccount
	seeds = append(seeds, fundReserveAccount.Bytes())
	// path: normalizedTokenProgram
	seeds = append(seeds, normalizedTokenProgram.Bytes())
	// path: normalizedTokenMint
	seeds = append(seeds, normalizedTokenMint.Bytes())

	programID := Addresses["ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"]

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, programID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, programID)
	}
	return
}

// FindFundNormalizedTokenReserveAccountAddressWithBumpSeed calculates FundNormalizedTokenReserveAccount account address with given seeds and a known bump seed.
func (inst *FundManagerInitializeFundNormalizedToken) FindFundNormalizedTokenReserveAccountAddressWithBumpSeed(fundReserveAccount ag_solanago.PublicKey, normalizedTokenProgram ag_solanago.PublicKey, normalizedTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindFundNormalizedTokenReserveAccountAddress(fundReserveAccount, normalizedTokenProgram, normalizedTokenMint, bumpSeed)
	return
}

func (inst *FundManagerInitializeFundNormalizedToken) MustFindFundNormalizedTokenReserveAccountAddressWithBumpSeed(fundReserveAccount ag_solanago.PublicKey, normalizedTokenProgram ag_solanago.PublicKey, normalizedTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundNormalizedTokenReserveAccountAddress(fundReserveAccount, normalizedTokenProgram, normalizedTokenMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindFundNormalizedTokenReserveAccountAddress finds FundNormalizedTokenReserveAccount account address with given seeds.
func (inst *FundManagerInitializeFundNormalizedToken) FindFundNormalizedTokenReserveAccountAddress(fundReserveAccount ag_solanago.PublicKey, normalizedTokenProgram ag_solanago.PublicKey, normalizedTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindFundNormalizedTokenReserveAccountAddress(fundReserveAccount, normalizedTokenProgram, normalizedTokenMint, 0)
	return
}

func (inst *FundManagerInitializeFundNormalizedToken) MustFindFundNormalizedTokenReserveAccountAddress(fundReserveAccount ag_solanago.PublicKey, normalizedTokenProgram ag_solanago.PublicKey, normalizedTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundNormalizedTokenReserveAccountAddress(fundReserveAccount, normalizedTokenProgram, normalizedTokenMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetFundNormalizedTokenReserveAccountAccount gets the "fund_normalized_token_reserve_account" account.
func (inst *FundManagerInitializeFundNormalizedToken) GetFundNormalizedTokenReserveAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetNormalizedTokenPoolAccountAccount sets the "normalized_token_pool_account" account.
func (inst *FundManagerInitializeFundNormalizedToken) SetNormalizedTokenPoolAccountAccount(normalizedTokenPoolAccount ag_solanago.PublicKey) *FundManagerInitializeFundNormalizedToken {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(normalizedTokenPoolAccount)
	return inst
}

func (inst *FundManagerInitializeFundNormalizedToken) findFindNormalizedTokenPoolAccountAddress(normalizedTokenMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: nt_pool
	seeds = append(seeds, []byte{byte(0x6e), byte(0x74), byte(0x5f), byte(0x70), byte(0x6f), byte(0x6f), byte(0x6c)})
	// path: normalizedTokenMint
	seeds = append(seeds, normalizedTokenMint.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindNormalizedTokenPoolAccountAddressWithBumpSeed calculates NormalizedTokenPoolAccount account address with given seeds and a known bump seed.
func (inst *FundManagerInitializeFundNormalizedToken) FindNormalizedTokenPoolAccountAddressWithBumpSeed(normalizedTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindNormalizedTokenPoolAccountAddress(normalizedTokenMint, bumpSeed)
	return
}

func (inst *FundManagerInitializeFundNormalizedToken) MustFindNormalizedTokenPoolAccountAddressWithBumpSeed(normalizedTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindNormalizedTokenPoolAccountAddress(normalizedTokenMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindNormalizedTokenPoolAccountAddress finds NormalizedTokenPoolAccount account address with given seeds.
func (inst *FundManagerInitializeFundNormalizedToken) FindNormalizedTokenPoolAccountAddress(normalizedTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindNormalizedTokenPoolAccountAddress(normalizedTokenMint, 0)
	return
}

func (inst *FundManagerInitializeFundNormalizedToken) MustFindNormalizedTokenPoolAccountAddress(normalizedTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindNormalizedTokenPoolAccountAddress(normalizedTokenMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetNormalizedTokenPoolAccountAccount gets the "normalized_token_pool_account" account.
func (inst *FundManagerInitializeFundNormalizedToken) GetNormalizedTokenPoolAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *FundManagerInitializeFundNormalizedToken) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *FundManagerInitializeFundNormalizedToken {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(eventAuthority)
	return inst
}

func (inst *FundManagerInitializeFundNormalizedToken) findFindEventAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: __event_authority
	seeds = append(seeds, []byte{byte(0x5f), byte(0x5f), byte(0x65), byte(0x76), byte(0x65), byte(0x6e), byte(0x74), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindEventAuthorityAddressWithBumpSeed calculates EventAuthority account address with given seeds and a known bump seed.
func (inst *FundManagerInitializeFundNormalizedToken) FindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindEventAuthorityAddress(bumpSeed)
	return
}

func (inst *FundManagerInitializeFundNormalizedToken) MustFindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindEventAuthorityAddress finds EventAuthority account address with given seeds.
func (inst *FundManagerInitializeFundNormalizedToken) FindEventAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindEventAuthorityAddress(0)
	return
}

func (inst *FundManagerInitializeFundNormalizedToken) MustFindEventAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *FundManagerInitializeFundNormalizedToken) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetProgramAccount sets the "program" account.
func (inst *FundManagerInitializeFundNormalizedToken) SetProgramAccount(program ag_solanago.PublicKey) *FundManagerInitializeFundNormalizedToken {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *FundManagerInitializeFundNormalizedToken) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

func (inst FundManagerInitializeFundNormalizedToken) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_FundManagerInitializeFundNormalizedToken,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst FundManagerInitializeFundNormalizedToken) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *FundManagerInitializeFundNormalizedToken) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.FundManager is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.FundAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.FundReserveAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.ReceiptTokenMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.NormalizedTokenMint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.NormalizedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.FundNormalizedTokenReserveAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.NormalizedTokenPoolAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *FundManagerInitializeFundNormalizedToken) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("FundManagerInitializeFundNormalizedToken")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=11]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                  fund_manager", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                system_program", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                         fund_", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                 fund_reserve_", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("            receipt_token_mint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         normalized_token_mint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("      normalized_token_program", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("fund_normalized_token_reserve_", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("        normalized_token_pool_", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("               event_authority", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("                       program", inst.AccountMetaSlice.Get(10)))
					})
				})
		})
}

func (obj FundManagerInitializeFundNormalizedToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *FundManagerInitializeFundNormalizedToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewFundManagerInitializeFundNormalizedTokenInstruction declares a new FundManagerInitializeFundNormalizedToken instruction with the provided parameters and accounts.
func NewFundManagerInitializeFundNormalizedTokenInstruction(
	// Accounts:
	fundManager ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	fundAccount ag_solanago.PublicKey,
	fundReserveAccount ag_solanago.PublicKey,
	receiptTokenMint ag_solanago.PublicKey,
	normalizedTokenMint ag_solanago.PublicKey,
	normalizedTokenProgram ag_solanago.PublicKey,
	fundNormalizedTokenReserveAccount ag_solanago.PublicKey,
	normalizedTokenPoolAccount ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *FundManagerInitializeFundNormalizedToken {
	return NewFundManagerInitializeFundNormalizedTokenInstructionBuilder().
		SetFundManagerAccount(fundManager).
		SetSystemProgramAccount(systemProgram).
		SetFundAccountAccount(fundAccount).
		SetFundReserveAccountAccount(fundReserveAccount).
		SetReceiptTokenMintAccount(receiptTokenMint).
		SetNormalizedTokenMintAccount(normalizedTokenMint).
		SetNormalizedTokenProgramAccount(normalizedTokenProgram).
		SetFundNormalizedTokenReserveAccountAccount(fundNormalizedTokenReserveAccount).
		SetNormalizedTokenPoolAccountAccount(normalizedTokenPoolAccount).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
